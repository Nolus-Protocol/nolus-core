name: Builder
# Builder checks if builder image is present on AWS registry
# If there is no image with the specified version new image is built and pushed
on:
  push:
    tags:
      - v*.*.*
env:
  AWS_REGISTRY_ID: "013603813222"
  AWS_REGION: "us-east-1"
  IMAGE_NAME: "builder"
  IMAGE_NAME_FULL: "public.ecr.aws/nolus/builder"
  IMAGE_TAG: "0.7"
  IMAGE_DOCKERFILE: "./build/builder_spec.Dockerfile"

jobs:
  check-exist:
    if: github.ref_protected
    name: Check if builder image exists
    runs-on: ubuntu-latest
    container: amazon/aws-cli
    environment: dev chain
    
    outputs:
      # 'failure' -  when no image with such tag exists 
      # 'success' - image exists
      status: ${{ steps.check.outcome }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run check exist image
        id: check
        continue-on-error: true
        run: |
          aws ecr-public describe-images \
              --registry-id $AWS_REGISTRY_ID \
              --repository-name $IMAGE_NAME \
              --region $AWS_REGION \
              --image-ids=imageTag=$IMAGE_TAG

  build-push:
    needs: check-exist
    if: needs.check-exist.outputs.status == 'failure'

    name: Build and push builder image
    runs-on: ubuntu-latest
    environment: dev chain

    steps:
      - uses: actions/checkout@v3

      - name: Login to ECR
        id: ecr
        uses: elgohr/ecr-login-action@v3
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ env.AWS_REGION }}

      - name: Build and push image
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          username: ${{ steps.ecr.outputs.username }}
          password: ${{ steps.ecr.outputs.password }}
          registry: ${{ steps.ecr.outputs.registry }}
          dockerfile: ${{ env.IMAGE_DOCKERFILE }}
          name: ${{ env.IMAGE_NAME_FULL }}
          tags: ${{ env.IMAGE_TAG }}
