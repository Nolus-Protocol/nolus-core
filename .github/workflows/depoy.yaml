name: Deploy dev network
# Builds new binary and deploy on dev network on a new version only.
# A version is denoted with a protected tag.
on:
  pull_request:
  push:
    tags:
      - v*.*.*

env:
  ARTIFACT_BIN: "nolus.tar.gz"
  ARTIFACT_SCRIPTS: "scripts.tar.gz"
  IMAGE_NAME: "public.ecr.aws/nolus/node"
  IMAGE_TAG: ${{ github.ref_name }}
  IMAGE_DOCKERFILE: "./build/builder_spec.Dockerfile"
  ACCOUNTS_DIR: "accounts"
  CONTRACTS_INFO_FILE: "contracts-info.json"
  CONTRACTS_REPO: "github.com/Nolus-Protocol/nolus-money-market"
  SMART_CONTRACTS_ADMIN_ADDR: "nolus15jv5h5wjf3haljzfk5vcxx86n33rswsm7u3jgn" 
  FAUCET_TOKENS_DEV: "1000000000000$NLS_DENOM,1000000000000$STABLE_BANK_SYMBOL_DEV"
  STABLE_TICKER_DEV: "USDC"
  CONTRACTS_VERSION: "v0.2.7"
  
jobs:
  # Checks if tag is new version.
  prep-version:
    name: Prepare version
    runs-on: ubuntu-latest

    outputs:
      build-new-version: ${{ steps.prep.outputs.build-new-version }}

    steps:
    - name: Check if version exists
      id: prep
      run: |
        if [[ $GITHUB_REF_PROTECTED == "true" ]]  &&  [[ -n "$IMAGE_TAG" ]];
        then
          echo "build-new-version=true" >> $GITHUB_OUTPUT
        fi

  # Packs deploy scripts.
  prep-deploy:
    if: needs.prep-version.outputs.build-new-version
    name: Prepare deploy
    runs-on: ubuntu-latest
    needs: prep-version

    steps:
      - uses: actions/checkout@v3
      
      - name: Prepare new version deploy
        env:
          BUILD_NEW_VERSION: ${{ needs.prep-version.outputs.build-new-version }}
        run: |
          if [[ ${{ env.BUILD_NEW_VERSION }} == "true" ]];
          then
            echo build-new-version=${{ env.BUILD_NEW_VERSION }}
            tar -czvf ${{ env.ARTIFACT_SCRIPTS }} scripts/remote scripts/common
          else
            echo "Skip preparation for deploy since this is not a new version build"
          fi

      - name: Archive artifact scripts
        uses: actions/upload-artifact@v3
        with:
          name: scripts
          path: ${{ env.ARTIFACT_SCRIPTS }}

  # Builds new version of the binary.
  build-binary:
    if: needs.prep-version.outputs.build-new-version
    name: Build binary
    runs-on: ubuntu-latest
    needs: prep-version
    container:
      image: "public.ecr.aws/nolus/builder:0.7"

    steps:
    - uses: actions/checkout@v3

    # This is to fix GIT not liking owner of the checkout dir
    # Happens when executing not into the default container
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Run build binary
      run: |
        make build -f gh-makefile
        echo "Ensuring binary is statically linked ..."
        file target/release/nolusd | grep "statically linked"
        tar -C target/release/ -czvf $ARTIFACT_BIN .

    - name: Archive binary
      uses: actions/upload-artifact@v3
      with:
        name: nolusd-${{ env.IMAGE_TAG }}
        path: ${{ env.ARTIFACT_BIN }}

  # Using gh cli to download artifacts from 'nolus-money-market' repo.
  # https://cli.github.com/manual
  download-wasm:
    if: needs.prep-version.outputs.build-new-version
    name: Download wasm contracts
    runs-on: ubuntu-latest
    needs: prep-version
    
    env: 
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: List Releases
        run: | 
          gh release list --repo $CONTRACTS_REPO
      
      - name: Download wasm
        run: |
          gh release download --output wasm --repo $CONTRACTS_REPO $CONTRACTS_VERSION

      - name: Archive wasm
        uses: actions/upload-artifact@v3
        with:
          name: wasm-${{ env.CONTRACTS_VERSION }}
          path: wasm-${{ env.CONTRACTS_VERSION }}

  # Deploy a new version of the dev network.
  setup-dev-network:
    if: needs.prep-version.outputs.build-new-version
    name: Setup dev network
    runs-on: ubuntu-latest
    needs: [build-binary, prep-deploy, prep-version, download-wasm]
    container: amazon/aws-cli
    environment: dev chain

    steps:
      - name: Download scripts
        uses: actions/download-artifact@v3
        with:
          name: scripts

      - name: Download wasm
        uses: actions/download-artifact@v3
        with:
          name: wasm-${{ env.CONTRACTS_VERSION }}

      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: nolusd-${{ env.IMAGE_TAG }}
        
      - name: Setup dev network
        env:
          BUILD_NEW_VERSION: ${{ needs.prep-version.outputs.build-new-version }}
        run: |
          echo build-new-version=${{ env.BUILD_NEW_VERSION }}
          
          if [[ ${{ env.BUILD_NEW_VERSION }} == "true"" ]];
          then
            set -euox pipefail
            yum install -y tar gzip unzip jq
            tar -xvf $ARTIFACT_BIN
            export PATH="$(pwd)":$PATH

            ./scripts/init-dev-network.sh --artifact-bin $ARTIFACT_BIN --artifact-scripts $ARTIFACT_SCRIPTS
                  --chain-id nolus-dev-1 -v 3 --validator-accounts-dir "$ACCOUNTS_DIR"
                  --wasm-script-path "artifacts" --wasm-code-path "artifacts"
                  --contracts-owner-addr "$SMART_CONTRACTS_ADMIN_ADDR"
                  --treasury-nls-u128 "1000000000000"
                  --faucet-mnemonic "${{ secrets.FAUCET_MNEMONIC_DEV }}"
                  --faucet-tokens "$FAUCET_TOKENS_DEV"
                  --lpp-native "$STABLE_TICKER_DEV"
                  --contracts-info-file $CONTRACTS_INFO_FILE
          else
            echo "Skip preparation for deploy since this is not a new version build"
          fi

      - name: Archive dev net data
        uses: actions/upload-artifact@v3
        with:
          name: dev-net-data-${{ env.IMAGE_TAG }}
          path: |
            ${{ env.ACCOUNTS_DIR }}
            ${{ env.CONTRACTS_INFO_FILE }}
