syntax = "proto3";
package nolus.interchainqueries;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "nolus/interchainqueries/genesis.proto";
import "nolus/interchainqueries/params.proto";
import "tendermint/abci/types.proto";
import "tendermint/crypto/proof.proto";

option go_package = "github.com/Nolus-Protocol/nolus-core/x/interchainqueries/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RegisterInterchainQuery registers a new interchain query.
  rpc RegisterInterchainQuery(MsgRegisterInterchainQuery) returns (MsgRegisterInterchainQueryResponse);

  // SubmitQueryResult submits a result of an interchain query.
  rpc SubmitQueryResult(MsgSubmitQueryResult) returns (MsgSubmitQueryResultResponse);

  // RemoveInterchainQuery removes an interchain query.
  rpc RemoveInterchainQuery(MsgRemoveInterchainQueryRequest) returns (MsgRemoveInterchainQueryResponse);

  // UpdateInterchainQuery updates an interchain query.
  rpc UpdateInterchainQuery(MsgUpdateInterchainQueryRequest) returns (MsgUpdateInterchainQueryResponse);

  // UpdateParams updates the x/interchainqueries parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterInterchainQuery is the MsgRegisterInterchainQuery request type.
message MsgRegisterInterchainQuery {
  option (cosmos.msg.v1.signer) = "sender";

  // defines a query type: `kv` or `tx` now
  string query_type = 1;

  // is used to define KV-storage keys for which we want to get values from
  // remote chain
  repeated KVKey keys = 2;

  // is used to define a filter for transaction search ICQ
  string transactions_filter = 3;

  // is IBC connection ID for getting ConsensusState to verify proofs
  string connection_id = 4;

  // is used to specify how often (in nolus blocks) the query must be updated
  uint64 update_period = 5;

  // is the signer of the message
  string sender = 6;
}

// MsgRegisterInterchainQueryResponse is the MsgRegisterInterchainQuery response type.
message MsgRegisterInterchainQueryResponse {
  uint64 id = 1;
}

// MsgSubmitQueryResult is the MsgSubmitQueryResult request type.
message MsgSubmitQueryResult {
  option (cosmos.msg.v1.signer) = "sender";

  uint64 query_id = 1;
  string sender = 2;

  // is the IBC client ID for an IBC connection between nolus chain and target
  // chain (where the result was obtained from)
  string client_id = 3;
  QueryResult result = 4;
}

// QueryResult is the result of an interchain query.
message QueryResult {
  repeated StorageValue kv_results = 1;
  Block block = 2;
  uint64 height = 3;
  uint64 revision = 4;
  bool allow_kv_callbacks = 5;
}

// StorageValue is the key-value pair for KVStore.
message StorageValue {
  // is the substore name (acc, staking, etc.)
  string storage_prefix = 1;

  // is the key in IAVL store
  bytes key = 2;

  // is the value in IAVL store
  bytes value = 3;

  // is the Merkle proof which proves existence of key-value pair in IAVL
  // storage
  tendermint.crypto.ProofOps proof = 4;
}

// Block is the block info of the chain needed for the interchainqueries module.
message Block {
  // We need to know block X+1 to verify response of transaction for block X
  // since LastResultsHash is root hash of all results from the txs from the
  // previous block
  google.protobuf.Any next_block_header = 1;

  // We need to know block X to verify inclusion of transaction for block X
  google.protobuf.Any header = 2;

  TxValue tx = 3;
}

// TxValue is the transaction info of the chain needed for the interchainqueries module.
message TxValue {
  tendermint.abci.ExecTxResult response = 1;

  // is the Merkle Proof which proves existence of response in block with height
  // next_block_header.Height
  tendermint.crypto.Proof delivery_proof = 2;

  // is the Merkle Proof which proves existence of data in block with height
  // header.Height
  tendermint.crypto.Proof inclusion_proof = 3;

  // is body of the transaction
  bytes data = 4;
}

// MsgSubmitQueryResultResponse is the MsgSubmitQueryResult response type.
message MsgSubmitQueryResultResponse {}

// MsgRemoveInterchainQueryRequest is the MsgRemoveInterchainQuery request type.
message MsgRemoveInterchainQueryRequest {
  option (cosmos.msg.v1.signer) = "sender";
  uint64 query_id = 1;
  string sender = 2; // is the signer of the message
}

// MsgRemoveInterchainQueryResponse is the MsgRemoveInterchainQuery response type.
message MsgRemoveInterchainQueryResponse {}

// MsgUpdateInterchainQueryRequest is the MsgUpdateInterchainQuery request type.
message MsgUpdateInterchainQueryRequest {
  option (cosmos.msg.v1.signer) = "sender";
  uint64 query_id = 1;
  repeated KVKey new_keys = 2;
  uint64 new_update_period = 3;
  string new_transactions_filter = 4;
  string sender = 5; // is the signer of the message
}

// MsgUpdateInterchainQueryResponse is the MsgUpdateInterchainQuery response type.
message MsgUpdateInterchainQueryResponse {}

// MsgUpdateParams is the MsgUpdateParams request type.
//
// Since: 0.47
message MsgUpdateParams {
  option (amino.name) = "interchainqueries/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/interchainqueries parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: 0.47
message MsgUpdateParamsResponse {}
