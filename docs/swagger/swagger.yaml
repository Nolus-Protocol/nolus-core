consumes:
  - application/json
definitions:
  cosmos.app.v1alpha1.Config:
    description: >-
      Config represents the configuration for a Cosmos SDK ABCI app.

      It is intended that all state machine logic including the version of

      baseapp and tx handlers (and possibly even Tendermint) that an app needs

      can be described in a config object. For compatibility, the framework
      should

      allow a mixture of declarative and imperative app wiring, however, apps

      that strive for the maximum ease of maintainability should be able to
      describe

      their state machine with a config object alone.
    properties:
      golang_bindings:
        description: >-
          golang_bindings specifies explicit interface to implementation type
          bindings which

          depinject uses to resolve interface inputs to provider functions.  The
          scope of this

          field's configuration is global (not module specific).
        items:
          description: >-
            GolangBinding is an explicit interface type to implementing type
            binding for dependency injection.
          properties:
            implementation:
              title: >-
                implementation is the implementing type which will be supplied
                when an input of type interface is requested
              type: string
            interface_type:
              title: >-
                interface_type is the interface type which will be bound to a
                specific implementation type
              type: string
          type: object
        type: array
      modules:
        description: modules are the module configurations for the app.
        items:
          description: ModuleConfig is a module configuration for an app.
          properties:
            config:
              description: >-
                config is the config object for the module. Module config
                messages should

                define a ModuleDescriptor using the
                cosmos.app.v1alpha1.is_module extension.
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            golang_bindings:
              description: >-
                golang_bindings specifies explicit interface to implementation
                type bindings which

                depinject uses to resolve interface inputs to provider
                functions.  The scope of this

                field's configuration is module specific.
              items:
                description: >-
                  GolangBinding is an explicit interface type to implementing
                  type binding for dependency injection.
                properties:
                  implementation:
                    title: >-
                      implementation is the implementing type which will be
                      supplied when an input of type interface is requested
                    type: string
                  interface_type:
                    title: >-
                      interface_type is the interface type which will be bound
                      to a specific implementation type
                    type: string
                type: object
              type: array
            name:
              description: >-
                name is the unique name of the module within the app. It should
                be a name

                that persists between different versions of a module so that
                modules

                can be smoothly upgraded to new versions.


                For example, for the module cosmos.bank.module.v1.Module, we may
                chose

                to simply name the module "bank" in the app. When we upgrade to

                cosmos.bank.module.v2.Module, the app-specific name "bank" stays
                the same

                and the framework knows that the v2 module should receive all
                the same state

                that the v1 module had. Note: modules should provide info on
                which versions

                they can migrate from in the ModuleDescriptor.can_migration_from
                field.
              type: string
          type: object
        type: array
    type: object
  cosmos.app.v1alpha1.GolangBinding:
    description: >-
      GolangBinding is an explicit interface type to implementing type binding
      for dependency injection.
    properties:
      implementation:
        title: >-
          implementation is the implementing type which will be supplied when an
          input of type interface is requested
        type: string
      interface_type:
        title: >-
          interface_type is the interface type which will be bound to a specific
          implementation type
        type: string
    type: object
  cosmos.app.v1alpha1.ModuleConfig:
    description: ModuleConfig is a module configuration for an app.
    properties:
      config:
        description: >-
          config is the config object for the module. Module config messages
          should

          define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module
          extension.
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      golang_bindings:
        description: >-
          golang_bindings specifies explicit interface to implementation type
          bindings which

          depinject uses to resolve interface inputs to provider functions.  The
          scope of this

          field's configuration is module specific.
        items:
          description: >-
            GolangBinding is an explicit interface type to implementing type
            binding for dependency injection.
          properties:
            implementation:
              title: >-
                implementation is the implementing type which will be supplied
                when an input of type interface is requested
              type: string
            interface_type:
              title: >-
                interface_type is the interface type which will be bound to a
                specific implementation type
              type: string
          type: object
        type: array
      name:
        description: >-
          name is the unique name of the module within the app. It should be a
          name

          that persists between different versions of a module so that modules

          can be smoothly upgraded to new versions.


          For example, for the module cosmos.bank.module.v1.Module, we may chose

          to simply name the module "bank" in the app. When we upgrade to

          cosmos.bank.module.v2.Module, the app-specific name "bank" stays the
          same

          and the framework knows that the v2 module should receive all the same
          state

          that the v1 module had. Note: modules should provide info on which
          versions

          they can migrate from in the ModuleDescriptor.can_migration_from
          field.
        type: string
    type: object
  cosmos.app.v1alpha1.QueryConfigResponse:
    description: QueryConfigRequest is the Query/Config response type.
    properties:
      config:
        description: config is the current app config.
        properties:
          golang_bindings:
            description: >-
              golang_bindings specifies explicit interface to implementation
              type bindings which

              depinject uses to resolve interface inputs to provider functions. 
              The scope of this

              field's configuration is global (not module specific).
            items:
              description: >-
                GolangBinding is an explicit interface type to implementing type
                binding for dependency injection.
              properties:
                implementation:
                  title: >-
                    implementation is the implementing type which will be
                    supplied when an input of type interface is requested
                  type: string
                interface_type:
                  title: >-
                    interface_type is the interface type which will be bound to
                    a specific implementation type
                  type: string
              type: object
            type: array
          modules:
            description: modules are the module configurations for the app.
            items:
              description: ModuleConfig is a module configuration for an app.
              properties:
                config:
                  description: >-
                    config is the config object for the module. Module config
                    messages should

                    define a ModuleDescriptor using the
                    cosmos.app.v1alpha1.is_module extension.
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                golang_bindings:
                  description: >-
                    golang_bindings specifies explicit interface to
                    implementation type bindings which

                    depinject uses to resolve interface inputs to provider
                    functions.  The scope of this

                    field's configuration is module specific.
                  items:
                    description: >-
                      GolangBinding is an explicit interface type to
                      implementing type binding for dependency injection.
                    properties:
                      implementation:
                        title: >-
                          implementation is the implementing type which will be
                          supplied when an input of type interface is requested
                        type: string
                      interface_type:
                        title: >-
                          interface_type is the interface type which will be
                          bound to a specific implementation type
                        type: string
                    type: object
                  type: array
                name:
                  description: >-
                    name is the unique name of the module within the app. It
                    should be a name

                    that persists between different versions of a module so that
                    modules

                    can be smoothly upgraded to new versions.


                    For example, for the module cosmos.bank.module.v1.Module, we
                    may chose

                    to simply name the module "bank" in the app. When we upgrade
                    to

                    cosmos.bank.module.v2.Module, the app-specific name "bank"
                    stays the same

                    and the framework knows that the v2 module should receive
                    all the same state

                    that the v1 module had. Note: modules should provide info on
                    which versions

                    they can migrate from in the
                    ModuleDescriptor.can_migration_from field.
                  type: string
              type: object
            type: array
        type: object
    type: object
  cosmos.auth.v1beta1.AddressBytesToStringResponse:
    description: >-
      AddressBytesToStringResponse is the response type for AddressString rpc
      method.


      Since: cosmos-sdk 0.46
    properties:
      address_string:
        type: string
    type: object
  cosmos.auth.v1beta1.AddressStringToBytesResponse:
    description: >-
      AddressStringToBytesResponse is the response type for AddressBytes rpc
      method.


      Since: cosmos-sdk 0.46
    properties:
      address_bytes:
        format: byte
        type: string
    type: object
  cosmos.auth.v1beta1.BaseAccount:
    description: >-
      BaseAccount defines a base account type. It contains all the necessary
      fields

      for basic account functionality. Any custom account type should extend
      this

      type for additional functionality (e.g. vesting).
    properties:
      account_number:
        format: uint64
        type: string
      address:
        type: string
      pub_key:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      sequence:
        format: uint64
        type: string
    type: object
  cosmos.auth.v1beta1.Bech32PrefixResponse:
    description: |-
      Bech32PrefixResponse is the response type for Bech32Prefix rpc method.

      Since: cosmos-sdk 0.46
    properties:
      bech32_prefix:
        type: string
    type: object
  cosmos.auth.v1beta1.Params:
    description: Params defines the parameters for the auth module.
    properties:
      max_memo_characters:
        format: uint64
        type: string
      sig_verify_cost_ed25519:
        format: uint64
        type: string
      sig_verify_cost_secp256k1:
        format: uint64
        type: string
      tx_sig_limit:
        format: uint64
        type: string
      tx_size_cost_per_byte:
        format: uint64
        type: string
    type: object
  cosmos.auth.v1beta1.QueryAccountAddressByIDResponse:
    description: 'Since: cosmos-sdk 0.46.2'
    properties:
      account_address:
        type: string
    title: >-
      QueryAccountAddressByIDResponse is the response type for
      AccountAddressByID rpc method
    type: object
  cosmos.auth.v1beta1.QueryAccountInfoResponse:
    description: |-
      QueryAccountInfoResponse is the Query/AccountInfo response type.

      Since: cosmos-sdk 0.47
    properties:
      info:
        description: info is the account info which is represented by BaseAccount.
        properties:
          account_number:
            format: uint64
            type: string
          address:
            type: string
          pub_key:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          sequence:
            format: uint64
            type: string
        type: object
    type: object
  cosmos.auth.v1beta1.QueryAccountResponse:
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
    properties:
      account:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
    type: object
  cosmos.auth.v1beta1.QueryAccountsResponse:
    description: >-
      QueryAccountsResponse is the response type for the Query/Accounts RPC
      method.


      Since: cosmos-sdk 0.43
    properties:
      accounts:
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        title: accounts are the existing accounts
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.auth.v1beta1.QueryModuleAccountByNameResponse:
    description: >-
      QueryModuleAccountByNameResponse is the response type for the
      Query/ModuleAccountByName RPC method.
    properties:
      account:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
    type: object
  cosmos.auth.v1beta1.QueryModuleAccountsResponse:
    description: >-
      QueryModuleAccountsResponse is the response type for the
      Query/ModuleAccounts RPC method.


      Since: cosmos-sdk 0.46
    properties:
      accounts:
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
    type: object
  cosmos.auth.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          max_memo_characters:
            format: uint64
            type: string
          sig_verify_cost_ed25519:
            format: uint64
            type: string
          sig_verify_cost_secp256k1:
            format: uint64
            type: string
          tx_sig_limit:
            format: uint64
            type: string
          tx_size_cost_per_byte:
            format: uint64
            type: string
        type: object
    type: object
  cosmos.authz.v1beta1.Grant:
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
    properties:
      authorization:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      expiration:
        format: date-time
        title: >-
          time when the grant will expire and will be pruned. If null, then the
          grant

          doesn't have a time expiration (other conditions  in `authorization`

          may apply to invalidate the grant)
        type: string
    type: object
  cosmos.authz.v1beta1.GrantAuthorization:
    properties:
      authorization:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      expiration:
        format: date-time
        type: string
      grantee:
        type: string
      granter:
        type: string
    title: >-
      GrantAuthorization extends a grant with both the addresses of the grantee
      and granter.

      It is used in genesis.proto and query.proto
    type: object
  cosmos.authz.v1beta1.QueryGranteeGrantsResponse:
    description: >-
      QueryGranteeGrantsResponse is the response type for the
      Query/GranteeGrants RPC method.
    properties:
      grants:
        description: grants is a list of grants granted to the grantee.
        items:
          properties:
            authorization:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            expiration:
              format: date-time
              type: string
            grantee:
              type: string
            granter:
              type: string
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
          type: object
        type: array
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.authz.v1beta1.QueryGranterGrantsResponse:
    description: >-
      QueryGranterGrantsResponse is the response type for the
      Query/GranterGrants RPC method.
    properties:
      grants:
        description: grants is a list of grants granted by the granter.
        items:
          properties:
            authorization:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            expiration:
              format: date-time
              type: string
            grantee:
              type: string
            granter:
              type: string
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
          type: object
        type: array
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.authz.v1beta1.QueryGrantsResponse:
    description: >-
      QueryGrantsResponse is the response type for the Query/Authorizations RPC
      method.
    properties:
      grants:
        description: authorizations is a list of grants granted for grantee by granter.
        items:
          description: |-
            Grant gives permissions to execute
            the provide method with expiration time.
          properties:
            authorization:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            expiration:
              format: date-time
              title: >-
                time when the grant will expire and will be pruned. If null,
                then the grant

                doesn't have a time expiration (other conditions  in
                `authorization`

                may apply to invalidate the grant)
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.DenomOwner:
    description: |-
      DenomOwner defines structure representing an account that owns or holds a
      particular denominated token. It contains the account address and account
      balance of the denominated token.

      Since: cosmos-sdk 0.46
    properties:
      address:
        description: address defines the address that owns a particular denomination.
        type: string
      balance:
        description: balance is the balance of the denominated coin for an account.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.DenomUnit:
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
    properties:
      aliases:
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
        type: array
      denom:
        description: denom represents the string name of the given denom unit (e.g uatom).
        type: string
      exponent:
        description: >-
          exponent represents power of 10 exponent that one must

          raise the base_denom to in order to equal the given DenomUnit's denom

          1 denom = 10^exponent base_denom

          (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom'
          with

          exponent = 6, thus: 1 atom = 10^6 uatom).
        format: int64
        type: integer
    type: object
  cosmos.bank.v1beta1.Metadata:
    description: |-
      Metadata represents a struct that describes
      a basic token.
    properties:
      base:
        description: >-
          base represents the base denom (should be the DenomUnit with exponent
          = 0).
        type: string
      denom_units:
        items:
          description: |-
            DenomUnit represents a struct that describes a given
            denomination unit of the basic token.
          properties:
            aliases:
              items:
                type: string
              title: aliases is a list of string aliases for the given denom
              type: array
            denom:
              description: >-
                denom represents the string name of the given denom unit (e.g
                uatom).
              type: string
            exponent:
              description: >-
                exponent represents power of 10 exponent that one must

                raise the base_denom to in order to equal the given DenomUnit's
                denom

                1 denom = 10^exponent base_denom

                (e.g. with a base_denom of uatom, one can create a DenomUnit of
                'atom' with

                exponent = 6, thus: 1 atom = 10^6 uatom).
              format: int64
              type: integer
          type: object
        title: denom_units represents the list of DenomUnit's for a given coin
        type: array
      description:
        type: string
      display:
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
        type: string
      name:
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
        type: string
      symbol:
        description: >-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This
          can

          be the same as the display.


          Since: cosmos-sdk 0.43
        type: string
      uri:
        description: >-
          URI to a document (on or off-chain) that contains additional
          information. Optional.


          Since: cosmos-sdk 0.46
        type: string
      uri_hash:
        description: >-
          URIHash is a sha256 hash of a document pointed by URI. It's used to
          verify that

          the document didn't change. Optional.


          Since: cosmos-sdk 0.46
        type: string
    type: object
  cosmos.bank.v1beta1.Params:
    description: Params defines the parameters for the bank module.
    properties:
      default_send_enabled:
        type: boolean
      send_enabled:
        description: >-
          Deprecated: Use of SendEnabled in params is deprecated.

          For genesis, use the newly added send_enabled field in the genesis
          object.

          Storage, lookup, and manipulation of this information is now in the
          keeper.


          As of cosmos-sdk 0.47, this only exists for backwards compatibility of
          genesis files.
        items:
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          type: object
        type: array
    type: object
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC

      method.
    properties:
      balances:
        description: balances is the balances of all the coins.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryBalanceResponse:
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
    properties:
      balance:
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryDenomMetadataByQueryStringResponse:
    description: >-
      QueryDenomMetadataByQueryStringResponse is the response type for the
      Query/DenomMetadata RPC

      method. Identical with QueryDenomMetadataResponse but receives denom as
      query string in request.
    properties:
      metadata:
        description: >-
          metadata describes and provides all the client information for the
          requested token.
        properties:
          base:
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
            type: string
          denom_units:
            items:
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
              properties:
                aliases:
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
                  type: array
                denom:
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                  type: string
                exponent:
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 10^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                  format: int64
                  type: integer
              type: object
            title: denom_units represents the list of DenomUnit's for a given coin
            type: array
          description:
            type: string
          display:
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
            type: string
          name:
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
            type: string
          symbol:
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
            type: string
          uri:
            description: >-
              URI to a document (on or off-chain) that contains additional
              information. Optional.


              Since: cosmos-sdk 0.46
            type: string
          uri_hash:
            description: >-
              URIHash is a sha256 hash of a document pointed by URI. It's used
              to verify that

              the document didn't change. Optional.


              Since: cosmos-sdk 0.46
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    description: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata RPC

      method.
    properties:
      metadata:
        description: >-
          metadata describes and provides all the client information for the
          requested token.
        properties:
          base:
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
            type: string
          denom_units:
            items:
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
              properties:
                aliases:
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
                  type: array
                denom:
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                  type: string
                exponent:
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 10^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                  format: int64
                  type: integer
              type: object
            title: denom_units represents the list of DenomUnit's for a given coin
            type: array
          description:
            type: string
          display:
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
            type: string
          name:
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
            type: string
          symbol:
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
            type: string
          uri:
            description: >-
              URI to a document (on or off-chain) that contains additional
              information. Optional.


              Since: cosmos-sdk 0.46
            type: string
          uri_hash:
            description: >-
              URIHash is a sha256 hash of a document pointed by URI. It's used
              to verify that

              the document didn't change. Optional.


              Since: cosmos-sdk 0.46
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryDenomOwnersByQueryResponse:
    description: >-
      QueryDenomOwnersByQueryResponse defines the RPC response of a
      DenomOwnersByQuery RPC query.


      Since: cosmos-sdk 0.50.3
    properties:
      denom_owners:
        items:
          description: >-
            DenomOwner defines structure representing an account that owns or
            holds a

            particular denominated token. It contains the account address and
            account

            balance of the denominated token.


            Since: cosmos-sdk 0.46
          properties:
            address:
              description: address defines the address that owns a particular denomination.
              type: string
            balance:
              description: balance is the balance of the denominated coin for an account.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryDenomOwnersResponse:
    description: >-
      QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC
      query.


      Since: cosmos-sdk 0.46
    properties:
      denom_owners:
        items:
          description: >-
            DenomOwner defines structure representing an account that owns or
            holds a

            particular denominated token. It contains the account address and
            account

            balance of the denominated token.


            Since: cosmos-sdk 0.46
          properties:
            address:
              description: address defines the address that owns a particular denomination.
              type: string
            balance:
              description: balance is the balance of the denominated coin for an account.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    description: >-
      QueryDenomsMetadataResponse is the response type for the
      Query/DenomsMetadata RPC

      method.
    properties:
      metadatas:
        description: >-
          metadata provides the client information for all the registered
          tokens.
        items:
          description: |-
            Metadata represents a struct that describes
            a basic token.
          properties:
            base:
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
              type: string
            denom_units:
              items:
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
                properties:
                  aliases:
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                    type: array
                  denom:
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uatom).
                    type: string
                  exponent:
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 10^exponent base_denom

                      (e.g. with a base_denom of uatom, one can create a
                      DenomUnit of 'atom' with

                      exponent = 6, thus: 1 atom = 10^6 uatom).
                    format: int64
                    type: integer
                type: object
              title: denom_units represents the list of DenomUnit's for a given coin
              type: array
            description:
              type: string
            display:
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
              type: string
            name:
              description: 'Since: cosmos-sdk 0.43'
              title: 'name defines the name of the token (eg: Cosmos Atom)'
              type: string
            symbol:
              description: >-
                symbol is the token symbol usually shown on exchanges (eg:
                ATOM). This can

                be the same as the display.


                Since: cosmos-sdk 0.43
              type: string
            uri:
              description: >-
                URI to a document (on or off-chain) that contains additional
                information. Optional.


                Since: cosmos-sdk 0.46
              type: string
            uri_hash:
              description: >-
                URIHash is a sha256 hash of a document pointed by URI. It's used
                to verify that

                the document didn't change. Optional.


                Since: cosmos-sdk 0.46
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryParamsResponse:
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
    properties:
      params:
        description: params provides the parameters of the bank module.
        properties:
          default_send_enabled:
            type: boolean
          send_enabled:
            description: >-
              Deprecated: Use of SendEnabled in params is deprecated.

              For genesis, use the newly added send_enabled field in the genesis
              object.

              Storage, lookup, and manipulation of this information is now in
              the keeper.


              As of cosmos-sdk 0.47, this only exists for backwards
              compatibility of genesis files.
            items:
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              type: object
            type: array
        type: object
    type: object
  cosmos.bank.v1beta1.QuerySendEnabledResponse:
    description: |-
      QuerySendEnabledResponse defines the RPC response of a SendEnable query.

      Since: cosmos-sdk 0.47
    properties:
      pagination:
        description: |-
          pagination defines the pagination in the response. This field is only
          populated if the denoms field in the request is empty.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      send_enabled:
        items:
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          type: object
        type: array
    type: object
  cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse:
    description: >-
      QuerySpendableBalanceByDenomResponse defines the gRPC response structure
      for

      querying an account's spendable balance for a specific denom.


      Since: cosmos-sdk 0.47
    properties:
      balance:
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QuerySpendableBalancesResponse:
    description: >-
      QuerySpendableBalancesResponse defines the gRPC response structure for
      querying

      an account's spendable balances.


      Since: cosmos-sdk 0.46
    properties:
      balances:
        description: balances is the spendable balances of all the coins.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
    properties:
      amount:
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
    type: object
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    properties:
      pagination:
        description: |-
          pagination defines the pagination in the response.

          Since: cosmos-sdk 0.43
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      supply:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: supply is the supply of the coins
        type: array
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC

      method
    type: object
  cosmos.bank.v1beta1.SendEnabled:
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    type: object
  cosmos.base.node.v1beta1.ConfigResponse:
    description: ConfigResponse defines the response structure for the Config gRPC query.
    properties:
      halt_height:
        format: uint64
        type: string
      minimum_gas_price:
        type: string
      pruning_interval:
        type: string
      pruning_keep_recent:
        type: string
    type: object
  cosmos.base.node.v1beta1.StatusResponse:
    description: StateResponse defines the response structure for the status of a node.
    properties:
      app_hash:
        format: byte
        type: string
      earliest_store_height:
        format: uint64
        type: string
      height:
        format: uint64
        type: string
      timestamp:
        format: date-time
        type: string
      validator_hash:
        format: byte
        type: string
    type: object
  cosmos.base.query.v1beta1.PageRequest:
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    properties:
      count_total:
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
        type: boolean
      key:
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        format: byte
        type: string
      limit:
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
        format: uint64
        type: string
      offset:
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        format: uint64
        type: string
      reverse:
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
        type: boolean
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
    type: object
  cosmos.base.query.v1beta1.PageResponse:
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
    properties:
      next_key:
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
        format: byte
        type: string
      total:
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.ABCIQueryResponse:
    description: >-
      ABCIQueryResponse defines the response structure for the ABCIQuery gRPC
      query.


      Note: This type is a duplicate of the ResponseQuery proto type defined in

      Tendermint.
    properties:
      code:
        format: int64
        type: integer
      codespace:
        type: string
      height:
        format: int64
        type: string
      index:
        format: int64
        type: string
      info:
        type: string
      key:
        format: byte
        type: string
      log:
        type: string
      proof_ops:
        description: >-
          ProofOps is Merkle proof defined by the list of ProofOps.


          Note: This type is a duplicate of the ProofOps proto type defined in
          Tendermint.
        properties:
          ops:
            items:
              description: >-
                ProofOp defines an operation used for calculating Merkle root.
                The data could

                be arbitrary format, providing necessary data for example
                neighbouring node

                hash.


                Note: This type is a duplicate of the ProofOp proto type defined
                in Tendermint.
              properties:
                data:
                  format: byte
                  type: string
                key:
                  format: byte
                  type: string
                type:
                  type: string
              type: object
            type: array
        type: object
      value:
        format: byte
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.Block:
    description: |-
      Block is tendermint type Block, with the Header proposer address
      field converted to bech32 string.
    properties:
      data:
        properties:
          txs:
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
            items:
              format: byte
              type: string
            type: array
        title: Data contains the set of transactions included in the block
        type: object
      evidence:
        properties:
          evidence:
            items:
              properties:
                duplicate_vote_evidence:
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                  properties:
                    timestamp:
                      format: date-time
                      type: string
                    total_voting_power:
                      format: int64
                      type: string
                    validator_power:
                      format: int64
                      type: string
                    vote_a:
                      description: >-
                        Vote represents a prevote or precommit vote from
                        validators for

                        consensus.
                      properties:
                        block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: BlockID
                          type: object
                        extension:
                          description: >-
                            Vote extension provided by the application. Only
                            valid for precommit

                            messages.
                          format: byte
                          type: string
                        extension_signature:
                          description: >-
                            Vote extension signature by the validator if they
                            participated in

                            consensus for the associated block.

                            Only valid for precommit messages.
                          format: byte
                          type: string
                        height:
                          format: int64
                          type: string
                        round:
                          format: int32
                          type: integer
                        signature:
                          description: >-
                            Vote signature by the validator if they participated
                            in consensus for the

                            associated block.
                          format: byte
                          type: string
                        timestamp:
                          format: date-time
                          type: string
                        type:
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          type: string
                        validator_address:
                          format: byte
                          type: string
                        validator_index:
                          format: int32
                          type: integer
                      type: object
                    vote_b:
                      description: >-
                        Vote represents a prevote or precommit vote from
                        validators for

                        consensus.
                      properties:
                        block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: BlockID
                          type: object
                        extension:
                          description: >-
                            Vote extension provided by the application. Only
                            valid for precommit

                            messages.
                          format: byte
                          type: string
                        extension_signature:
                          description: >-
                            Vote extension signature by the validator if they
                            participated in

                            consensus for the associated block.

                            Only valid for precommit messages.
                          format: byte
                          type: string
                        height:
                          format: int64
                          type: string
                        round:
                          format: int32
                          type: integer
                        signature:
                          description: >-
                            Vote signature by the validator if they participated
                            in consensus for the

                            associated block.
                          format: byte
                          type: string
                        timestamp:
                          format: date-time
                          type: string
                        type:
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          type: string
                        validator_address:
                          format: byte
                          type: string
                        validator_index:
                          format: int32
                          type: integer
                      type: object
                  type: object
                light_client_attack_evidence:
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
                  properties:
                    byzantine_validators:
                      items:
                        properties:
                          address:
                            format: byte
                            type: string
                          proposer_priority:
                            format: int64
                            type: string
                          pub_key:
                            properties:
                              ed25519:
                                format: byte
                                type: string
                              secp256k1:
                                format: byte
                                type: string
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                            type: object
                          voting_power:
                            format: int64
                            type: string
                        type: object
                      type: array
                    common_height:
                      format: int64
                      type: string
                    conflicting_block:
                      properties:
                        signed_header:
                          properties:
                            commit:
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                              properties:
                                block_id:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    part_set_header:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        total:
                                          format: int64
                                          type: integer
                                      title: PartsetHeader
                                      type: object
                                  title: BlockID
                                  type: object
                                height:
                                  format: int64
                                  type: string
                                round:
                                  format: int32
                                  type: integer
                                signatures:
                                  items:
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                                    properties:
                                      block_id_flag:
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        title: >-
                                          BlockIdFlag indicates which BlockID the
                                          signature is for
                                        type: string
                                      signature:
                                        format: byte
                                        type: string
                                      timestamp:
                                        format: date-time
                                        type: string
                                      validator_address:
                                        format: byte
                                        type: string
                                    type: object
                                  type: array
                              type: object
                            header:
                              description: Header defines the structure of a block header.
                              properties:
                                app_hash:
                                  format: byte
                                  type: string
                                chain_id:
                                  type: string
                                consensus_hash:
                                  format: byte
                                  type: string
                                data_hash:
                                  format: byte
                                  type: string
                                evidence_hash:
                                  format: byte
                                  title: consensus info
                                  type: string
                                height:
                                  format: int64
                                  type: string
                                last_block_id:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    part_set_header:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        total:
                                          format: int64
                                          type: integer
                                      title: PartsetHeader
                                      type: object
                                  title: BlockID
                                  type: object
                                last_commit_hash:
                                  format: byte
                                  title: hashes of block data
                                  type: string
                                last_results_hash:
                                  format: byte
                                  type: string
                                next_validators_hash:
                                  format: byte
                                  type: string
                                proposer_address:
                                  format: byte
                                  type: string
                                time:
                                  format: date-time
                                  type: string
                                validators_hash:
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                  type: string
                                version:
                                  title: basic block info
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                  properties:
                                    app:
                                      format: uint64
                                      type: string
                                    block:
                                      format: uint64
                                      type: string
                                  type: object
                              type: object
                          type: object
                        validator_set:
                          properties:
                            proposer:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            total_voting_power:
                              format: int64
                              type: string
                            validators:
                              items:
                                properties:
                                  address:
                                    format: byte
                                    type: string
                                  proposer_priority:
                                    format: int64
                                    type: string
                                  pub_key:
                                    properties:
                                      ed25519:
                                        format: byte
                                        type: string
                                      secp256k1:
                                        format: byte
                                        type: string
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                    type: object
                                  voting_power:
                                    format: int64
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                    timestamp:
                      format: date-time
                      type: string
                    total_voting_power:
                      format: int64
                      type: string
                  type: object
              type: object
            type: array
        type: object
      header:
        description: Header defines the structure of a Tendermint block header.
        properties:
          app_hash:
            format: byte
            type: string
          chain_id:
            type: string
          consensus_hash:
            format: byte
            type: string
          data_hash:
            format: byte
            type: string
          evidence_hash:
            format: byte
            title: consensus info
            type: string
          height:
            format: int64
            type: string
          last_block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          last_commit_hash:
            format: byte
            title: hashes of block data
            type: string
          last_results_hash:
            format: byte
            type: string
          next_validators_hash:
            format: byte
            type: string
          proposer_address:
            description: >-
              proposer_address is the original block proposer address, formatted
              as a Bech32 string.

              In Tendermint, this type is `bytes`, but in the SDK, we convert it
              to a Bech32 string

              for better UX.
            type: string
          time:
            format: date-time
            type: string
          validators_hash:
            format: byte
            title: hashes from the app output from the prev block
            type: string
          version:
            title: basic block info
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
            properties:
              app:
                format: uint64
                type: string
              block:
                format: uint64
                type: string
            type: object
        type: object
      last_commit:
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
        properties:
          block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          height:
            format: int64
            type: string
          round:
            format: int32
            type: integer
          signatures:
            items:
              description: CommitSig is a part of the Vote included in a Commit.
              properties:
                block_id_flag:
                  default: BLOCK_ID_FLAG_UNKNOWN
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  title: BlockIdFlag indicates which BlockID the signature is for
                  type: string
                signature:
                  format: byte
                  type: string
                timestamp:
                  format: date-time
                  type: string
                validator_address:
                  format: byte
                  type: string
              type: object
            type: array
        type: object
    type: object
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    description: >-
      GetBlockByHeightResponse is the response type for the
      Query/GetBlockByHeight RPC method.
    properties:
      block:
        title: 'Deprecated: please use `sdk_block` instead'
        properties:
          data:
            properties:
              txs:
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
                items:
                  format: byte
                  type: string
                type: array
            title: Data contains the set of transactions included in the block
            type: object
          evidence:
            properties:
              evidence:
                items:
                  properties:
                    duplicate_vote_evidence:
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                      properties:
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                        validator_power:
                          format: int64
                          type: string
                        vote_a:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                        vote_b:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                      type: object
                    light_client_attack_evidence:
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
                      properties:
                        byzantine_validators:
                          items:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          type: array
                        common_height:
                          format: int64
                          type: string
                        conflicting_block:
                          properties:
                            signed_header:
                              properties:
                                commit:
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signatures:
                                      items:
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                        properties:
                                          block_id_flag:
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            title: >-
                                              BlockIdFlag indicates which BlockID the
                                              signature is for
                                            type: string
                                          signature:
                                            format: byte
                                            type: string
                                          timestamp:
                                            format: date-time
                                            type: string
                                          validator_address:
                                            format: byte
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                                header:
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                  properties:
                                    app_hash:
                                      format: byte
                                      type: string
                                    chain_id:
                                      type: string
                                    consensus_hash:
                                      format: byte
                                      type: string
                                    data_hash:
                                      format: byte
                                      type: string
                                    evidence_hash:
                                      format: byte
                                      title: consensus info
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    last_block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    last_commit_hash:
                                      format: byte
                                      title: hashes of block data
                                      type: string
                                    last_results_hash:
                                      format: byte
                                      type: string
                                    next_validators_hash:
                                      format: byte
                                      type: string
                                    proposer_address:
                                      format: byte
                                      type: string
                                    time:
                                      format: date-time
                                      type: string
                                    validators_hash:
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                      type: string
                                    version:
                                      title: basic block info
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                      properties:
                                        app:
                                          format: uint64
                                          type: string
                                        block:
                                          format: uint64
                                          type: string
                                      type: object
                                  type: object
                              type: object
                            validator_set:
                              properties:
                                proposer:
                                  properties:
                                    address:
                                      format: byte
                                      type: string
                                    proposer_priority:
                                      format: int64
                                      type: string
                                    pub_key:
                                      properties:
                                        ed25519:
                                          format: byte
                                          type: string
                                        secp256k1:
                                          format: byte
                                          type: string
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                      type: object
                                    voting_power:
                                      format: int64
                                      type: string
                                  type: object
                                total_voting_power:
                                  format: int64
                                  type: string
                                validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                              type: object
                          type: object
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                      type: object
                  type: object
                type: array
            type: object
          header:
            description: Header defines the structure of a block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                format: byte
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
          last_commit:
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signatures:
                items:
                  description: CommitSig is a part of the Vote included in a Commit.
                  properties:
                    block_id_flag:
                      default: BLOCK_ID_FLAG_UNKNOWN
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      title: BlockIdFlag indicates which BlockID the signature is for
                      type: string
                    signature:
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    validator_address:
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
        type: object
      block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      sdk_block:
        title: 'Since: cosmos-sdk 0.47'
        description: |-
          Block is tendermint type Block, with the Header proposer address
          field converted to bech32 string.
        properties:
          data:
            properties:
              txs:
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
                items:
                  format: byte
                  type: string
                type: array
            title: Data contains the set of transactions included in the block
            type: object
          evidence:
            properties:
              evidence:
                items:
                  properties:
                    duplicate_vote_evidence:
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                      properties:
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                        validator_power:
                          format: int64
                          type: string
                        vote_a:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                        vote_b:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                      type: object
                    light_client_attack_evidence:
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
                      properties:
                        byzantine_validators:
                          items:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          type: array
                        common_height:
                          format: int64
                          type: string
                        conflicting_block:
                          properties:
                            signed_header:
                              properties:
                                commit:
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signatures:
                                      items:
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                        properties:
                                          block_id_flag:
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            title: >-
                                              BlockIdFlag indicates which BlockID the
                                              signature is for
                                            type: string
                                          signature:
                                            format: byte
                                            type: string
                                          timestamp:
                                            format: date-time
                                            type: string
                                          validator_address:
                                            format: byte
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                                header:
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                  properties:
                                    app_hash:
                                      format: byte
                                      type: string
                                    chain_id:
                                      type: string
                                    consensus_hash:
                                      format: byte
                                      type: string
                                    data_hash:
                                      format: byte
                                      type: string
                                    evidence_hash:
                                      format: byte
                                      title: consensus info
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    last_block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    last_commit_hash:
                                      format: byte
                                      title: hashes of block data
                                      type: string
                                    last_results_hash:
                                      format: byte
                                      type: string
                                    next_validators_hash:
                                      format: byte
                                      type: string
                                    proposer_address:
                                      format: byte
                                      type: string
                                    time:
                                      format: date-time
                                      type: string
                                    validators_hash:
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                      type: string
                                    version:
                                      title: basic block info
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                      properties:
                                        app:
                                          format: uint64
                                          type: string
                                        block:
                                          format: uint64
                                          type: string
                                      type: object
                                  type: object
                              type: object
                            validator_set:
                              properties:
                                proposer:
                                  properties:
                                    address:
                                      format: byte
                                      type: string
                                    proposer_priority:
                                      format: int64
                                      type: string
                                    pub_key:
                                      properties:
                                        ed25519:
                                          format: byte
                                          type: string
                                        secp256k1:
                                          format: byte
                                          type: string
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                      type: object
                                    voting_power:
                                      format: int64
                                      type: string
                                  type: object
                                total_voting_power:
                                  format: int64
                                  type: string
                                validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                              type: object
                          type: object
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                      type: object
                  type: object
                type: array
            type: object
          header:
            description: Header defines the structure of a Tendermint block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                description: >-
                  proposer_address is the original block proposer address,
                  formatted as a Bech32 string.

                  In Tendermint, this type is `bytes`, but in the SDK, we
                  convert it to a Bech32 string

                  for better UX.
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
          last_commit:
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signatures:
                items:
                  description: CommitSig is a part of the Vote included in a Commit.
                  properties:
                    block_id_flag:
                      default: BLOCK_ID_FLAG_UNKNOWN
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      title: BlockIdFlag indicates which BlockID the signature is for
                      type: string
                    signature:
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    validator_address:
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
        type: object
    type: object
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    description: >-
      GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC method.
    properties:
      block:
        title: 'Deprecated: please use `sdk_block` instead'
        properties:
          data:
            properties:
              txs:
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
                items:
                  format: byte
                  type: string
                type: array
            title: Data contains the set of transactions included in the block
            type: object
          evidence:
            properties:
              evidence:
                items:
                  properties:
                    duplicate_vote_evidence:
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                      properties:
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                        validator_power:
                          format: int64
                          type: string
                        vote_a:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                        vote_b:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                      type: object
                    light_client_attack_evidence:
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
                      properties:
                        byzantine_validators:
                          items:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          type: array
                        common_height:
                          format: int64
                          type: string
                        conflicting_block:
                          properties:
                            signed_header:
                              properties:
                                commit:
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signatures:
                                      items:
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                        properties:
                                          block_id_flag:
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            title: >-
                                              BlockIdFlag indicates which BlockID the
                                              signature is for
                                            type: string
                                          signature:
                                            format: byte
                                            type: string
                                          timestamp:
                                            format: date-time
                                            type: string
                                          validator_address:
                                            format: byte
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                                header:
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                  properties:
                                    app_hash:
                                      format: byte
                                      type: string
                                    chain_id:
                                      type: string
                                    consensus_hash:
                                      format: byte
                                      type: string
                                    data_hash:
                                      format: byte
                                      type: string
                                    evidence_hash:
                                      format: byte
                                      title: consensus info
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    last_block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    last_commit_hash:
                                      format: byte
                                      title: hashes of block data
                                      type: string
                                    last_results_hash:
                                      format: byte
                                      type: string
                                    next_validators_hash:
                                      format: byte
                                      type: string
                                    proposer_address:
                                      format: byte
                                      type: string
                                    time:
                                      format: date-time
                                      type: string
                                    validators_hash:
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                      type: string
                                    version:
                                      title: basic block info
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                      properties:
                                        app:
                                          format: uint64
                                          type: string
                                        block:
                                          format: uint64
                                          type: string
                                      type: object
                                  type: object
                              type: object
                            validator_set:
                              properties:
                                proposer:
                                  properties:
                                    address:
                                      format: byte
                                      type: string
                                    proposer_priority:
                                      format: int64
                                      type: string
                                    pub_key:
                                      properties:
                                        ed25519:
                                          format: byte
                                          type: string
                                        secp256k1:
                                          format: byte
                                          type: string
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                      type: object
                                    voting_power:
                                      format: int64
                                      type: string
                                  type: object
                                total_voting_power:
                                  format: int64
                                  type: string
                                validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                              type: object
                          type: object
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                      type: object
                  type: object
                type: array
            type: object
          header:
            description: Header defines the structure of a block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                format: byte
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
          last_commit:
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signatures:
                items:
                  description: CommitSig is a part of the Vote included in a Commit.
                  properties:
                    block_id_flag:
                      default: BLOCK_ID_FLAG_UNKNOWN
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      title: BlockIdFlag indicates which BlockID the signature is for
                      type: string
                    signature:
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    validator_address:
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
        type: object
      block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      sdk_block:
        title: 'Since: cosmos-sdk 0.47'
        description: |-
          Block is tendermint type Block, with the Header proposer address
          field converted to bech32 string.
        properties:
          data:
            properties:
              txs:
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
                items:
                  format: byte
                  type: string
                type: array
            title: Data contains the set of transactions included in the block
            type: object
          evidence:
            properties:
              evidence:
                items:
                  properties:
                    duplicate_vote_evidence:
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                      properties:
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                        validator_power:
                          format: int64
                          type: string
                        vote_a:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                        vote_b:
                          description: >-
                            Vote represents a prevote or precommit vote from
                            validators for

                            consensus.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            extension:
                              description: >-
                                Vote extension provided by the application. Only
                                valid for precommit

                                messages.
                              format: byte
                              type: string
                            extension_signature:
                              description: >-
                                Vote extension signature by the validator if
                                they participated in

                                consensus for the associated block.

                                Only valid for precommit messages.
                              format: byte
                              type: string
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signature:
                              description: >-
                                Vote signature by the validator if they
                                participated in consensus for the

                                associated block.
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            type:
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              type: string
                            validator_address:
                              format: byte
                              type: string
                            validator_index:
                              format: int32
                              type: integer
                          type: object
                      type: object
                    light_client_attack_evidence:
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
                      properties:
                        byzantine_validators:
                          items:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          type: array
                        common_height:
                          format: int64
                          type: string
                        conflicting_block:
                          properties:
                            signed_header:
                              properties:
                                commit:
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signatures:
                                      items:
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                        properties:
                                          block_id_flag:
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            title: >-
                                              BlockIdFlag indicates which BlockID the
                                              signature is for
                                            type: string
                                          signature:
                                            format: byte
                                            type: string
                                          timestamp:
                                            format: date-time
                                            type: string
                                          validator_address:
                                            format: byte
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                                header:
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                  properties:
                                    app_hash:
                                      format: byte
                                      type: string
                                    chain_id:
                                      type: string
                                    consensus_hash:
                                      format: byte
                                      type: string
                                    data_hash:
                                      format: byte
                                      type: string
                                    evidence_hash:
                                      format: byte
                                      title: consensus info
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    last_block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    last_commit_hash:
                                      format: byte
                                      title: hashes of block data
                                      type: string
                                    last_results_hash:
                                      format: byte
                                      type: string
                                    next_validators_hash:
                                      format: byte
                                      type: string
                                    proposer_address:
                                      format: byte
                                      type: string
                                    time:
                                      format: date-time
                                      type: string
                                    validators_hash:
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                      type: string
                                    version:
                                      title: basic block info
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                      properties:
                                        app:
                                          format: uint64
                                          type: string
                                        block:
                                          format: uint64
                                          type: string
                                      type: object
                                  type: object
                              type: object
                            validator_set:
                              properties:
                                proposer:
                                  properties:
                                    address:
                                      format: byte
                                      type: string
                                    proposer_priority:
                                      format: int64
                                      type: string
                                    pub_key:
                                      properties:
                                        ed25519:
                                          format: byte
                                          type: string
                                        secp256k1:
                                          format: byte
                                          type: string
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                      type: object
                                    voting_power:
                                      format: int64
                                      type: string
                                  type: object
                                total_voting_power:
                                  format: int64
                                  type: string
                                validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                              type: object
                          type: object
                        timestamp:
                          format: date-time
                          type: string
                        total_voting_power:
                          format: int64
                          type: string
                      type: object
                  type: object
                type: array
            type: object
          header:
            description: Header defines the structure of a Tendermint block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                description: >-
                  proposer_address is the original block proposer address,
                  formatted as a Bech32 string.

                  In Tendermint, this type is `bytes`, but in the SDK, we
                  convert it to a Bech32 string

                  for better UX.
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
          last_commit:
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signatures:
                items:
                  description: CommitSig is a part of the Vote included in a Commit.
                  properties:
                    block_id_flag:
                      default: BLOCK_ID_FLAG_UNKNOWN
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      title: BlockIdFlag indicates which BlockID the signature is for
                      type: string
                    signature:
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    validator_address:
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
        type: object
    type: object
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    description: >-
      GetLatestValidatorSetResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
    properties:
      block_height:
        format: int64
        type: string
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      validators:
        items:
          description: Validator is the type for the validator-set.
          properties:
            address:
              type: string
            proposer_priority:
              format: int64
              type: string
            pub_key:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            voting_power:
              format: int64
              type: string
          type: object
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    description: >-
      GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC
      method.
    properties:
      application_version:
        description: VersionInfo is the type for the GetNodeInfoResponse message.
        properties:
          app_name:
            type: string
          build_deps:
            items:
              properties:
                path:
                  title: module path
                  type: string
                sum:
                  title: checksum
                  type: string
                version:
                  title: module version
                  type: string
              title: Module is the type for VersionInfo
              type: object
            type: array
          build_tags:
            type: string
          cosmos_sdk_version:
            title: 'Since: cosmos-sdk 0.43'
            type: string
          git_commit:
            type: string
          go_version:
            type: string
          name:
            type: string
          version:
            type: string
        type: object
      default_node_info:
        properties:
          channels:
            format: byte
            type: string
          default_node_id:
            type: string
          listen_addr:
            type: string
          moniker:
            type: string
          network:
            type: string
          other:
            properties:
              rpc_address:
                type: string
              tx_index:
                type: string
            type: object
          protocol_version:
            properties:
              app:
                format: uint64
                type: string
              block:
                format: uint64
                type: string
              p2p:
                format: uint64
                type: string
            type: object
          version:
            type: string
        type: object
    type: object
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    description: >-
      GetSyncingResponse is the response type for the Query/GetSyncing RPC
      method.
    properties:
      syncing:
        type: boolean
    type: object
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    description: >-
      GetValidatorSetByHeightResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
    properties:
      block_height:
        format: int64
        type: string
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      validators:
        items:
          description: Validator is the type for the validator-set.
          properties:
            address:
              type: string
            proposer_priority:
              format: int64
              type: string
            pub_key:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            voting_power:
              format: int64
              type: string
          type: object
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.Header:
    description: Header defines the structure of a Tendermint block header.
    properties:
      app_hash:
        format: byte
        type: string
      chain_id:
        type: string
      consensus_hash:
        format: byte
        type: string
      data_hash:
        format: byte
        type: string
      evidence_hash:
        format: byte
        title: consensus info
        type: string
      height:
        format: int64
        type: string
      last_block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      last_commit_hash:
        format: byte
        title: hashes of block data
        type: string
      last_results_hash:
        format: byte
        type: string
      next_validators_hash:
        format: byte
        type: string
      proposer_address:
        description: >-
          proposer_address is the original block proposer address, formatted as
          a Bech32 string.

          In Tendermint, this type is `bytes`, but in the SDK, we convert it to
          a Bech32 string

          for better UX.
        type: string
      time:
        format: date-time
        type: string
      validators_hash:
        format: byte
        title: hashes from the app output from the prev block
        type: string
      version:
        title: basic block info
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
        properties:
          app:
            format: uint64
            type: string
          block:
            format: uint64
            type: string
        type: object
    type: object
  cosmos.base.tendermint.v1beta1.Module:
    properties:
      path:
        title: module path
        type: string
      sum:
        title: checksum
        type: string
      version:
        title: module version
        type: string
    title: Module is the type for VersionInfo
    type: object
  cosmos.base.tendermint.v1beta1.ProofOp:
    description: >-
      ProofOp defines an operation used for calculating Merkle root. The data
      could

      be arbitrary format, providing necessary data for example neighbouring
      node

      hash.


      Note: This type is a duplicate of the ProofOp proto type defined in
      Tendermint.
    properties:
      data:
        format: byte
        type: string
      key:
        format: byte
        type: string
      type:
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.ProofOps:
    description: >-
      ProofOps is Merkle proof defined by the list of ProofOps.


      Note: This type is a duplicate of the ProofOps proto type defined in
      Tendermint.
    properties:
      ops:
        items:
          description: >-
            ProofOp defines an operation used for calculating Merkle root. The
            data could

            be arbitrary format, providing necessary data for example
            neighbouring node

            hash.


            Note: This type is a duplicate of the ProofOp proto type defined in
            Tendermint.
          properties:
            data:
              format: byte
              type: string
            key:
              format: byte
              type: string
            type:
              type: string
          type: object
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.Validator:
    description: Validator is the type for the validator-set.
    properties:
      address:
        type: string
      proposer_priority:
        format: int64
        type: string
      pub_key:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      voting_power:
        format: int64
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.VersionInfo:
    description: VersionInfo is the type for the GetNodeInfoResponse message.
    properties:
      app_name:
        type: string
      build_deps:
        items:
          properties:
            path:
              title: module path
              type: string
            sum:
              title: checksum
              type: string
            version:
              title: module version
              type: string
          title: Module is the type for VersionInfo
          type: object
        type: array
      build_tags:
        type: string
      cosmos_sdk_version:
        title: 'Since: cosmos-sdk 0.43'
        type: string
      git_commit:
        type: string
      go_version:
        type: string
      name:
        type: string
      version:
        type: string
    type: object
  cosmos.base.v1beta1.Coin:
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
    properties:
      amount:
        type: string
      denom:
        type: string
    type: object
  cosmos.base.v1beta1.DecCoin:
    description: |-
      DecCoin defines a token with a denomination and a decimal amount.

      NOTE: The amount field is an Dec which implements the custom method
      signatures required by gogoproto.
    properties:
      amount:
        type: string
      denom:
        type: string
    type: object
  cosmos.circuit.v1.AccountResponse:
    description: AccountResponse is the response type for the Query/Account RPC method.
    properties:
      permission:
        description: |-
          Permissions are the permissions that an account has to trip
          or reset the circuit breaker.
        properties:
          level:
            description: level is the level of permissions granted to this account.
            default: LEVEL_NONE_UNSPECIFIED
            enum:
              - LEVEL_NONE_UNSPECIFIED
              - LEVEL_SOME_MSGS
              - LEVEL_ALL_MSGS
              - LEVEL_SUPER_ADMIN
            type: string
          limit_type_urls:
            description: >-
              limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of
              Msg type

              URLs that the account can trip. It is an error to use
              limit_type_urls with

              a level other than LEVEL_SOME_MSGS.
            items:
              type: string
            type: array
        type: object
    type: object
  cosmos.circuit.v1.AccountsResponse:
    description: AccountsResponse is the response type for the Query/Accounts RPC method.
    properties:
      accounts:
        items:
          properties:
            address:
              type: string
            permissions:
              description: |-
                Permissions are the permissions that an account has to trip
                or reset the circuit breaker.
              properties:
                level:
                  description: level is the level of permissions granted to this account.
                  default: LEVEL_NONE_UNSPECIFIED
                  enum:
                    - LEVEL_NONE_UNSPECIFIED
                    - LEVEL_SOME_MSGS
                    - LEVEL_ALL_MSGS
                    - LEVEL_SUPER_ADMIN
                  type: string
                limit_type_urls:
                  description: >-
                    limit_type_urls is used with LEVEL_SOME_MSGS to limit the
                    lists of Msg type

                    URLs that the account can trip. It is an error to use
                    limit_type_urls with

                    a level other than LEVEL_SOME_MSGS.
                  items:
                    type: string
                  type: array
              type: object
          title: >-
            GenesisAccountPermissions is the account permissions for the circuit
            breaker in genesis
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.circuit.v1.DisabledListResponse:
    description: >-
      DisabledListResponse is the response type for the Query/DisabledList RPC
      method.
    properties:
      disabled_list:
        items:
          type: string
        type: array
    type: object
  cosmos.circuit.v1.GenesisAccountPermissions:
    properties:
      address:
        type: string
      permissions:
        description: |-
          Permissions are the permissions that an account has to trip
          or reset the circuit breaker.
        properties:
          level:
            description: level is the level of permissions granted to this account.
            default: LEVEL_NONE_UNSPECIFIED
            enum:
              - LEVEL_NONE_UNSPECIFIED
              - LEVEL_SOME_MSGS
              - LEVEL_ALL_MSGS
              - LEVEL_SUPER_ADMIN
            type: string
          limit_type_urls:
            description: >-
              limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of
              Msg type

              URLs that the account can trip. It is an error to use
              limit_type_urls with

              a level other than LEVEL_SOME_MSGS.
            items:
              type: string
            type: array
        type: object
    title: >-
      GenesisAccountPermissions is the account permissions for the circuit
      breaker in genesis
    type: object
  cosmos.circuit.v1.Permissions:
    description: |-
      Permissions are the permissions that an account has to trip
      or reset the circuit breaker.
    properties:
      level:
        description: level is the level of permissions granted to this account.
        default: LEVEL_NONE_UNSPECIFIED
        enum:
          - LEVEL_NONE_UNSPECIFIED
          - LEVEL_SOME_MSGS
          - LEVEL_ALL_MSGS
          - LEVEL_SUPER_ADMIN
        type: string
      limit_type_urls:
        description: >-
          limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg
          type

          URLs that the account can trip. It is an error to use limit_type_urls
          with

          a level other than LEVEL_SOME_MSGS.
        items:
          type: string
        type: array
    type: object
  cosmos.circuit.v1.Permissions.Level:
    default: LEVEL_NONE_UNSPECIFIED
    description: |-
      Level is the permission level.

       - LEVEL_NONE_UNSPECIFIED: LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit
      breaker permissions.
       - LEVEL_SOME_MSGS: LEVEL_SOME_MSGS indicates that the account will have permission to
      trip or reset the circuit breaker for some Msg type URLs. If this level
      is chosen, a non-empty list of Msg type URLs must be provided in
      limit_type_urls.
       - LEVEL_ALL_MSGS: LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit
      breaker for Msg's of all type URLs.
       - LEVEL_SUPER_ADMIN: LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker
      actions and can grant permissions to other accounts.
    enum:
      - LEVEL_NONE_UNSPECIFIED
      - LEVEL_SOME_MSGS
      - LEVEL_ALL_MSGS
      - LEVEL_SUPER_ADMIN
    type: string
  cosmos.consensus.v1.QueryParamsResponse:
    description: >-
      QueryParamsResponse defines the response type for querying x/consensus
      parameters.
    properties:
      params:
        description: >-
          params are the tendermint consensus params stored in the consensus
          module.

          Please note that `params.version` is not populated in this response,
          it is

          tracked separately in the x/upgrade module.
        properties:
          abci:
            description: >-
              ABCIParams configure functionality specific to the Application
              Blockchain Interface.
            properties:
              vote_extensions_enable_height:
                description: >-
                  vote_extensions_enable_height configures the first height
                  during which

                  vote extensions will be enabled. During this specified height,
                  and for all

                  subsequent heights, precommit messages that do not contain
                  valid extension data

                  will be considered invalid. Prior to this height, vote
                  extensions will not

                  be used or accepted by validators on the network.


                  Once enabled, vote extensions will be created by the
                  application in ExtendVote,

                  passed to the application for validation in
                  VerifyVoteExtension and given

                  to the application to use when proposing a block during
                  PrepareProposal.
                format: int64
                type: string
            type: object
          block:
            description: BlockParams contains limits on the block size.
            properties:
              max_bytes:
                format: int64
                title: |-
                  Max block size, in bytes.
                  Note: must be greater than 0
                type: string
              max_gas:
                format: int64
                title: |-
                  Max gas per block.
                  Note: must be greater or equal to -1
                type: string
            type: object
          evidence:
            description: EvidenceParams determine how we handle evidence of malfeasance.
            properties:
              max_age_duration:
                description: >-
                  Max age of evidence, in time.


                  It should correspond with an app's "unbonding period" or other
                  similar

                  mechanism for handling [Nothing-At-Stake

                  attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
                type: string
              max_age_num_blocks:
                description: >-
                  Max age of evidence, in blocks.


                  The basic formula for calculating this is: MaxAgeDuration /
                  {average block

                  time}.
                format: int64
                type: string
              max_bytes:
                format: int64
                title: >-
                  This sets the maximum size of total evidence in bytes that can
                  be committed in a single block.

                  and should fall comfortably under the max block bytes.

                  Default is 1048576 or 1MB
                type: string
            type: object
          validator:
            description: |-
              ValidatorParams restrict the public key types validators can use.
              NOTE: uses ABCI pubkey naming, not Amino names.
            properties:
              pub_key_types:
                items:
                  type: string
                type: array
            type: object
          version:
            description: VersionParams contains the ABCI application version.
            properties:
              app:
                format: uint64
                type: string
            type: object
        type: object
    type: object
  cosmos.distribution.v1beta1.DelegationDelegatorReward:
    description: |-
      DelegationDelegatorReward represents the properties
      of a delegator's delegation reward.
    properties:
      reward:
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      validator_address:
        type: string
    type: object
  cosmos.distribution.v1beta1.Params:
    description: Params defines the set of params for the distribution module.
    properties:
      base_proposer_reward:
        description: >-
          Deprecated: The base_proposer_reward field is deprecated and is no
          longer used

          in the x/distribution module's reward mechanism.
        type: string
      bonus_proposer_reward:
        description: >-
          Deprecated: The bonus_proposer_reward field is deprecated and is no
          longer used

          in the x/distribution module's reward mechanism.
        type: string
      community_tax:
        type: string
      withdraw_addr_enabled:
        type: boolean
    type: object
  cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
    description: >-
      QueryCommunityPoolResponse is the response type for the
      Query/CommunityPool

      RPC method.
    properties:
      pool:
        description: pool defines community pool's coins.
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
    description: |-
      QueryDelegationRewardsResponse is the response type for the
      Query/DelegationRewards RPC method.
    properties:
      rewards:
        description: rewards defines the rewards accrued by a delegation.
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
    description: |-
      QueryDelegationTotalRewardsResponse is the response type for the
      Query/DelegationTotalRewards RPC method.
    properties:
      rewards:
        description: rewards defines all the rewards accrued by a delegator.
        items:
          description: |-
            DelegationDelegatorReward represents the properties
            of a delegator's delegation reward.
          properties:
            reward:
              items:
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            validator_address:
              type: string
          type: object
        type: array
      total:
        description: total defines the sum of all the rewards.
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
    description: |-
      QueryDelegatorValidatorsResponse is the response type for the
      Query/DelegatorValidators RPC method.
    properties:
      validators:
        description: validators defines the validators a delegator is delegating for.
        items:
          type: string
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
    description: |-
      QueryDelegatorWithdrawAddressResponse is the response type for the
      Query/DelegatorWithdrawAddress RPC method.
    properties:
      withdraw_address:
        description: withdraw_address defines the delegator address to query for.
        type: string
    type: object
  cosmos.distribution.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          base_proposer_reward:
            description: >-
              Deprecated: The base_proposer_reward field is deprecated and is no
              longer used

              in the x/distribution module's reward mechanism.
            type: string
          bonus_proposer_reward:
            description: >-
              Deprecated: The bonus_proposer_reward field is deprecated and is
              no longer used

              in the x/distribution module's reward mechanism.
            type: string
          community_tax:
            type: string
          withdraw_addr_enabled:
            type: boolean
        type: object
    type: object
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
    properties:
      commission:
        description: commission defines the commission the validator received.
        properties:
          commission:
            items:
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
        type: object
    title: |-
      QueryValidatorCommissionResponse is the response type for the
      Query/ValidatorCommission RPC method
    type: object
  cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse:
    description: >-
      QueryValidatorDistributionInfoResponse is the response type for the
      Query/ValidatorDistributionInfo RPC method.
    properties:
      commission:
        description: commission defines the commission the validator received.
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      operator_address:
        description: operator_address defines the validator operator address.
        type: string
      self_bond_rewards:
        description: self_bond_rewards defines the self delegations rewards.
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
    description: |-
      QueryValidatorOutstandingRewardsResponse is the response type for the
      Query/ValidatorOutstandingRewards RPC method.
    properties:
      rewards:
        description: >-
          ValidatorOutstandingRewards represents outstanding (un-withdrawn)
          rewards

          for a validator inexpensive to track, allows simple sanity checks.
        properties:
          rewards:
            items:
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
        type: object
    type: object
  cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
    description: |-
      QueryValidatorSlashesResponse is the response type for the
      Query/ValidatorSlashes RPC method.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      slashes:
        description: slashes defines the slashes the validator received.
        items:
          description: |-
            ValidatorSlashEvent represents a validator slash event.
            Height is implicit within the store key.
            This is needed to calculate appropriate amount of staking tokens
            for delegations which are withdrawn after a slash has occurred.
          properties:
            fraction:
              type: string
            validator_period:
              format: uint64
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
    description: |-
      ValidatorAccumulatedCommission represents accumulated commission
      for a validator kept as a running counter, can be withdrawn at any time.
    properties:
      commission:
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
    description: |-
      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
      for a validator inexpensive to track, allows simple sanity checks.
    properties:
      rewards:
        items:
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorSlashEvent:
    description: |-
      ValidatorSlashEvent represents a validator slash event.
      Height is implicit within the store key.
      This is needed to calculate appropriate amount of staking tokens
      for delegations which are withdrawn after a slash has occurred.
    properties:
      fraction:
        type: string
      validator_period:
        format: uint64
        type: string
    type: object
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC

      method.
    properties:
      evidence:
        description: evidence returns all evidences.
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
    properties:
      evidence:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
    type: object
  cosmos.feegrant.v1beta1.Grant:
    properties:
      allowance:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      grantee:
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
        type: string
      granter:
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
        type: string
    title: Grant is stored in the KVStore to record a grant with full context
    type: object
  cosmos.feegrant.v1beta1.QueryAllowanceResponse:
    description: >-
      QueryAllowanceResponse is the response type for the Query/Allowance RPC
      method.
    properties:
      allowance:
        description: allowance is a allowance granted for grantee by granter.
        properties:
          allowance:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          grantee:
            description: >-
              grantee is the address of the user being granted an allowance of
              another user's funds.
            type: string
          granter:
            description: >-
              granter is the address of the user granting an allowance of their
              funds.
            type: string
        title: Grant is stored in the KVStore to record a grant with full context
        type: object
    type: object
  cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse:
    description: >-
      QueryAllowancesByGranterResponse is the response type for the
      Query/AllowancesByGranter RPC method.


      Since: cosmos-sdk 0.46
    properties:
      allowances:
        description: allowances that have been issued by the granter.
        items:
          properties:
            allowance:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            grantee:
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
              type: string
            granter:
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
              type: string
          title: Grant is stored in the KVStore to record a grant with full context
          type: object
        type: array
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.feegrant.v1beta1.QueryAllowancesResponse:
    description: >-
      QueryAllowancesResponse is the response type for the Query/Allowances RPC
      method.
    properties:
      allowances:
        description: allowances are allowance's granted for grantee by granter.
        items:
          properties:
            allowance:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            grantee:
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
              type: string
            granter:
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
              type: string
          title: Grant is stored in the KVStore to record a grant with full context
          type: object
        type: array
      pagination:
        description: pagination defines an pagination for the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.gov.v1.Deposit:
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
    properties:
      amount:
        description: amount to be deposited by depositor.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      depositor:
        description: depositor defines the deposit addresses from the proposals.
        type: string
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
    type: object
  cosmos.gov.v1.DepositParams:
    description: DepositParams defines the params for deposits on governance proposals.
    properties:
      max_deposit_period:
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2

          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1.Params:
    description: |-
      Params defines the parameters for the x/gov module.

      Since: cosmos-sdk 0.47
    properties:
      burn_proposal_deposit_prevote:
        title: burn deposits if the proposal does not enter voting period
        type: boolean
      burn_vote_quorum:
        title: burn deposits if a proposal does not meet quorum
        type: boolean
      burn_vote_veto:
        title: burn deposits if quorum with vote type no_veto is met
        type: boolean
      expedited_min_deposit:
        description: Minimum expedited deposit for a proposal to enter voting period.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      expedited_threshold:
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.67.


          Since: cosmos-sdk 0.50
        type: string
      expedited_voting_period:
        description: |-
          Duration of the voting period of an expedited proposal.

          Since: cosmos-sdk 0.50
        type: string
      max_deposit_period:
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2

          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      min_deposit_ratio:
        description: >-
          The ratio representing the proportion of the deposit value minimum
          that must be met when making a deposit.

          Default value: 0.01. Meaning that for a chain with a min_deposit of
          100stake, a deposit of 1stake would be

          required.


          Since: cosmos-sdk 0.50
        type: string
      min_initial_deposit_ratio:
        description: >-
          The ratio representing the proportion of the deposit value that must
          be paid at proposal submission.
        type: string
      proposal_cancel_dest:
        description: >-
          The address which will receive (proposal_cancel_ratio * deposit)
          proposal deposits.

          If empty, the (proposal_cancel_ratio * deposit) proposal deposits will
          be burned.


          Since: cosmos-sdk 0.50
        type: string
      proposal_cancel_ratio:
        description: >-
          The cancel ratio which will not be returned back to the depositors
          when a proposal is cancelled.


          Since: cosmos-sdk 0.50
        type: string
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
        type: string
      threshold:
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
        type: string
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1.Proposal:
    description: Proposal defines the core field members of a governance proposal.
    properties:
      deposit_end_time:
        description: deposit_end_time is the end time for deposition.
        format: date-time
        type: string
      expedited:
        description: 'Since: cosmos-sdk 0.50'
        title: expedited defines if the proposal is expedited
        type: boolean
      failed_reason:
        description: 'Since: cosmos-sdk 0.50'
        title: failed_reason defines the reason why the proposal failed
        type: string
      final_tally_result:
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
        properties:
          abstain_count:
            description: abstain_count is the number of abstain votes on a proposal.
            type: string
          no_count:
            description: no_count is the number of no votes on a proposal.
            type: string
          no_with_veto_count:
            description: >-
              no_with_veto_count is the number of no with veto votes on a
              proposal.
            type: string
          yes_count:
            description: yes_count is the number of yes votes on a proposal.
            type: string
        type: object
      id:
        description: id defines the unique id of the proposal.
        format: uint64
        type: string
      messages:
        description: >-
          messages are the arbitrary messages to be executed if the proposal
          passes.
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
      metadata:
        title: |-
          metadata is any arbitrary metadata attached to the proposal.
          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/gov#proposal-3
        type: string
      proposer:
        description: 'Since: cosmos-sdk 0.47'
        title: proposer is the address of the proposal sumbitter
        type: string
      status:
        description: status defines the proposal status.
        default: PROPOSAL_STATUS_UNSPECIFIED
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        type: string
      submit_time:
        description: submit_time is the time of proposal submission.
        format: date-time
        type: string
      summary:
        description: 'Since: cosmos-sdk 0.47'
        title: summary is a short summary of the proposal
        type: string
      title:
        description: 'Since: cosmos-sdk 0.47'
        title: title is the title of the proposal
        type: string
      total_deposit:
        description: total_deposit is the total deposit on the proposal.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      voting_end_time:
        description: voting_end_time is the end time of voting on a proposal.
        format: date-time
        type: string
      voting_start_time:
        description: voting_start_time is the starting time to vote on a proposal.
        format: date-time
        type: string
    type: object
  cosmos.gov.v1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    type: string
  cosmos.gov.v1.QueryConstitutionResponse:
    properties:
      constitution:
        type: string
    title: >-
      QueryConstitutionResponse is the response type for the Query/Constitution
      RPC method
    type: object
  cosmos.gov.v1.QueryDepositResponse:
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
    properties:
      deposit:
        description: deposit defines the requested deposit.
        properties:
          amount:
            description: amount to be deposited by depositor.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          depositor:
            description: depositor defines the deposit addresses from the proposals.
            type: string
          proposal_id:
            description: proposal_id defines the unique id of the proposal.
            format: uint64
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryDepositsResponse:
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
    properties:
      deposits:
        description: deposits defines the requested deposits.
        items:
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
          properties:
            amount:
              description: amount to be deposited by depositor.
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            depositor:
              description: depositor defines the deposit addresses from the proposals.
              type: string
            proposal_id:
              description: proposal_id defines the unique id of the proposal.
              format: uint64
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      deposit_params:
        description: |-
          Deprecated: Prefer to use `params` instead.
          deposit_params defines the parameters related to deposit.
        properties:
          max_deposit_period:
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2

              months.
            type: string
          min_deposit:
            description: Minimum deposit for a proposal to enter voting period.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
        type: object
      params:
        description: |-
          params defines all the paramaters of x/gov module.

          Since: cosmos-sdk 0.47
        properties:
          burn_proposal_deposit_prevote:
            title: burn deposits if the proposal does not enter voting period
            type: boolean
          burn_vote_quorum:
            title: burn deposits if a proposal does not meet quorum
            type: boolean
          burn_vote_veto:
            title: burn deposits if quorum with vote type no_veto is met
            type: boolean
          expedited_min_deposit:
            description: Minimum expedited deposit for a proposal to enter voting period.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          expedited_threshold:
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.67.


              Since: cosmos-sdk 0.50
            type: string
          expedited_voting_period:
            description: |-
              Duration of the voting period of an expedited proposal.

              Since: cosmos-sdk 0.50
            type: string
          max_deposit_period:
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2

              months.
            type: string
          min_deposit:
            description: Minimum deposit for a proposal to enter voting period.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          min_deposit_ratio:
            description: >-
              The ratio representing the proportion of the deposit value minimum
              that must be met when making a deposit.

              Default value: 0.01. Meaning that for a chain with a min_deposit
              of 100stake, a deposit of 1stake would be

              required.


              Since: cosmos-sdk 0.50
            type: string
          min_initial_deposit_ratio:
            description: >-
              The ratio representing the proportion of the deposit value that
              must be paid at proposal submission.
            type: string
          proposal_cancel_dest:
            description: >-
              The address which will receive (proposal_cancel_ratio * deposit)
              proposal deposits.

              If empty, the (proposal_cancel_ratio * deposit) proposal deposits
              will be burned.


              Since: cosmos-sdk 0.50
            type: string
          proposal_cancel_ratio:
            description: >-
              The cancel ratio which will not be returned back to the depositors
              when a proposal is cancelled.


              Since: cosmos-sdk 0.50
            type: string
          quorum:
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
            type: string
          threshold:
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
            type: string
          veto_threshold:
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
            type: string
          voting_period:
            description: Duration of the voting period.
            type: string
        type: object
      tally_params:
        description: |-
          Deprecated: Prefer to use `params` instead.
          tally_params defines the parameters related to tally.
        properties:
          quorum:
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be

              considered valid.
            type: string
          threshold:
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
            type: string
          veto_threshold:
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be

              vetoed. Default value: 1/3.
            type: string
        type: object
      voting_params:
        description: |-
          Deprecated: Prefer to use `params` instead.
          voting_params defines the parameters related to voting.
        properties:
          voting_period:
            description: Duration of the voting period.
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryProposalResponse:
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
    properties:
      proposal:
        description: proposal is the requested governance proposal.
        properties:
          deposit_end_time:
            description: deposit_end_time is the end time for deposition.
            format: date-time
            type: string
          expedited:
            description: 'Since: cosmos-sdk 0.50'
            title: expedited defines if the proposal is expedited
            type: boolean
          failed_reason:
            description: 'Since: cosmos-sdk 0.50'
            title: failed_reason defines the reason why the proposal failed
            type: string
          final_tally_result:
            description: >-
              final_tally_result is the final tally result of the proposal. When

              querying a proposal via gRPC, this field is not populated until
              the

              proposal's voting period has ended.
            properties:
              abstain_count:
                description: abstain_count is the number of abstain votes on a proposal.
                type: string
              no_count:
                description: no_count is the number of no votes on a proposal.
                type: string
              no_with_veto_count:
                description: >-
                  no_with_veto_count is the number of no with veto votes on a
                  proposal.
                type: string
              yes_count:
                description: yes_count is the number of yes votes on a proposal.
                type: string
            type: object
          id:
            description: id defines the unique id of the proposal.
            format: uint64
            type: string
          messages:
            description: >-
              messages are the arbitrary messages to be executed if the proposal
              passes.
            items:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            type: array
          metadata:
            title: |-
              metadata is any arbitrary metadata attached to the proposal.
              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/gov#proposal-3
            type: string
          proposer:
            description: 'Since: cosmos-sdk 0.47'
            title: proposer is the address of the proposal sumbitter
            type: string
          status:
            description: status defines the proposal status.
            default: PROPOSAL_STATUS_UNSPECIFIED
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            type: string
          submit_time:
            description: submit_time is the time of proposal submission.
            format: date-time
            type: string
          summary:
            description: 'Since: cosmos-sdk 0.47'
            title: summary is a short summary of the proposal
            type: string
          title:
            description: 'Since: cosmos-sdk 0.47'
            title: title is the title of the proposal
            type: string
          total_deposit:
            description: total_deposit is the total deposit on the proposal.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          voting_end_time:
            description: voting_end_time is the end time of voting on a proposal.
            format: date-time
            type: string
          voting_start_time:
            description: voting_start_time is the starting time to vote on a proposal.
            format: date-time
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryProposalsResponse:
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      proposals:
        description: proposals defines all the requested governance proposals.
        items:
          description: Proposal defines the core field members of a governance proposal.
          properties:
            deposit_end_time:
              description: deposit_end_time is the end time for deposition.
              format: date-time
              type: string
            expedited:
              description: 'Since: cosmos-sdk 0.50'
              title: expedited defines if the proposal is expedited
              type: boolean
            failed_reason:
              description: 'Since: cosmos-sdk 0.50'
              title: failed_reason defines the reason why the proposal failed
              type: string
            final_tally_result:
              description: >-
                final_tally_result is the final tally result of the proposal.
                When

                querying a proposal via gRPC, this field is not populated until
                the

                proposal's voting period has ended.
              properties:
                abstain_count:
                  description: abstain_count is the number of abstain votes on a proposal.
                  type: string
                no_count:
                  description: no_count is the number of no votes on a proposal.
                  type: string
                no_with_veto_count:
                  description: >-
                    no_with_veto_count is the number of no with veto votes on a
                    proposal.
                  type: string
                yes_count:
                  description: yes_count is the number of yes votes on a proposal.
                  type: string
              type: object
            id:
              description: id defines the unique id of the proposal.
              format: uint64
              type: string
            messages:
              description: >-
                messages are the arbitrary messages to be executed if the
                proposal passes.
              items:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              type: array
            metadata:
              title: |-
                metadata is any arbitrary metadata attached to the proposal.
                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/gov#proposal-3
              type: string
            proposer:
              description: 'Since: cosmos-sdk 0.47'
              title: proposer is the address of the proposal sumbitter
              type: string
            status:
              description: status defines the proposal status.
              default: PROPOSAL_STATUS_UNSPECIFIED
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              type: string
            submit_time:
              description: submit_time is the time of proposal submission.
              format: date-time
              type: string
            summary:
              description: 'Since: cosmos-sdk 0.47'
              title: summary is a short summary of the proposal
              type: string
            title:
              description: 'Since: cosmos-sdk 0.47'
              title: title is the title of the proposal
              type: string
            total_deposit:
              description: total_deposit is the total deposit on the proposal.
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            voting_end_time:
              description: voting_end_time is the end time of voting on a proposal.
              format: date-time
              type: string
            voting_start_time:
              description: voting_start_time is the starting time to vote on a proposal.
              format: date-time
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1.QueryTallyResultResponse:
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
    properties:
      tally:
        description: tally defines the requested tally.
        properties:
          abstain_count:
            description: abstain_count is the number of abstain votes on a proposal.
            type: string
          no_count:
            description: no_count is the number of no votes on a proposal.
            type: string
          no_with_veto_count:
            description: >-
              no_with_veto_count is the number of no with veto votes on a
              proposal.
            type: string
          yes_count:
            description: yes_count is the number of yes votes on a proposal.
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryVoteResponse:
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    properties:
      vote:
        description: vote defines the queried vote.
        properties:
          metadata:
            title: >-
              metadata is any arbitrary metadata attached to the vote.

              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/gov#vote-5
            type: string
          options:
            description: options is the weighted vote options.
            items:
              description: WeightedVoteOption defines a unit of vote for vote split.
              properties:
                option:
                  description: >-
                    option defines the valid vote options, it must not contain
                    duplicate vote options.
                  default: VOTE_OPTION_UNSPECIFIED
                  enum:
                    - VOTE_OPTION_UNSPECIFIED
                    - VOTE_OPTION_YES
                    - VOTE_OPTION_ABSTAIN
                    - VOTE_OPTION_NO
                    - VOTE_OPTION_NO_WITH_VETO
                  type: string
                weight:
                  description: weight is the vote weight associated with the vote option.
                  type: string
              type: object
            type: array
          proposal_id:
            description: proposal_id defines the unique id of the proposal.
            format: uint64
            type: string
          voter:
            description: voter is the voter address of the proposal.
            type: string
        type: object
    type: object
  cosmos.gov.v1.QueryVotesResponse:
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      votes:
        description: votes defines the queried votes.
        items:
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
          properties:
            metadata:
              title: >-
                metadata is any arbitrary metadata attached to the vote.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/gov#vote-5
              type: string
            options:
              description: options is the weighted vote options.
              items:
                description: WeightedVoteOption defines a unit of vote for vote split.
                properties:
                  option:
                    description: >-
                      option defines the valid vote options, it must not contain
                      duplicate vote options.
                    default: VOTE_OPTION_UNSPECIFIED
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    type: string
                  weight:
                    description: weight is the vote weight associated with the vote option.
                    type: string
                type: object
              type: array
            proposal_id:
              description: proposal_id defines the unique id of the proposal.
              format: uint64
              type: string
            voter:
              description: voter is the voter address of the proposal.
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1.TallyParams:
    description: TallyParams defines the params for tallying votes on governance proposals.
    properties:
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
          considered valid.
        type: string
      threshold:
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
          vetoed. Default value: 1/3.
        type: string
    type: object
  cosmos.gov.v1.TallyResult:
    description: TallyResult defines a standard tally for a governance proposal.
    properties:
      abstain_count:
        description: abstain_count is the number of abstain votes on a proposal.
        type: string
      no_count:
        description: no_count is the number of no votes on a proposal.
        type: string
      no_with_veto_count:
        description: no_with_veto_count is the number of no with veto votes on a proposal.
        type: string
      yes_count:
        description: yes_count is the number of yes votes on a proposal.
        type: string
    type: object
  cosmos.gov.v1.Vote:
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
    properties:
      metadata:
        title: >-
          metadata is any arbitrary metadata attached to the vote.

          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/gov#vote-5
        type: string
      options:
        description: options is the weighted vote options.
        items:
          description: WeightedVoteOption defines a unit of vote for vote split.
          properties:
            option:
              description: >-
                option defines the valid vote options, it must not contain
                duplicate vote options.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            weight:
              description: weight is the vote weight associated with the vote option.
              type: string
          type: object
        type: array
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      voter:
        description: voter is the voter address of the proposal.
        type: string
    type: object
  cosmos.gov.v1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.gov.v1.VotingParams:
    description: VotingParams defines the params for voting on governance proposals.
    properties:
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1.WeightedVoteOption:
    description: WeightedVoteOption defines a unit of vote for vote split.
    properties:
      option:
        description: >-
          option defines the valid vote options, it must not contain duplicate
          vote options.
        default: VOTE_OPTION_UNSPECIFIED
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        type: string
      weight:
        description: weight is the vote weight associated with the vote option.
        type: string
    type: object
  cosmos.gov.v1beta1.Deposit:
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
    properties:
      amount:
        description: amount to be deposited by depositor.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      depositor:
        description: depositor defines the deposit addresses from the proposals.
        type: string
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
    type: object
  cosmos.gov.v1beta1.DepositParams:
    description: DepositParams defines the params for deposits on governance proposals.
    properties:
      max_deposit_period:
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2

          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1beta1.Proposal:
    description: Proposal defines the core field members of a governance proposal.
    properties:
      content:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      deposit_end_time:
        description: deposit_end_time is the end time for deposition.
        format: date-time
        type: string
      final_tally_result:
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
        properties:
          abstain:
            description: abstain is the number of abstain votes on a proposal.
            type: string
          'no':
            description: no is the number of no votes on a proposal.
            type: string
          no_with_veto:
            description: no_with_veto is the number of no with veto votes on a proposal.
            type: string
          'yes':
            description: yes is the number of yes votes on a proposal.
            type: string
        type: object
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      status:
        description: status defines the proposal status.
        default: PROPOSAL_STATUS_UNSPECIFIED
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        type: string
      submit_time:
        description: submit_time is the time of proposal submission.
        format: date-time
        type: string
      total_deposit:
        description: total_deposit is the total deposit on the proposal.
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        type: array
      voting_end_time:
        description: voting_end_time is the end time of voting on a proposal.
        format: date-time
        type: string
      voting_start_time:
        description: voting_start_time is the starting time to vote on a proposal.
        format: date-time
        type: string
    type: object
  cosmos.gov.v1beta1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    type: string
  cosmos.gov.v1beta1.QueryDepositResponse:
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
    properties:
      deposit:
        description: deposit defines the requested deposit.
        properties:
          amount:
            description: amount to be deposited by depositor.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          depositor:
            description: depositor defines the deposit addresses from the proposals.
            type: string
          proposal_id:
            description: proposal_id defines the unique id of the proposal.
            format: uint64
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryDepositsResponse:
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
    properties:
      deposits:
        description: deposits defines the requested deposits.
        items:
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
          properties:
            amount:
              description: amount to be deposited by depositor.
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            depositor:
              description: depositor defines the deposit addresses from the proposals.
              type: string
            proposal_id:
              description: proposal_id defines the unique id of the proposal.
              format: uint64
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      deposit_params:
        description: deposit_params defines the parameters related to deposit.
        properties:
          max_deposit_period:
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2

              months.
            type: string
          min_deposit:
            description: Minimum deposit for a proposal to enter voting period.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
        type: object
      tally_params:
        description: tally_params defines the parameters related to tally.
        properties:
          quorum:
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be

              considered valid.
            format: byte
            type: string
          threshold:
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
            format: byte
            type: string
          veto_threshold:
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be

              vetoed. Default value: 1/3.
            format: byte
            type: string
        type: object
      voting_params:
        description: voting_params defines the parameters related to voting.
        properties:
          voting_period:
            description: Duration of the voting period.
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryProposalResponse:
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
    properties:
      proposal:
        description: Proposal defines the core field members of a governance proposal.
        properties:
          content:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          deposit_end_time:
            description: deposit_end_time is the end time for deposition.
            format: date-time
            type: string
          final_tally_result:
            description: >-
              final_tally_result is the final tally result of the proposal. When

              querying a proposal via gRPC, this field is not populated until
              the

              proposal's voting period has ended.
            properties:
              abstain:
                description: abstain is the number of abstain votes on a proposal.
                type: string
              'no':
                description: no is the number of no votes on a proposal.
                type: string
              no_with_veto:
                description: >-
                  no_with_veto is the number of no with veto votes on a
                  proposal.
                type: string
              'yes':
                description: yes is the number of yes votes on a proposal.
                type: string
            type: object
          proposal_id:
            description: proposal_id defines the unique id of the proposal.
            format: uint64
            type: string
          status:
            description: status defines the proposal status.
            default: PROPOSAL_STATUS_UNSPECIFIED
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            type: string
          submit_time:
            description: submit_time is the time of proposal submission.
            format: date-time
            type: string
          total_deposit:
            description: total_deposit is the total deposit on the proposal.
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            type: array
          voting_end_time:
            description: voting_end_time is the end time of voting on a proposal.
            format: date-time
            type: string
          voting_start_time:
            description: voting_start_time is the starting time to vote on a proposal.
            format: date-time
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryProposalsResponse:
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      proposals:
        description: proposals defines all the requested governance proposals.
        items:
          description: Proposal defines the core field members of a governance proposal.
          properties:
            content:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            deposit_end_time:
              description: deposit_end_time is the end time for deposition.
              format: date-time
              type: string
            final_tally_result:
              description: >-
                final_tally_result is the final tally result of the proposal.
                When

                querying a proposal via gRPC, this field is not populated until
                the

                proposal's voting period has ended.
              properties:
                abstain:
                  description: abstain is the number of abstain votes on a proposal.
                  type: string
                'no':
                  description: no is the number of no votes on a proposal.
                  type: string
                no_with_veto:
                  description: >-
                    no_with_veto is the number of no with veto votes on a
                    proposal.
                  type: string
                'yes':
                  description: yes is the number of yes votes on a proposal.
                  type: string
              type: object
            proposal_id:
              description: proposal_id defines the unique id of the proposal.
              format: uint64
              type: string
            status:
              description: status defines the proposal status.
              default: PROPOSAL_STATUS_UNSPECIFIED
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              type: string
            submit_time:
              description: submit_time is the time of proposal submission.
              format: date-time
              type: string
            total_deposit:
              description: total_deposit is the total deposit on the proposal.
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            voting_end_time:
              description: voting_end_time is the end time of voting on a proposal.
              format: date-time
              type: string
            voting_start_time:
              description: voting_start_time is the starting time to vote on a proposal.
              format: date-time
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1beta1.QueryTallyResultResponse:
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
    properties:
      tally:
        description: tally defines the requested tally.
        properties:
          abstain:
            description: abstain is the number of abstain votes on a proposal.
            type: string
          'no':
            description: no is the number of no votes on a proposal.
            type: string
          no_with_veto:
            description: no_with_veto is the number of no with veto votes on a proposal.
            type: string
          'yes':
            description: yes is the number of yes votes on a proposal.
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryVoteResponse:
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    properties:
      vote:
        description: vote defines the queried vote.
        properties:
          option:
            description: >-
              Deprecated: Prefer to use `options` instead. This field is set in
              queries

              if and only if `len(options) == 1` and that option has weight 1.
              In all

              other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
            default: VOTE_OPTION_UNSPECIFIED
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            type: string
          options:
            description: |-
              options is the weighted vote options.

              Since: cosmos-sdk 0.43
            items:
              description: |-
                WeightedVoteOption defines a unit of vote for vote split.

                Since: cosmos-sdk 0.43
              properties:
                option:
                  description: >-
                    option defines the valid vote options, it must not contain
                    duplicate vote options.
                  default: VOTE_OPTION_UNSPECIFIED
                  enum:
                    - VOTE_OPTION_UNSPECIFIED
                    - VOTE_OPTION_YES
                    - VOTE_OPTION_ABSTAIN
                    - VOTE_OPTION_NO
                    - VOTE_OPTION_NO_WITH_VETO
                  type: string
                weight:
                  description: weight is the vote weight associated with the vote option.
                  type: string
              type: object
            type: array
          proposal_id:
            description: proposal_id defines the unique id of the proposal.
            format: uint64
            type: string
          voter:
            description: voter is the voter address of the proposal.
            type: string
        type: object
    type: object
  cosmos.gov.v1beta1.QueryVotesResponse:
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      votes:
        description: votes defines the queried votes.
        items:
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
          properties:
            option:
              description: >-
                Deprecated: Prefer to use `options` instead. This field is set
                in queries

                if and only if `len(options) == 1` and that option has weight 1.
                In all

                other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            options:
              description: |-
                options is the weighted vote options.

                Since: cosmos-sdk 0.43
              items:
                description: |-
                  WeightedVoteOption defines a unit of vote for vote split.

                  Since: cosmos-sdk 0.43
                properties:
                  option:
                    description: >-
                      option defines the valid vote options, it must not contain
                      duplicate vote options.
                    default: VOTE_OPTION_UNSPECIFIED
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    type: string
                  weight:
                    description: weight is the vote weight associated with the vote option.
                    type: string
                type: object
              type: array
            proposal_id:
              description: proposal_id defines the unique id of the proposal.
              format: uint64
              type: string
            voter:
              description: voter is the voter address of the proposal.
              type: string
          type: object
        type: array
    type: object
  cosmos.gov.v1beta1.TallyParams:
    description: TallyParams defines the params for tallying votes on governance proposals.
    properties:
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
          considered valid.
        format: byte
        type: string
      threshold:
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
        format: byte
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
          vetoed. Default value: 1/3.
        format: byte
        type: string
    type: object
  cosmos.gov.v1beta1.TallyResult:
    description: TallyResult defines a standard tally for a governance proposal.
    properties:
      abstain:
        description: abstain is the number of abstain votes on a proposal.
        type: string
      'no':
        description: no is the number of no votes on a proposal.
        type: string
      no_with_veto:
        description: no_with_veto is the number of no with veto votes on a proposal.
        type: string
      'yes':
        description: yes is the number of yes votes on a proposal.
        type: string
    type: object
  cosmos.gov.v1beta1.Vote:
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
    properties:
      option:
        description: >-
          Deprecated: Prefer to use `options` instead. This field is set in
          queries

          if and only if `len(options) == 1` and that option has weight 1. In
          all

          other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
        default: VOTE_OPTION_UNSPECIFIED
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        type: string
      options:
        description: |-
          options is the weighted vote options.

          Since: cosmos-sdk 0.43
        items:
          description: |-
            WeightedVoteOption defines a unit of vote for vote split.

            Since: cosmos-sdk 0.43
          properties:
            option:
              description: >-
                option defines the valid vote options, it must not contain
                duplicate vote options.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            weight:
              description: weight is the vote weight associated with the vote option.
              type: string
          type: object
        type: array
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      voter:
        description: voter is the voter address of the proposal.
        type: string
    type: object
  cosmos.gov.v1beta1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.gov.v1beta1.VotingParams:
    description: VotingParams defines the params for voting on governance proposals.
    properties:
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1beta1.WeightedVoteOption:
    description: |-
      WeightedVoteOption defines a unit of vote for vote split.

      Since: cosmos-sdk 0.43
    properties:
      option:
        description: >-
          option defines the valid vote options, it must not contain duplicate
          vote options.
        default: VOTE_OPTION_UNSPECIFIED
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        type: string
      weight:
        description: weight is the vote weight associated with the vote option.
        type: string
    type: object
  cosmos.group.v1.GroupInfo:
    description: GroupInfo represents the high-level on-chain information for a group.
    properties:
      admin:
        description: admin is the account address of the group's admin.
        type: string
      created_at:
        description: created_at is a timestamp specifying when a group was created.
        format: date-time
        type: string
      id:
        description: id is the unique ID of the group.
        format: uint64
        type: string
      metadata:
        title: >-
          metadata is any arbitrary metadata to attached to the group.

          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#group-1
        type: string
      total_weight:
        description: total_weight is the sum of the group members' weights.
        type: string
      version:
        format: uint64
        title: >-
          version is used to track changes to a group's membership structure
          that

          would break existing proposals. Whenever any members weight is
          changed,

          or any member is added or removed this version is incremented and will

          cause proposals based on older versions of this group to fail
        type: string
    type: object
  cosmos.group.v1.GroupMember:
    description: GroupMember represents the relationship between a group and a member.
    properties:
      group_id:
        description: group_id is the unique ID of the group.
        format: uint64
        type: string
      member:
        description: member is the member data.
        properties:
          added_at:
            description: added_at is a timestamp specifying when a member was added.
            format: date-time
            type: string
          address:
            description: address is the member's account address.
            type: string
          metadata:
            description: metadata is any arbitrary metadata attached to the member.
            type: string
          weight:
            description: >-
              weight is the member's voting weight that should be greater than
              0.
            type: string
        type: object
    type: object
  cosmos.group.v1.GroupPolicyInfo:
    description: >-
      GroupPolicyInfo represents the high-level on-chain information for a group
      policy.
    properties:
      address:
        description: address is the account address of group policy.
        type: string
      admin:
        description: admin is the account address of the group admin.
        type: string
      created_at:
        description: created_at is a timestamp specifying when a group policy was created.
        format: date-time
        type: string
      decision_policy:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      group_id:
        description: group_id is the unique ID of the group.
        format: uint64
        type: string
      metadata:
        title: |-
          metadata is any arbitrary metadata attached to the group policy.
          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
        type: string
      version:
        description: >-
          version is used to track changes to a group's GroupPolicyInfo
          structure that

          would create a different result on a running proposal.
        format: uint64
        type: string
    type: object
  cosmos.group.v1.Member:
    description: |-
      Member represents a group member with an account address,
      non-zero weight, metadata and added_at timestamp.
    properties:
      added_at:
        description: added_at is a timestamp specifying when a member was added.
        format: date-time
        type: string
      address:
        description: address is the member's account address.
        type: string
      metadata:
        description: metadata is any arbitrary metadata attached to the member.
        type: string
      weight:
        description: weight is the member's voting weight that should be greater than 0.
        type: string
    type: object
  cosmos.group.v1.Proposal:
    description: >-
      Proposal defines a group proposal. Any member of a group can submit a
      proposal

      for a group policy to decide upon.

      A proposal consists of a set of `sdk.Msg`s that will be executed if the
      proposal

      passes as well as some optional metadata associated with the proposal.
    properties:
      executor_result:
        description: >-
          executor_result is the final result of the proposal execution. Initial
          value is NotRun.
        default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
        enum:
          - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
          - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
          - PROPOSAL_EXECUTOR_RESULT_SUCCESS
          - PROPOSAL_EXECUTOR_RESULT_FAILURE
        type: string
      final_tally_result:
        description: >-
          final_tally_result contains the sums of all weighted votes for this

          proposal for each vote option. It is empty at submission, and only

          populated after tallying, at voting period end or at proposal
          execution,

          whichever happens first.
        properties:
          abstain_count:
            description: abstain_count is the weighted sum of abstainers.
            type: string
          no_count:
            description: no_count is the weighted sum of no votes.
            type: string
          no_with_veto_count:
            description: no_with_veto_count is the weighted sum of veto.
            type: string
          yes_count:
            description: yes_count is the weighted sum of yes votes.
            type: string
        type: object
      group_policy_address:
        description: group_policy_address is the account address of group policy.
        type: string
      group_policy_version:
        description: >-
          group_policy_version tracks the version of the group policy at
          proposal submission.

          When a decision policy is changed, existing proposals from previous
          policy

          versions will become invalid with the `ABORTED` status.

          This field is here for informational purposes only.
        format: uint64
        type: string
      group_version:
        description: |-
          group_version tracks the version of the group at proposal submission.
          This field is here for informational purposes only.
        format: uint64
        type: string
      id:
        description: id is the unique id of the proposal.
        format: uint64
        type: string
      messages:
        description: >-
          messages is a list of `sdk.Msg`s that will be executed if the proposal
          passes.
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
      metadata:
        title: |-
          metadata is any arbitrary metadata attached to the proposal.
          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#proposal-4
        type: string
      proposers:
        description: proposers are the account addresses of the proposers.
        items:
          type: string
        type: array
      status:
        description: >-
          status represents the high level position in the life cycle of the
          proposal. Initial value is Submitted.
        default: PROPOSAL_STATUS_UNSPECIFIED
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_SUBMITTED
          - PROPOSAL_STATUS_ACCEPTED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_ABORTED
          - PROPOSAL_STATUS_WITHDRAWN
        type: string
      submit_time:
        description: submit_time is a timestamp specifying when a proposal was submitted.
        format: date-time
        type: string
      summary:
        description: 'Since: cosmos-sdk 0.47'
        title: summary is a short summary of the proposal
        type: string
      title:
        description: 'Since: cosmos-sdk 0.47'
        title: title is the title of the proposal
        type: string
      voting_period_end:
        description: >-
          voting_period_end is the timestamp before which voting must be done.

          Unless a successful MsgExec is called before (to execute a proposal
          whose

          tally is successful before the voting period ends), tallying will be
          done

          at this point, and the `final_tally_result`and `status` fields will be

          accordingly updated.
        format: date-time
        type: string
    type: object
  cosmos.group.v1.ProposalExecutorResult:
    default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
    description: |-
      ProposalExecutorResult defines types of proposal executor results.

       - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.
       - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.
       - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.
       - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn't update state.
    enum:
      - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
      - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
      - PROPOSAL_EXECUTOR_RESULT_SUCCESS
      - PROPOSAL_EXECUTOR_RESULT_FAILURE
    type: string
  cosmos.group.v1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus defines proposal statuses.

       - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.
       - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.
       - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome
      passes the group policy's decision policy.
       - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome
      is rejected by the group policy's decision policy.
       - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the
      final tally.
       - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner.
      When this happens the final status is Withdrawn.
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_SUBMITTED
      - PROPOSAL_STATUS_ACCEPTED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_ABORTED
      - PROPOSAL_STATUS_WITHDRAWN
    type: string
  cosmos.group.v1.QueryGroupInfoResponse:
    description: QueryGroupInfoResponse is the Query/GroupInfo response type.
    properties:
      info:
        description: info is the GroupInfo of the group.
        properties:
          admin:
            description: admin is the account address of the group's admin.
            type: string
          created_at:
            description: created_at is a timestamp specifying when a group was created.
            format: date-time
            type: string
          id:
            description: id is the unique ID of the group.
            format: uint64
            type: string
          metadata:
            title: >-
              metadata is any arbitrary metadata to attached to the group.

              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/group#group-1
            type: string
          total_weight:
            description: total_weight is the sum of the group members' weights.
            type: string
          version:
            format: uint64
            title: >-
              version is used to track changes to a group's membership structure
              that

              would break existing proposals. Whenever any members weight is
              changed,

              or any member is added or removed this version is incremented and
              will

              cause proposals based on older versions of this group to fail
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupMembersResponse:
    description: QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
    properties:
      members:
        description: members are the members of the group with given group_id.
        items:
          description: >-
            GroupMember represents the relationship between a group and a
            member.
          properties:
            group_id:
              description: group_id is the unique ID of the group.
              format: uint64
              type: string
            member:
              description: member is the member data.
              properties:
                added_at:
                  description: added_at is a timestamp specifying when a member was added.
                  format: date-time
                  type: string
                address:
                  description: address is the member's account address.
                  type: string
                metadata:
                  description: metadata is any arbitrary metadata attached to the member.
                  type: string
                weight:
                  description: >-
                    weight is the member's voting weight that should be greater
                    than 0.
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupPoliciesByAdminResponse:
    description: >-
      QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin
      response type.
    properties:
      group_policies:
        description: group_policies are the group policies info with provided admin.
        items:
          description: >-
            GroupPolicyInfo represents the high-level on-chain information for a
            group policy.
          properties:
            address:
              description: address is the account address of group policy.
              type: string
            admin:
              description: admin is the account address of the group admin.
              type: string
            created_at:
              description: >-
                created_at is a timestamp specifying when a group policy was
                created.
              format: date-time
              type: string
            decision_policy:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            group_id:
              description: group_id is the unique ID of the group.
              format: uint64
              type: string
            metadata:
              title: >-
                metadata is any arbitrary metadata attached to the group policy.

                the recommended format of the metadata is to be found here:

                https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
              type: string
            version:
              description: >-
                version is used to track changes to a group's GroupPolicyInfo
                structure that

                would create a different result on a running proposal.
              format: uint64
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupPoliciesByGroupResponse:
    description: >-
      QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup
      response type.
    properties:
      group_policies:
        description: >-
          group_policies are the group policies info associated with the
          provided group.
        items:
          description: >-
            GroupPolicyInfo represents the high-level on-chain information for a
            group policy.
          properties:
            address:
              description: address is the account address of group policy.
              type: string
            admin:
              description: admin is the account address of the group admin.
              type: string
            created_at:
              description: >-
                created_at is a timestamp specifying when a group policy was
                created.
              format: date-time
              type: string
            decision_policy:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            group_id:
              description: group_id is the unique ID of the group.
              format: uint64
              type: string
            metadata:
              title: >-
                metadata is any arbitrary metadata attached to the group policy.

                the recommended format of the metadata is to be found here:

                https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
              type: string
            version:
              description: >-
                version is used to track changes to a group's GroupPolicyInfo
                structure that

                would create a different result on a running proposal.
              format: uint64
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupPolicyInfoResponse:
    description: QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
    properties:
      info:
        description: >-
          GroupPolicyInfo represents the high-level on-chain information for a
          group policy.
        properties:
          address:
            description: address is the account address of group policy.
            type: string
          admin:
            description: admin is the account address of the group admin.
            type: string
          created_at:
            description: >-
              created_at is a timestamp specifying when a group policy was
              created.
            format: date-time
            type: string
          decision_policy:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          group_id:
            description: group_id is the unique ID of the group.
            format: uint64
            type: string
          metadata:
            title: |-
              metadata is any arbitrary metadata attached to the group policy.
              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
            type: string
          version:
            description: >-
              version is used to track changes to a group's GroupPolicyInfo
              structure that

              would create a different result on a running proposal.
            format: uint64
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupsByAdminResponse:
    description: >-
      QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response
      type.
    properties:
      groups:
        description: groups are the groups info with the provided admin.
        items:
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
          properties:
            admin:
              description: admin is the account address of the group's admin.
              type: string
            created_at:
              description: created_at is a timestamp specifying when a group was created.
              format: date-time
              type: string
            id:
              description: id is the unique ID of the group.
              format: uint64
              type: string
            metadata:
              title: >-
                metadata is any arbitrary metadata to attached to the group.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#group-1
              type: string
            total_weight:
              description: total_weight is the sum of the group members' weights.
              type: string
            version:
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupsByMemberResponse:
    description: QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
    properties:
      groups:
        description: groups are the groups info with the provided group member.
        items:
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
          properties:
            admin:
              description: admin is the account address of the group's admin.
              type: string
            created_at:
              description: created_at is a timestamp specifying when a group was created.
              format: date-time
              type: string
            id:
              description: id is the unique ID of the group.
              format: uint64
              type: string
            metadata:
              title: >-
                metadata is any arbitrary metadata to attached to the group.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#group-1
              type: string
            total_weight:
              description: total_weight is the sum of the group members' weights.
              type: string
            version:
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryGroupsResponse:
    description: |-
      QueryGroupsResponse is the Query/Groups response type.

      Since: cosmos-sdk 0.47.1
    properties:
      groups:
        description: '`groups` is all the groups present in state.'
        items:
          description: >-
            GroupInfo represents the high-level on-chain information for a
            group.
          properties:
            admin:
              description: admin is the account address of the group's admin.
              type: string
            created_at:
              description: created_at is a timestamp specifying when a group was created.
              format: date-time
              type: string
            id:
              description: id is the unique ID of the group.
              format: uint64
              type: string
            metadata:
              title: >-
                metadata is any arbitrary metadata to attached to the group.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#group-1
              type: string
            total_weight:
              description: total_weight is the sum of the group members' weights.
              type: string
            version:
              format: uint64
              title: >-
                version is used to track changes to a group's membership
                structure that

                would break existing proposals. Whenever any members weight is
                changed,

                or any member is added or removed this version is incremented
                and will

                cause proposals based on older versions of this group to fail
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryProposalResponse:
    description: QueryProposalResponse is the Query/Proposal response type.
    properties:
      proposal:
        description: proposal is the proposal info.
        properties:
          executor_result:
            description: >-
              executor_result is the final result of the proposal execution.
              Initial value is NotRun.
            default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
            enum:
              - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
              - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
              - PROPOSAL_EXECUTOR_RESULT_SUCCESS
              - PROPOSAL_EXECUTOR_RESULT_FAILURE
            type: string
          final_tally_result:
            description: >-
              final_tally_result contains the sums of all weighted votes for
              this

              proposal for each vote option. It is empty at submission, and only

              populated after tallying, at voting period end or at proposal
              execution,

              whichever happens first.
            properties:
              abstain_count:
                description: abstain_count is the weighted sum of abstainers.
                type: string
              no_count:
                description: no_count is the weighted sum of no votes.
                type: string
              no_with_veto_count:
                description: no_with_veto_count is the weighted sum of veto.
                type: string
              yes_count:
                description: yes_count is the weighted sum of yes votes.
                type: string
            type: object
          group_policy_address:
            description: group_policy_address is the account address of group policy.
            type: string
          group_policy_version:
            description: >-
              group_policy_version tracks the version of the group policy at
              proposal submission.

              When a decision policy is changed, existing proposals from
              previous policy

              versions will become invalid with the `ABORTED` status.

              This field is here for informational purposes only.
            format: uint64
            type: string
          group_version:
            description: >-
              group_version tracks the version of the group at proposal
              submission.

              This field is here for informational purposes only.
            format: uint64
            type: string
          id:
            description: id is the unique id of the proposal.
            format: uint64
            type: string
          messages:
            description: >-
              messages is a list of `sdk.Msg`s that will be executed if the
              proposal passes.
            items:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            type: array
          metadata:
            title: |-
              metadata is any arbitrary metadata attached to the proposal.
              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/group#proposal-4
            type: string
          proposers:
            description: proposers are the account addresses of the proposers.
            items:
              type: string
            type: array
          status:
            description: >-
              status represents the high level position in the life cycle of the
              proposal. Initial value is Submitted.
            default: PROPOSAL_STATUS_UNSPECIFIED
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_SUBMITTED
              - PROPOSAL_STATUS_ACCEPTED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_ABORTED
              - PROPOSAL_STATUS_WITHDRAWN
            type: string
          submit_time:
            description: >-
              submit_time is a timestamp specifying when a proposal was
              submitted.
            format: date-time
            type: string
          summary:
            description: 'Since: cosmos-sdk 0.47'
            title: summary is a short summary of the proposal
            type: string
          title:
            description: 'Since: cosmos-sdk 0.47'
            title: title is the title of the proposal
            type: string
          voting_period_end:
            description: >-
              voting_period_end is the timestamp before which voting must be
              done.

              Unless a successful MsgExec is called before (to execute a
              proposal whose

              tally is successful before the voting period ends), tallying will
              be done

              at this point, and the `final_tally_result`and `status` fields
              will be

              accordingly updated.
            format: date-time
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryProposalsByGroupPolicyResponse:
    description: >-
      QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy
      response type.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      proposals:
        description: proposals are the proposals with given group policy.
        items:
          description: >-
            Proposal defines a group proposal. Any member of a group can submit
            a proposal

            for a group policy to decide upon.

            A proposal consists of a set of `sdk.Msg`s that will be executed if
            the proposal

            passes as well as some optional metadata associated with the
            proposal.
          properties:
            executor_result:
              description: >-
                executor_result is the final result of the proposal execution.
                Initial value is NotRun.
              default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
              enum:
                - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                - PROPOSAL_EXECUTOR_RESULT_FAILURE
              type: string
            final_tally_result:
              description: >-
                final_tally_result contains the sums of all weighted votes for
                this

                proposal for each vote option. It is empty at submission, and
                only

                populated after tallying, at voting period end or at proposal
                execution,

                whichever happens first.
              properties:
                abstain_count:
                  description: abstain_count is the weighted sum of abstainers.
                  type: string
                no_count:
                  description: no_count is the weighted sum of no votes.
                  type: string
                no_with_veto_count:
                  description: no_with_veto_count is the weighted sum of veto.
                  type: string
                yes_count:
                  description: yes_count is the weighted sum of yes votes.
                  type: string
              type: object
            group_policy_address:
              description: group_policy_address is the account address of group policy.
              type: string
            group_policy_version:
              description: >-
                group_policy_version tracks the version of the group policy at
                proposal submission.

                When a decision policy is changed, existing proposals from
                previous policy

                versions will become invalid with the `ABORTED` status.

                This field is here for informational purposes only.
              format: uint64
              type: string
            group_version:
              description: >-
                group_version tracks the version of the group at proposal
                submission.

                This field is here for informational purposes only.
              format: uint64
              type: string
            id:
              description: id is the unique id of the proposal.
              format: uint64
              type: string
            messages:
              description: >-
                messages is a list of `sdk.Msg`s that will be executed if the
                proposal passes.
              items:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              type: array
            metadata:
              title: |-
                metadata is any arbitrary metadata attached to the proposal.
                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#proposal-4
              type: string
            proposers:
              description: proposers are the account addresses of the proposers.
              items:
                type: string
              type: array
            status:
              description: >-
                status represents the high level position in the life cycle of
                the proposal. Initial value is Submitted.
              default: PROPOSAL_STATUS_UNSPECIFIED
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_SUBMITTED
                - PROPOSAL_STATUS_ACCEPTED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_ABORTED
                - PROPOSAL_STATUS_WITHDRAWN
              type: string
            submit_time:
              description: >-
                submit_time is a timestamp specifying when a proposal was
                submitted.
              format: date-time
              type: string
            summary:
              description: 'Since: cosmos-sdk 0.47'
              title: summary is a short summary of the proposal
              type: string
            title:
              description: 'Since: cosmos-sdk 0.47'
              title: title is the title of the proposal
              type: string
            voting_period_end:
              description: >-
                voting_period_end is the timestamp before which voting must be
                done.

                Unless a successful MsgExec is called before (to execute a
                proposal whose

                tally is successful before the voting period ends), tallying
                will be done

                at this point, and the `final_tally_result`and `status` fields
                will be

                accordingly updated.
              format: date-time
              type: string
          type: object
        type: array
    type: object
  cosmos.group.v1.QueryTallyResultResponse:
    description: QueryTallyResultResponse is the Query/TallyResult response type.
    properties:
      tally:
        description: tally defines the requested tally.
        properties:
          abstain_count:
            description: abstain_count is the weighted sum of abstainers.
            type: string
          no_count:
            description: no_count is the weighted sum of no votes.
            type: string
          no_with_veto_count:
            description: no_with_veto_count is the weighted sum of veto.
            type: string
          yes_count:
            description: yes_count is the weighted sum of yes votes.
            type: string
        type: object
    type: object
  cosmos.group.v1.QueryVoteByProposalVoterResponse:
    description: >-
      QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response
      type.
    properties:
      vote:
        description: vote is the vote with given proposal_id and voter.
        properties:
          metadata:
            title: >-
              metadata is any arbitrary metadata attached to the vote.

              the recommended format of the metadata is to be found here:
              https://docs.cosmos.network/v0.47/modules/group#vote-2
            type: string
          option:
            description: option is the voter's choice on the proposal.
            default: VOTE_OPTION_UNSPECIFIED
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            type: string
          proposal_id:
            description: proposal is the unique ID of the proposal.
            format: uint64
            type: string
          submit_time:
            description: submit_time is the timestamp when the vote was submitted.
            format: date-time
            type: string
          voter:
            description: voter is the account address of the voter.
            type: string
        title: Vote represents a vote for a proposal.string metadata
        type: object
    type: object
  cosmos.group.v1.QueryVotesByProposalResponse:
    description: QueryVotesByProposalResponse is the Query/VotesByProposal response type.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      votes:
        description: votes are the list of votes for given proposal_id.
        items:
          properties:
            metadata:
              title: >-
                metadata is any arbitrary metadata attached to the vote.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#vote-2
              type: string
            option:
              description: option is the voter's choice on the proposal.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            proposal_id:
              description: proposal is the unique ID of the proposal.
              format: uint64
              type: string
            submit_time:
              description: submit_time is the timestamp when the vote was submitted.
              format: date-time
              type: string
            voter:
              description: voter is the account address of the voter.
              type: string
          title: Vote represents a vote for a proposal.string metadata
          type: object
        type: array
    type: object
  cosmos.group.v1.QueryVotesByVoterResponse:
    description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
    properties:
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      votes:
        description: votes are the list of votes by given voter.
        items:
          properties:
            metadata:
              title: >-
                metadata is any arbitrary metadata attached to the vote.

                the recommended format of the metadata is to be found here:
                https://docs.cosmos.network/v0.47/modules/group#vote-2
              type: string
            option:
              description: option is the voter's choice on the proposal.
              default: VOTE_OPTION_UNSPECIFIED
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            proposal_id:
              description: proposal is the unique ID of the proposal.
              format: uint64
              type: string
            submit_time:
              description: submit_time is the timestamp when the vote was submitted.
              format: date-time
              type: string
            voter:
              description: voter is the account address of the voter.
              type: string
          title: Vote represents a vote for a proposal.string metadata
          type: object
        type: array
    type: object
  cosmos.group.v1.TallyResult:
    description: TallyResult represents the sum of weighted votes for each vote option.
    properties:
      abstain_count:
        description: abstain_count is the weighted sum of abstainers.
        type: string
      no_count:
        description: no_count is the weighted sum of no votes.
        type: string
      no_with_veto_count:
        description: no_with_veto_count is the weighted sum of veto.
        type: string
      yes_count:
        description: yes_count is the weighted sum of yes votes.
        type: string
    type: object
  cosmos.group.v1.Vote:
    properties:
      metadata:
        title: >-
          metadata is any arbitrary metadata attached to the vote.

          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#vote-2
        type: string
      option:
        description: option is the voter's choice on the proposal.
        default: VOTE_OPTION_UNSPECIFIED
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        type: string
      proposal_id:
        description: proposal is the unique ID of the proposal.
        format: uint64
        type: string
      submit_time:
        description: submit_time is the timestamp when the vote was submitted.
        format: date-time
        type: string
      voter:
        description: voter is the account address of the voter.
        type: string
    title: Vote represents a vote for a proposal.string metadata
    type: object
  cosmos.group.v1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: |-
      VoteOption enumerates the valid vote options for a given proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
      return an error.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.nft.v1beta1.Class:
    description: Class defines the class of the nft type.
    properties:
      data:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: data is the app specific metadata of the NFT class. Optional
      description:
        title: description is a brief description of nft classification. Optional
        type: string
      id:
        title: >-
          id defines the unique identifier of the NFT classification, similar to
          the contract address of ERC721
        type: string
      name:
        title: >-
          name defines the human-readable name of the NFT classification.
          Optional
        type: string
      symbol:
        title: symbol is an abbreviated name for nft classification. Optional
        type: string
      uri:
        title: >-
          uri for the class metadata stored off chain. It can define schema for
          Class and NFT `Data` attributes. Optional
        type: string
      uri_hash:
        title: uri_hash is a hash of the document pointed by uri. Optional
        type: string
    type: object
  cosmos.nft.v1beta1.NFT:
    description: NFT defines the NFT.
    properties:
      class_id:
        title: >-
          class_id associated with the NFT, similar to the contract address of
          ERC721
        type: string
      data:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: data is an app specific data of the NFT. Optional
      id:
        title: id is a unique identifier of the NFT
        type: string
      uri:
        title: uri for the NFT metadata stored off chain
        type: string
      uri_hash:
        title: uri_hash is a hash of the document pointed by uri
        type: string
    type: object
  cosmos.nft.v1beta1.QueryBalanceResponse:
    properties:
      amount:
        format: uint64
        title: amount is the number of all NFTs of a given class owned by the owner
        type: string
    title: QueryBalanceResponse is the response type for the Query/Balance RPC method
    type: object
  cosmos.nft.v1beta1.QueryClassResponse:
    properties:
      class:
        description: class defines the class of the nft type.
        properties:
          data:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
            title: data is the app specific metadata of the NFT class. Optional
          description:
            title: description is a brief description of nft classification. Optional
            type: string
          id:
            title: >-
              id defines the unique identifier of the NFT classification,
              similar to the contract address of ERC721
            type: string
          name:
            title: >-
              name defines the human-readable name of the NFT classification.
              Optional
            type: string
          symbol:
            title: symbol is an abbreviated name for nft classification. Optional
            type: string
          uri:
            title: >-
              uri for the class metadata stored off chain. It can define schema
              for Class and NFT `Data` attributes. Optional
            type: string
          uri_hash:
            title: uri_hash is a hash of the document pointed by uri. Optional
            type: string
        type: object
    title: QueryClassResponse is the response type for the Query/Class RPC method
    type: object
  cosmos.nft.v1beta1.QueryClassesResponse:
    properties:
      classes:
        description: class defines the class of the nft type.
        items:
          description: Class defines the class of the nft type.
          properties:
            data:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
              title: data is the app specific metadata of the NFT class. Optional
            description:
              title: >-
                description is a brief description of nft classification.
                Optional
              type: string
            id:
              title: >-
                id defines the unique identifier of the NFT classification,
                similar to the contract address of ERC721
              type: string
            name:
              title: >-
                name defines the human-readable name of the NFT classification.
                Optional
              type: string
            symbol:
              title: symbol is an abbreviated name for nft classification. Optional
              type: string
            uri:
              title: >-
                uri for the class metadata stored off chain. It can define
                schema for Class and NFT `Data` attributes. Optional
              type: string
            uri_hash:
              title: uri_hash is a hash of the document pointed by uri. Optional
              type: string
          type: object
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: QueryClassesResponse is the response type for the Query/Classes RPC method
    type: object
  cosmos.nft.v1beta1.QueryNFTResponse:
    properties:
      nft:
        title: owner is the owner address of the nft
        description: NFT defines the NFT.
        properties:
          class_id:
            title: >-
              class_id associated with the NFT, similar to the contract address
              of ERC721
            type: string
          data:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
            title: data is an app specific data of the NFT. Optional
          id:
            title: id is a unique identifier of the NFT
            type: string
          uri:
            title: uri for the NFT metadata stored off chain
            type: string
          uri_hash:
            title: uri_hash is a hash of the document pointed by uri
            type: string
        type: object
    title: QueryNFTResponse is the response type for the Query/NFT RPC method
    type: object
  cosmos.nft.v1beta1.QueryNFTsResponse:
    properties:
      nfts:
        items:
          description: NFT defines the NFT.
          properties:
            class_id:
              title: >-
                class_id associated with the NFT, similar to the contract
                address of ERC721
              type: string
            data:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
              title: data is an app specific data of the NFT. Optional
            id:
              title: id is a unique identifier of the NFT
              type: string
            uri:
              title: uri for the NFT metadata stored off chain
              type: string
            uri_hash:
              title: uri_hash is a hash of the document pointed by uri
              type: string
          type: object
        title: NFT defines the NFT
        type: array
      pagination:
        description: pagination defines the pagination in the response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: QueryNFTsResponse is the response type for the Query/NFTs RPC methods
    type: object
  cosmos.nft.v1beta1.QueryOwnerResponse:
    properties:
      owner:
        title: owner is the owner address of the nft
        type: string
    title: QueryOwnerResponse is the response type for the Query/Owner RPC method
    type: object
  cosmos.nft.v1beta1.QuerySupplyResponse:
    properties:
      amount:
        format: uint64
        title: amount is the number of all NFTs from the given class
        type: string
    title: QuerySupplyResponse is the response type for the Query/Supply RPC method
    type: object
  cosmos.orm.query.v1alpha1.GetResponse:
    description: GetResponse is the Query/Get response type.
    properties:
      result:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
    type: object
  cosmos.orm.query.v1alpha1.IndexValue:
    description: IndexValue represents the value of a field in an ORM index expression.
    properties:
      bool:
        description: bool specifies a value for a bool index field.
        type: boolean
      bytes:
        description: bytes specifies a value for a bytes index field.
        format: byte
        type: string
      duration:
        description: duration specifies a value for a duration index field.
        type: string
      enum:
        description: enum specifies a value for an enum index field.
        type: string
      int:
        description: |-
          int64 specifies a value for an int32, sfixed32, int64, or sfixed64
          index field.
        format: int64
        type: string
      str:
        description: str specifies a value for a string index field.
        type: string
      timestamp:
        description: timestamp specifies a value for a timestamp index field.
        format: date-time
        type: string
      uint:
        description: |-
          uint specifies a value for an uint32, fixed32, uint64, or fixed64
          index field.
        format: uint64
        type: string
    type: object
  cosmos.orm.query.v1alpha1.ListRequest.Prefix:
    description: Prefix specifies the arguments to a prefix query.
    properties:
      values:
        description: |-
          values specifies the index values for the prefix query.
          It is valid to special a partial prefix with fewer values than
          the number of fields in the index.
        items:
          description: >-
            IndexValue represents the value of a field in an ORM index
            expression.
          properties:
            bool:
              description: bool specifies a value for a bool index field.
              type: boolean
            bytes:
              description: bytes specifies a value for a bytes index field.
              format: byte
              type: string
            duration:
              description: duration specifies a value for a duration index field.
              type: string
            enum:
              description: enum specifies a value for an enum index field.
              type: string
            int:
              description: >-
                int64 specifies a value for an int32, sfixed32, int64, or
                sfixed64

                index field.
              format: int64
              type: string
            str:
              description: str specifies a value for a string index field.
              type: string
            timestamp:
              description: timestamp specifies a value for a timestamp index field.
              format: date-time
              type: string
            uint:
              description: >-
                uint specifies a value for an uint32, fixed32, uint64, or
                fixed64

                index field.
              format: uint64
              type: string
          type: object
        type: array
    type: object
  cosmos.orm.query.v1alpha1.ListRequest.Range:
    description: Range specifies the arguments to a range query.
    properties:
      end:
        description: |-
          end specifies the inclusive ending index values for the range query.
          It is valid to provide fewer values than the number of fields in the
          index.
        items:
          description: >-
            IndexValue represents the value of a field in an ORM index
            expression.
          properties:
            bool:
              description: bool specifies a value for a bool index field.
              type: boolean
            bytes:
              description: bytes specifies a value for a bytes index field.
              format: byte
              type: string
            duration:
              description: duration specifies a value for a duration index field.
              type: string
            enum:
              description: enum specifies a value for an enum index field.
              type: string
            int:
              description: >-
                int64 specifies a value for an int32, sfixed32, int64, or
                sfixed64

                index field.
              format: int64
              type: string
            str:
              description: str specifies a value for a string index field.
              type: string
            timestamp:
              description: timestamp specifies a value for a timestamp index field.
              format: date-time
              type: string
            uint:
              description: >-
                uint specifies a value for an uint32, fixed32, uint64, or
                fixed64

                index field.
              format: uint64
              type: string
          type: object
        type: array
      start:
        description: |-
          start specifies the starting index values for the range query.
          It is valid to provide fewer values than the number of fields in the
          index.
        items:
          description: >-
            IndexValue represents the value of a field in an ORM index
            expression.
          properties:
            bool:
              description: bool specifies a value for a bool index field.
              type: boolean
            bytes:
              description: bytes specifies a value for a bytes index field.
              format: byte
              type: string
            duration:
              description: duration specifies a value for a duration index field.
              type: string
            enum:
              description: enum specifies a value for an enum index field.
              type: string
            int:
              description: >-
                int64 specifies a value for an int32, sfixed32, int64, or
                sfixed64

                index field.
              format: int64
              type: string
            str:
              description: str specifies a value for a string index field.
              type: string
            timestamp:
              description: timestamp specifies a value for a timestamp index field.
              format: date-time
              type: string
            uint:
              description: >-
                uint specifies a value for an uint32, fixed32, uint64, or
                fixed64

                index field.
              format: uint64
              type: string
          type: object
        type: array
    type: object
  cosmos.orm.query.v1alpha1.ListResponse:
    description: ListResponse is the Query/List response type.
    properties:
      pagination:
        description: pagination is the pagination response.
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      results:
        description: results are the results of the query.
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
    type: object
  cosmos.params.v1beta1.ParamChange:
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
    properties:
      key:
        type: string
      subspace:
        type: string
      value:
        type: string
    type: object
  cosmos.params.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      param:
        description: param defines the queried parameter.
        properties:
          key:
            type: string
          subspace:
            type: string
          value:
            type: string
        type: object
    type: object
  cosmos.params.v1beta1.QuerySubspacesResponse:
    description: |-
      QuerySubspacesResponse defines the response types for querying for all
      registered subspaces and all keys for a subspace.

      Since: cosmos-sdk 0.46
    properties:
      subspaces:
        items:
          description: >-
            Subspace defines a parameter subspace name and all the keys that
            exist for

            the subspace.


            Since: cosmos-sdk 0.46
          properties:
            keys:
              items:
                type: string
              type: array
            subspace:
              type: string
          type: object
        type: array
    type: object
  cosmos.params.v1beta1.Subspace:
    description: |-
      Subspace defines a parameter subspace name and all the keys that exist for
      the subspace.

      Since: cosmos-sdk 0.46
    properties:
      keys:
        items:
          type: string
        type: array
      subspace:
        type: string
    type: object
  cosmos.slashing.v1beta1.Params:
    description: Params represents the parameters used for by the slashing module.
    properties:
      downtime_jail_duration:
        type: string
      min_signed_per_window:
        format: byte
        type: string
      signed_blocks_window:
        format: int64
        type: string
      slash_fraction_double_sign:
        format: byte
        type: string
      slash_fraction_downtime:
        format: byte
        type: string
    type: object
  cosmos.slashing.v1beta1.QueryParamsResponse:
    properties:
      params:
        description: Params represents the parameters used for by the slashing module.
        properties:
          downtime_jail_duration:
            type: string
          min_signed_per_window:
            format: byte
            type: string
          signed_blocks_window:
            format: int64
            type: string
          slash_fraction_double_sign:
            format: byte
            type: string
          slash_fraction_downtime:
            format: byte
            type: string
        type: object
    title: QueryParamsResponse is the response type for the Query/Params RPC method
    type: object
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    properties:
      val_signing_info:
        title: val_signing_info is the signing info of requested val cons address
        description: >-
          ValidatorSigningInfo defines a validator's signing info for monitoring
          their

          liveness activity.
        properties:
          address:
            type: string
          index_offset:
            description: >-
              Index which is incremented every time a validator is bonded in a
              block and

              _may_ have signed a pre-commit or not. This in conjunction with
              the

              signed_blocks_window param determines the index in the missed
              block bitmap.
            format: int64
            type: string
          jailed_until:
            description: >-
              Timestamp until which the validator is jailed due to liveness
              downtime.
            format: date-time
            type: string
          missed_blocks_counter:
            description: >-
              A counter of missed (unsigned) blocks. It is used to avoid
              unnecessary

              reads in the missed block bitmap.
            format: int64
            type: string
          start_height:
            format: int64
            title: Height at which validator was first a candidate OR was un-jailed
            type: string
          tombstoned:
            description: >-
              Whether or not a validator has been tombstoned (killed out of
              validator

              set). It is set once the validator commits an equivocation or for
              any other

              configured misbehavior.
            type: boolean
        type: object
    title: >-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo
      RPC

      method
    type: object
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    properties:
      info:
        items:
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
          properties:
            address:
              type: string
            index_offset:
              description: >-
                Index which is incremented every time a validator is bonded in a
                block and

                _may_ have signed a pre-commit or not. This in conjunction with
                the

                signed_blocks_window param determines the index in the missed
                block bitmap.
              format: int64
              type: string
            jailed_until:
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
              format: date-time
              type: string
            missed_blocks_counter:
              description: >-
                A counter of missed (unsigned) blocks. It is used to avoid
                unnecessary

                reads in the missed block bitmap.
              format: int64
              type: string
            start_height:
              format: int64
              title: Height at which validator was first a candidate OR was un-jailed
              type: string
            tombstoned:
              description: >-
                Whether or not a validator has been tombstoned (killed out of
                validator

                set). It is set once the validator commits an equivocation or
                for any other

                configured misbehavior.
              type: boolean
          type: object
        title: info is the signing info of all validators
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: >-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos
      RPC

      method
    type: object
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    description: >-
      ValidatorSigningInfo defines a validator's signing info for monitoring
      their

      liveness activity.
    properties:
      address:
        type: string
      index_offset:
        description: >-
          Index which is incremented every time a validator is bonded in a block
          and

          _may_ have signed a pre-commit or not. This in conjunction with the

          signed_blocks_window param determines the index in the missed block
          bitmap.
        format: int64
        type: string
      jailed_until:
        description: >-
          Timestamp until which the validator is jailed due to liveness
          downtime.
        format: date-time
        type: string
      missed_blocks_counter:
        description: |-
          A counter of missed (unsigned) blocks. It is used to avoid unnecessary
          reads in the missed block bitmap.
        format: int64
        type: string
      start_height:
        format: int64
        title: Height at which validator was first a candidate OR was un-jailed
        type: string
      tombstoned:
        description: >-
          Whether or not a validator has been tombstoned (killed out of
          validator

          set). It is set once the validator commits an equivocation or for any
          other

          configured misbehavior.
        type: boolean
    type: object
  cosmos.staking.v1beta1.BondStatus:
    default: BOND_STATUS_UNSPECIFIED
    description: |-
      BondStatus is the status of a validator.

       - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
       - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
       - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
       - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
    enum:
      - BOND_STATUS_UNSPECIFIED
      - BOND_STATUS_UNBONDED
      - BOND_STATUS_UNBONDING
      - BOND_STATUS_BONDED
    type: string
  cosmos.staking.v1beta1.Commission:
    description: Commission defines commission parameters for a given validator.
    properties:
      commission_rates:
        description: >-
          commission_rates defines the initial commission rates to be used for
          creating a validator.
        properties:
          max_change_rate:
            description: >-
              max_change_rate defines the maximum daily increase of the
              validator commission, as a fraction.
            type: string
          max_rate:
            description: >-
              max_rate defines the maximum commission rate which validator can
              ever charge, as a fraction.
            type: string
          rate:
            description: rate is the commission rate charged to delegators, as a fraction.
            type: string
        type: object
      update_time:
        description: update_time is the last time the commission rate was changed.
        format: date-time
        type: string
    type: object
  cosmos.staking.v1beta1.CommissionRates:
    description: >-
      CommissionRates defines the initial commission rates to be used for
      creating

      a validator.
    properties:
      max_change_rate:
        description: >-
          max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
        type: string
      max_rate:
        description: >-
          max_rate defines the maximum commission rate which validator can ever
          charge, as a fraction.
        type: string
      rate:
        description: rate is the commission rate charged to delegators, as a fraction.
        type: string
    type: object
  cosmos.staking.v1beta1.Delegation:
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
    properties:
      delegator_address:
        description: delegator_address is the encoded address of the delegator.
        type: string
      shares:
        description: shares define the delegation shares received.
        type: string
      validator_address:
        description: validator_address is the encoded address of the validator.
        type: string
    type: object
  cosmos.staking.v1beta1.DelegationResponse:
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
    properties:
      balance:
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
      delegation:
        description: |-
          Delegation represents the bond with tokens held by an account. It is
          owned by one delegator, and is associated with the voting power of one
          validator.
        properties:
          delegator_address:
            description: delegator_address is the encoded address of the delegator.
            type: string
          shares:
            description: shares define the delegation shares received.
            type: string
          validator_address:
            description: validator_address is the encoded address of the validator.
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.Description:
    description: Description defines a validator description.
    properties:
      details:
        description: details define other optional details.
        type: string
      identity:
        description: >-
          identity defines an optional identity signature (ex. UPort or
          Keybase).
        type: string
      moniker:
        description: moniker defines a human-readable name for the validator.
        type: string
      security_contact:
        description: security_contact defines an optional email for security contact.
        type: string
      website:
        description: website defines an optional website link.
        type: string
    type: object
  cosmos.staking.v1beta1.HistoricalInfo:
    description: >-
      HistoricalInfo contains header and validator information for a given
      block.

      It is stored as part of staking module's state, which persists the `n`
      most

      recent HistoricalInfo

      (`n` is set by the staking module's `historical_entries` parameter).
    properties:
      header:
        description: Header defines the structure of a block header.
        properties:
          app_hash:
            format: byte
            type: string
          chain_id:
            type: string
          consensus_hash:
            format: byte
            type: string
          data_hash:
            format: byte
            type: string
          evidence_hash:
            format: byte
            title: consensus info
            type: string
          height:
            format: int64
            type: string
          last_block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          last_commit_hash:
            format: byte
            title: hashes of block data
            type: string
          last_results_hash:
            format: byte
            type: string
          next_validators_hash:
            format: byte
            type: string
          proposer_address:
            format: byte
            type: string
          time:
            format: date-time
            type: string
          validators_hash:
            format: byte
            title: hashes from the app output from the prev block
            type: string
          version:
            title: basic block info
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
            properties:
              app:
                format: uint64
                type: string
              block:
                format: uint64
                type: string
            type: object
        type: object
      valset:
        items:
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
          properties:
            commission:
              description: commission defines the commission parameters.
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  properties:
                    max_change_rate:
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                      type: string
                    max_rate:
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                      type: string
                    rate:
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                      type: string
                  type: object
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consensus_pubkey:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            delegator_shares:
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
              type: string
            description:
              description: description defines the description terms for the validator.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            jailed:
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
              type: boolean
            min_self_delegation:
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
              type: string
            operator_address:
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
              type: string
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              default: BOND_STATUS_UNSPECIFIED
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              type: string
            tokens:
              description: tokens define the delegated tokens (incl. self-delegation).
              type: string
            unbonding_height:
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
              format: int64
              type: string
            unbonding_ids:
              items:
                format: uint64
                type: string
              title: >-
                list of unbonding ids, each uniquely identifing an unbonding of
                this validator
              type: array
            unbonding_on_hold_ref_count:
              format: int64
              title: >-
                strictly positive if this validator's unbonding has been stopped
                by external modules
              type: string
            unbonding_time:
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
              format: date-time
              type: string
          type: object
        type: array
    type: object
  cosmos.staking.v1beta1.Params:
    description: Params defines the parameters for the x/staking module.
    properties:
      bond_denom:
        description: bond_denom defines the bondable coin denomination.
        type: string
      historical_entries:
        description: historical_entries is the number of historical entries to persist.
        format: int64
        type: integer
      max_entries:
        description: >-
          max_entries is the max entries for either unbonding delegation or
          redelegation (per pair/trio).
        format: int64
        type: integer
      max_validators:
        description: max_validators is the maximum number of validators.
        format: int64
        type: integer
      min_commission_rate:
        title: >-
          min_commission_rate is the chain-wide minimum commission rate that a
          validator can charge their delegators
        type: string
      unbonding_time:
        description: unbonding_time is the time duration of unbonding.
        type: string
    type: object
  cosmos.staking.v1beta1.Pool:
    description: |-
      Pool is used for tracking bonded and not-bonded token supply of the bond
      denomination.
    properties:
      bonded_tokens:
        type: string
      not_bonded_tokens:
        type: string
    type: object
  cosmos.staking.v1beta1.QueryDelegationResponse:
    description: >-
      QueryDelegationResponse is response type for the Query/Delegation RPC
      method.
    properties:
      delegation_response:
        description: delegation_responses defines the delegation info of a delegation.
        properties:
          balance:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          delegation:
            description: >-
              Delegation represents the bond with tokens held by an account. It
              is

              owned by one delegator, and is associated with the voting power of
              one

              validator.
            properties:
              delegator_address:
                description: delegator_address is the encoded address of the delegator.
                type: string
              shares:
                description: shares define the delegation shares received.
                type: string
              validator_address:
                description: validator_address is the encoded address of the validator.
                type: string
            type: object
        type: object
    type: object
  cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
    description: |-
      QueryDelegatorDelegationsResponse is response type for the
      Query/DelegatorDelegations RPC method.
    properties:
      delegation_responses:
        description: delegation_responses defines all the delegations' info of a delegator.
        items:
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
          properties:
            balance:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            delegation:
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
              properties:
                delegator_address:
                  description: delegator_address is the encoded address of the delegator.
                  type: string
                shares:
                  description: shares define the delegation shares received.
                  type: string
                validator_address:
                  description: validator_address is the encoded address of the validator.
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
    description: |-
      QueryUnbondingDelegatorDelegationsResponse is response type for the
      Query/UnbondingDelegatorDelegations RPC method.
    properties:
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      unbonding_responses:
        items:
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
          properties:
            delegator_address:
              description: delegator_address is the encoded address of the delegator.
              type: string
            entries:
              description: entries are the unbonding delegation entries.
              items:
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
                properties:
                  balance:
                    description: balance defines the tokens to receive at completion.
                    type: string
                  completion_time:
                    description: completion_time is the unix time for unbonding completion.
                    format: date-time
                    type: string
                  creation_height:
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                    format: int64
                    type: string
                  initial_balance:
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                    type: string
                  unbonding_id:
                    format: uint64
                    title: Incrementing id that uniquely identifies this entry
                    type: string
                  unbonding_on_hold_ref_count:
                    format: int64
                    title: >-
                      Strictly positive if this entry's unbonding has been
                      stopped by external modules
                    type: string
                type: object
              type: array
            validator_address:
              description: validator_address is the encoded address of the validator.
              type: string
          type: object
        type: array
    type: object
  cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
    description: |-
      QueryDelegatorValidatorResponse response type for the
      Query/DelegatorValidator RPC method.
    properties:
      validator:
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
        properties:
          commission:
            description: commission defines the commission parameters.
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                properties:
                  max_change_rate:
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
                    type: string
                  max_rate:
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                    type: string
                  rate:
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                    type: string
                type: object
              update_time:
                description: update_time is the last time the commission rate was changed.
                format: date-time
                type: string
            type: object
          consensus_pubkey:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          delegator_shares:
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
            type: string
          description:
            description: description defines the description terms for the validator.
            properties:
              details:
                description: details define other optional details.
                type: string
              identity:
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
                type: string
              moniker:
                description: moniker defines a human-readable name for the validator.
                type: string
              security_contact:
                description: >-
                  security_contact defines an optional email for security
                  contact.
                type: string
              website:
                description: website defines an optional website link.
                type: string
            type: object
          jailed:
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
            type: boolean
          min_self_delegation:
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.


              Since: cosmos-sdk 0.46
            type: string
          operator_address:
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
            type: string
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            default: BOND_STATUS_UNSPECIFIED
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            type: string
          tokens:
            description: tokens define the delegated tokens (incl. self-delegation).
            type: string
          unbonding_height:
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
            format: int64
            type: string
          unbonding_ids:
            items:
              format: uint64
              type: string
            title: >-
              list of unbonding ids, each uniquely identifing an unbonding of
              this validator
            type: array
          unbonding_on_hold_ref_count:
            format: int64
            title: >-
              strictly positive if this validator's unbonding has been stopped
              by external modules
            type: string
          unbonding_time:
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
            format: date-time
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
    description: |-
      QueryDelegatorValidatorsResponse is response type for the
      Query/DelegatorValidators RPC method.
    properties:
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      validators:
        description: validators defines the validators' info of a delegator.
        items:
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
          properties:
            commission:
              description: commission defines the commission parameters.
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  properties:
                    max_change_rate:
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                      type: string
                    max_rate:
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                      type: string
                    rate:
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                      type: string
                  type: object
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consensus_pubkey:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            delegator_shares:
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
              type: string
            description:
              description: description defines the description terms for the validator.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            jailed:
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
              type: boolean
            min_self_delegation:
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
              type: string
            operator_address:
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
              type: string
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              default: BOND_STATUS_UNSPECIFIED
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              type: string
            tokens:
              description: tokens define the delegated tokens (incl. self-delegation).
              type: string
            unbonding_height:
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
              format: int64
              type: string
            unbonding_ids:
              items:
                format: uint64
                type: string
              title: >-
                list of unbonding ids, each uniquely identifing an unbonding of
                this validator
              type: array
            unbonding_on_hold_ref_count:
              format: int64
              title: >-
                strictly positive if this validator's unbonding has been stopped
                by external modules
              type: string
            unbonding_time:
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
              format: date-time
              type: string
          type: object
        type: array
    type: object
  cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
    description: >-
      QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo
      RPC

      method.
    properties:
      hist:
        description: hist defines the historical info at the given height.
        properties:
          header:
            description: Header defines the structure of a block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                format: byte
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
          valset:
            items:
              description: >-
                Validator defines a validator, together with the total amount of
                the

                Validator's bond shares and their exchange rate to coins.
                Slashing results in

                a decrease in the exchange rate, allowing correct calculation of
                future

                undelegations without iterating over delegators. When coins are
                delegated to

                this validator, the validator is credited with a delegation
                whose number of

                bond shares is based on the amount of coins delegated divided by
                the current

                exchange rate. Voting power can be calculated as total bonded
                shares

                multiplied by exchange rate.
              properties:
                commission:
                  description: commission defines the commission parameters.
                  properties:
                    commission_rates:
                      description: >-
                        commission_rates defines the initial commission rates to
                        be used for creating a validator.
                      properties:
                        max_change_rate:
                          description: >-
                            max_change_rate defines the maximum daily increase
                            of the validator commission, as a fraction.
                          type: string
                        max_rate:
                          description: >-
                            max_rate defines the maximum commission rate which
                            validator can ever charge, as a fraction.
                          type: string
                        rate:
                          description: >-
                            rate is the commission rate charged to delegators,
                            as a fraction.
                          type: string
                      type: object
                    update_time:
                      description: >-
                        update_time is the last time the commission rate was
                        changed.
                      format: date-time
                      type: string
                  type: object
                consensus_pubkey:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                delegator_shares:
                  description: >-
                    delegator_shares defines total shares issued to a
                    validator's delegators.
                  type: string
                description:
                  description: description defines the description terms for the validator.
                  properties:
                    details:
                      description: details define other optional details.
                      type: string
                    identity:
                      description: >-
                        identity defines an optional identity signature (ex.
                        UPort or Keybase).
                      type: string
                    moniker:
                      description: moniker defines a human-readable name for the validator.
                      type: string
                    security_contact:
                      description: >-
                        security_contact defines an optional email for security
                        contact.
                      type: string
                    website:
                      description: website defines an optional website link.
                      type: string
                  type: object
                jailed:
                  description: >-
                    jailed defined whether the validator has been jailed from
                    bonded status or not.
                  type: boolean
                min_self_delegation:
                  description: >-
                    min_self_delegation is the validator's self declared minimum
                    self delegation.


                    Since: cosmos-sdk 0.46
                  type: string
                operator_address:
                  description: >-
                    operator_address defines the address of the validator's
                    operator; bech encoded in JSON.
                  type: string
                status:
                  description: status is the validator status (bonded/unbonding/unbonded).
                  default: BOND_STATUS_UNSPECIFIED
                  enum:
                    - BOND_STATUS_UNSPECIFIED
                    - BOND_STATUS_UNBONDED
                    - BOND_STATUS_UNBONDING
                    - BOND_STATUS_BONDED
                  type: string
                tokens:
                  description: tokens define the delegated tokens (incl. self-delegation).
                  type: string
                unbonding_height:
                  description: >-
                    unbonding_height defines, if unbonding, the height at which
                    this validator has begun unbonding.
                  format: int64
                  type: string
                unbonding_ids:
                  items:
                    format: uint64
                    type: string
                  title: >-
                    list of unbonding ids, each uniquely identifing an unbonding
                    of this validator
                  type: array
                unbonding_on_hold_ref_count:
                  format: int64
                  title: >-
                    strictly positive if this validator's unbonding has been
                    stopped by external modules
                  type: string
                unbonding_time:
                  description: >-
                    unbonding_time defines, if unbonding, the min time for the
                    validator to complete unbonding.
                  format: date-time
                  type: string
              type: object
            type: array
        type: object
    type: object
  cosmos.staking.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      params:
        description: params holds all the parameters of this module.
        properties:
          bond_denom:
            description: bond_denom defines the bondable coin denomination.
            type: string
          historical_entries:
            description: historical_entries is the number of historical entries to persist.
            format: int64
            type: integer
          max_entries:
            description: >-
              max_entries is the max entries for either unbonding delegation or
              redelegation (per pair/trio).
            format: int64
            type: integer
          max_validators:
            description: max_validators is the maximum number of validators.
            format: int64
            type: integer
          min_commission_rate:
            title: >-
              min_commission_rate is the chain-wide minimum commission rate that
              a validator can charge their delegators
            type: string
          unbonding_time:
            description: unbonding_time is the time duration of unbonding.
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.QueryPoolResponse:
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
    properties:
      pool:
        description: pool defines the pool info.
        properties:
          bonded_tokens:
            type: string
          not_bonded_tokens:
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.QueryRedelegationsResponse:
    description: >-
      QueryRedelegationsResponse is response type for the Query/Redelegations
      RPC

      method.
    properties:
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      redelegation_responses:
        items:
          description: >-
            RedelegationResponse is equivalent to a Redelegation except that its
            entries

            contain a balance in addition to shares which is more suitable for
            client

            responses.
          properties:
            entries:
              items:
                description: >-
                  RedelegationEntryResponse is equivalent to a RedelegationEntry
                  except that it

                  contains a balance in addition to shares which is more
                  suitable for client

                  responses.
                properties:
                  balance:
                    type: string
                  redelegation_entry:
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                    properties:
                      completion_time:
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                        format: date-time
                        type: string
                      creation_height:
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                        format: int64
                        type: string
                      initial_balance:
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                        type: string
                      shares_dst:
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                        type: string
                      unbonding_id:
                        format: uint64
                        title: Incrementing id that uniquely identifies this entry
                        type: string
                      unbonding_on_hold_ref_count:
                        format: int64
                        title: >-
                          Strictly positive if this entry's unbonding has been
                          stopped by external modules
                        type: string
                    type: object
                type: object
              type: array
            redelegation:
              description: >-
                Redelegation contains the list of a particular delegator's
                redelegating bonds

                from a particular source validator to a particular destination
                validator.
              properties:
                delegator_address:
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                  type: string
                entries:
                  description: entries are the redelegation entries.
                  items:
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                    properties:
                      completion_time:
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                        format: date-time
                        type: string
                      creation_height:
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                        format: int64
                        type: string
                      initial_balance:
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                        type: string
                      shares_dst:
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                        type: string
                      unbonding_id:
                        format: uint64
                        title: Incrementing id that uniquely identifies this entry
                        type: string
                      unbonding_on_hold_ref_count:
                        format: int64
                        title: >-
                          Strictly positive if this entry's unbonding has been
                          stopped by external modules
                        type: string
                    type: object
                  type: array
                validator_dst_address:
                  description: >-
                    validator_dst_address is the validator redelegation
                    destination operator address.
                  type: string
                validator_src_address:
                  description: >-
                    validator_src_address is the validator redelegation source
                    operator address.
                  type: string
              type: object
          type: object
        type: array
    type: object
  cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
    description: |-
      QueryDelegationResponse is response type for the Query/UnbondingDelegation
      RPC method.
    properties:
      unbond:
        description: |-
          UnbondingDelegation stores all of a single delegator's unbonding bonds
          for a single validator in an time-ordered list.
        properties:
          delegator_address:
            description: delegator_address is the encoded address of the delegator.
            type: string
          entries:
            description: entries are the unbonding delegation entries.
            items:
              description: >-
                UnbondingDelegationEntry defines an unbonding object with
                relevant metadata.
              properties:
                balance:
                  description: balance defines the tokens to receive at completion.
                  type: string
                completion_time:
                  description: completion_time is the unix time for unbonding completion.
                  format: date-time
                  type: string
                creation_height:
                  description: >-
                    creation_height is the height which the unbonding took
                    place.
                  format: int64
                  type: string
                initial_balance:
                  description: >-
                    initial_balance defines the tokens initially scheduled to
                    receive at completion.
                  type: string
                unbonding_id:
                  format: uint64
                  title: Incrementing id that uniquely identifies this entry
                  type: string
                unbonding_on_hold_ref_count:
                  format: int64
                  title: >-
                    Strictly positive if this entry's unbonding has been stopped
                    by external modules
                  type: string
              type: object
            type: array
          validator_address:
            description: validator_address is the encoded address of the validator.
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
    properties:
      delegation_responses:
        items:
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
          properties:
            balance:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            delegation:
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
              properties:
                delegator_address:
                  description: delegator_address is the encoded address of the delegator.
                  type: string
                shares:
                  description: shares define the delegation shares received.
                  type: string
                validator_address:
                  description: validator_address is the encoded address of the validator.
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: |-
      QueryValidatorDelegationsResponse is response type for the
      Query/ValidatorDelegations RPC method
    type: object
  cosmos.staking.v1beta1.QueryValidatorResponse:
    properties:
      validator:
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
        properties:
          commission:
            description: commission defines the commission parameters.
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                properties:
                  max_change_rate:
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
                    type: string
                  max_rate:
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                    type: string
                  rate:
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                    type: string
                type: object
              update_time:
                description: update_time is the last time the commission rate was changed.
                format: date-time
                type: string
            type: object
          consensus_pubkey:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          delegator_shares:
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
            type: string
          description:
            description: description defines the description terms for the validator.
            properties:
              details:
                description: details define other optional details.
                type: string
              identity:
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
                type: string
              moniker:
                description: moniker defines a human-readable name for the validator.
                type: string
              security_contact:
                description: >-
                  security_contact defines an optional email for security
                  contact.
                type: string
              website:
                description: website defines an optional website link.
                type: string
            type: object
          jailed:
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
            type: boolean
          min_self_delegation:
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.


              Since: cosmos-sdk 0.46
            type: string
          operator_address:
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
            type: string
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            default: BOND_STATUS_UNSPECIFIED
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            type: string
          tokens:
            description: tokens define the delegated tokens (incl. self-delegation).
            type: string
          unbonding_height:
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
            format: int64
            type: string
          unbonding_ids:
            items:
              format: uint64
              type: string
            title: >-
              list of unbonding ids, each uniquely identifing an unbonding of
              this validator
            type: array
          unbonding_on_hold_ref_count:
            format: int64
            title: >-
              strictly positive if this validator's unbonding has been stopped
              by external modules
            type: string
          unbonding_time:
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
            format: date-time
            type: string
        type: object
    title: QueryValidatorResponse is response type for the Query/Validator RPC method
    type: object
  cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
    description: |-
      QueryValidatorUnbondingDelegationsResponse is response type for the
      Query/ValidatorUnbondingDelegations RPC method.
    properties:
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      unbonding_responses:
        items:
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
          properties:
            delegator_address:
              description: delegator_address is the encoded address of the delegator.
              type: string
            entries:
              description: entries are the unbonding delegation entries.
              items:
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
                properties:
                  balance:
                    description: balance defines the tokens to receive at completion.
                    type: string
                  completion_time:
                    description: completion_time is the unix time for unbonding completion.
                    format: date-time
                    type: string
                  creation_height:
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                    format: int64
                    type: string
                  initial_balance:
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                    type: string
                  unbonding_id:
                    format: uint64
                    title: Incrementing id that uniquely identifies this entry
                    type: string
                  unbonding_on_hold_ref_count:
                    format: int64
                    title: >-
                      Strictly positive if this entry's unbonding has been
                      stopped by external modules
                    type: string
                type: object
              type: array
            validator_address:
              description: validator_address is the encoded address of the validator.
              type: string
          type: object
        type: array
    type: object
  cosmos.staking.v1beta1.QueryValidatorsResponse:
    properties:
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
      validators:
        description: validators contains all the queried validators.
        items:
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
          properties:
            commission:
              description: commission defines the commission parameters.
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  properties:
                    max_change_rate:
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                      type: string
                    max_rate:
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                      type: string
                    rate:
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                      type: string
                  type: object
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consensus_pubkey:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            delegator_shares:
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
              type: string
            description:
              description: description defines the description terms for the validator.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            jailed:
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
              type: boolean
            min_self_delegation:
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.


                Since: cosmos-sdk 0.46
              type: string
            operator_address:
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
              type: string
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              default: BOND_STATUS_UNSPECIFIED
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              type: string
            tokens:
              description: tokens define the delegated tokens (incl. self-delegation).
              type: string
            unbonding_height:
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
              format: int64
              type: string
            unbonding_ids:
              items:
                format: uint64
                type: string
              title: >-
                list of unbonding ids, each uniquely identifing an unbonding of
                this validator
              type: array
            unbonding_on_hold_ref_count:
              format: int64
              title: >-
                strictly positive if this validator's unbonding has been stopped
                by external modules
              type: string
            unbonding_time:
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
              format: date-time
              type: string
          type: object
        type: array
    title: >-
      QueryValidatorsResponse is response type for the Query/Validators RPC
      method
    type: object
  cosmos.staking.v1beta1.Redelegation:
    description: >-
      Redelegation contains the list of a particular delegator's redelegating
      bonds

      from a particular source validator to a particular destination validator.
    properties:
      delegator_address:
        description: delegator_address is the bech32-encoded address of the delegator.
        type: string
      entries:
        description: entries are the redelegation entries.
        items:
          description: >-
            RedelegationEntry defines a redelegation object with relevant
            metadata.
          properties:
            completion_time:
              description: >-
                completion_time defines the unix time for redelegation
                completion.
              format: date-time
              type: string
            creation_height:
              description: >-
                creation_height  defines the height which the redelegation took
                place.
              format: int64
              type: string
            initial_balance:
              description: >-
                initial_balance defines the initial balance when redelegation
                started.
              type: string
            shares_dst:
              description: >-
                shares_dst is the amount of destination-validator shares created
                by redelegation.
              type: string
            unbonding_id:
              format: uint64
              title: Incrementing id that uniquely identifies this entry
              type: string
            unbonding_on_hold_ref_count:
              format: int64
              title: >-
                Strictly positive if this entry's unbonding has been stopped by
                external modules
              type: string
          type: object
        type: array
      validator_dst_address:
        description: >-
          validator_dst_address is the validator redelegation destination
          operator address.
        type: string
      validator_src_address:
        description: >-
          validator_src_address is the validator redelegation source operator
          address.
        type: string
    type: object
  cosmos.staking.v1beta1.RedelegationEntry:
    description: RedelegationEntry defines a redelegation object with relevant metadata.
    properties:
      completion_time:
        description: completion_time defines the unix time for redelegation completion.
        format: date-time
        type: string
      creation_height:
        description: creation_height  defines the height which the redelegation took place.
        format: int64
        type: string
      initial_balance:
        description: initial_balance defines the initial balance when redelegation started.
        type: string
      shares_dst:
        description: >-
          shares_dst is the amount of destination-validator shares created by
          redelegation.
        type: string
      unbonding_id:
        format: uint64
        title: Incrementing id that uniquely identifies this entry
        type: string
      unbonding_on_hold_ref_count:
        format: int64
        title: >-
          Strictly positive if this entry's unbonding has been stopped by
          external modules
        type: string
    type: object
  cosmos.staking.v1beta1.RedelegationEntryResponse:
    description: >-
      RedelegationEntryResponse is equivalent to a RedelegationEntry except that
      it

      contains a balance in addition to shares which is more suitable for client

      responses.
    properties:
      balance:
        type: string
      redelegation_entry:
        description: >-
          RedelegationEntry defines a redelegation object with relevant
          metadata.
        properties:
          completion_time:
            description: completion_time defines the unix time for redelegation completion.
            format: date-time
            type: string
          creation_height:
            description: >-
              creation_height  defines the height which the redelegation took
              place.
            format: int64
            type: string
          initial_balance:
            description: >-
              initial_balance defines the initial balance when redelegation
              started.
            type: string
          shares_dst:
            description: >-
              shares_dst is the amount of destination-validator shares created
              by redelegation.
            type: string
          unbonding_id:
            format: uint64
            title: Incrementing id that uniquely identifies this entry
            type: string
          unbonding_on_hold_ref_count:
            format: int64
            title: >-
              Strictly positive if this entry's unbonding has been stopped by
              external modules
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.RedelegationResponse:
    description: >-
      RedelegationResponse is equivalent to a Redelegation except that its
      entries

      contain a balance in addition to shares which is more suitable for client

      responses.
    properties:
      entries:
        items:
          description: >-
            RedelegationEntryResponse is equivalent to a RedelegationEntry
            except that it

            contains a balance in addition to shares which is more suitable for
            client

            responses.
          properties:
            balance:
              type: string
            redelegation_entry:
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
              properties:
                completion_time:
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                  format: date-time
                  type: string
                creation_height:
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                  format: int64
                  type: string
                initial_balance:
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                  type: string
                shares_dst:
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
                  type: string
                unbonding_id:
                  format: uint64
                  title: Incrementing id that uniquely identifies this entry
                  type: string
                unbonding_on_hold_ref_count:
                  format: int64
                  title: >-
                    Strictly positive if this entry's unbonding has been stopped
                    by external modules
                  type: string
              type: object
          type: object
        type: array
      redelegation:
        description: >-
          Redelegation contains the list of a particular delegator's
          redelegating bonds

          from a particular source validator to a particular destination
          validator.
        properties:
          delegator_address:
            description: delegator_address is the bech32-encoded address of the delegator.
            type: string
          entries:
            description: entries are the redelegation entries.
            items:
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
              properties:
                completion_time:
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                  format: date-time
                  type: string
                creation_height:
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                  format: int64
                  type: string
                initial_balance:
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                  type: string
                shares_dst:
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
                  type: string
                unbonding_id:
                  format: uint64
                  title: Incrementing id that uniquely identifies this entry
                  type: string
                unbonding_on_hold_ref_count:
                  format: int64
                  title: >-
                    Strictly positive if this entry's unbonding has been stopped
                    by external modules
                  type: string
              type: object
            type: array
          validator_dst_address:
            description: >-
              validator_dst_address is the validator redelegation destination
              operator address.
            type: string
          validator_src_address:
            description: >-
              validator_src_address is the validator redelegation source
              operator address.
            type: string
        type: object
    type: object
  cosmos.staking.v1beta1.UnbondingDelegation:
    description: |-
      UnbondingDelegation stores all of a single delegator's unbonding bonds
      for a single validator in an time-ordered list.
    properties:
      delegator_address:
        description: delegator_address is the encoded address of the delegator.
        type: string
      entries:
        description: entries are the unbonding delegation entries.
        items:
          description: >-
            UnbondingDelegationEntry defines an unbonding object with relevant
            metadata.
          properties:
            balance:
              description: balance defines the tokens to receive at completion.
              type: string
            completion_time:
              description: completion_time is the unix time for unbonding completion.
              format: date-time
              type: string
            creation_height:
              description: creation_height is the height which the unbonding took place.
              format: int64
              type: string
            initial_balance:
              description: >-
                initial_balance defines the tokens initially scheduled to
                receive at completion.
              type: string
            unbonding_id:
              format: uint64
              title: Incrementing id that uniquely identifies this entry
              type: string
            unbonding_on_hold_ref_count:
              format: int64
              title: >-
                Strictly positive if this entry's unbonding has been stopped by
                external modules
              type: string
          type: object
        type: array
      validator_address:
        description: validator_address is the encoded address of the validator.
        type: string
    type: object
  cosmos.staking.v1beta1.UnbondingDelegationEntry:
    description: >-
      UnbondingDelegationEntry defines an unbonding object with relevant
      metadata.
    properties:
      balance:
        description: balance defines the tokens to receive at completion.
        type: string
      completion_time:
        description: completion_time is the unix time for unbonding completion.
        format: date-time
        type: string
      creation_height:
        description: creation_height is the height which the unbonding took place.
        format: int64
        type: string
      initial_balance:
        description: >-
          initial_balance defines the tokens initially scheduled to receive at
          completion.
        type: string
      unbonding_id:
        format: uint64
        title: Incrementing id that uniquely identifies this entry
        type: string
      unbonding_on_hold_ref_count:
        format: int64
        title: >-
          Strictly positive if this entry's unbonding has been stopped by
          external modules
        type: string
    type: object
  cosmos.staking.v1beta1.Validator:
    description: >-
      Validator defines a validator, together with the total amount of the

      Validator's bond shares and their exchange rate to coins. Slashing results
      in

      a decrease in the exchange rate, allowing correct calculation of future

      undelegations without iterating over delegators. When coins are delegated
      to

      this validator, the validator is credited with a delegation whose number
      of

      bond shares is based on the amount of coins delegated divided by the
      current

      exchange rate. Voting power can be calculated as total bonded shares

      multiplied by exchange rate.
    properties:
      commission:
        description: commission defines the commission parameters.
        properties:
          commission_rates:
            description: >-
              commission_rates defines the initial commission rates to be used
              for creating a validator.
            properties:
              max_change_rate:
                description: >-
                  max_change_rate defines the maximum daily increase of the
                  validator commission, as a fraction.
                type: string
              max_rate:
                description: >-
                  max_rate defines the maximum commission rate which validator
                  can ever charge, as a fraction.
                type: string
              rate:
                description: >-
                  rate is the commission rate charged to delegators, as a
                  fraction.
                type: string
            type: object
          update_time:
            description: update_time is the last time the commission rate was changed.
            format: date-time
            type: string
        type: object
      consensus_pubkey:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      delegator_shares:
        description: >-
          delegator_shares defines total shares issued to a validator's
          delegators.
        type: string
      description:
        description: description defines the description terms for the validator.
        properties:
          details:
            description: details define other optional details.
            type: string
          identity:
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
            type: string
          moniker:
            description: moniker defines a human-readable name for the validator.
            type: string
          security_contact:
            description: security_contact defines an optional email for security contact.
            type: string
          website:
            description: website defines an optional website link.
            type: string
        type: object
      jailed:
        description: >-
          jailed defined whether the validator has been jailed from bonded
          status or not.
        type: boolean
      min_self_delegation:
        description: >-
          min_self_delegation is the validator's self declared minimum self
          delegation.


          Since: cosmos-sdk 0.46
        type: string
      operator_address:
        description: >-
          operator_address defines the address of the validator's operator; bech
          encoded in JSON.
        type: string
      status:
        description: status is the validator status (bonded/unbonding/unbonded).
        default: BOND_STATUS_UNSPECIFIED
        enum:
          - BOND_STATUS_UNSPECIFIED
          - BOND_STATUS_UNBONDED
          - BOND_STATUS_UNBONDING
          - BOND_STATUS_BONDED
        type: string
      tokens:
        description: tokens define the delegated tokens (incl. self-delegation).
        type: string
      unbonding_height:
        description: >-
          unbonding_height defines, if unbonding, the height at which this
          validator has begun unbonding.
        format: int64
        type: string
      unbonding_ids:
        items:
          format: uint64
          type: string
        title: >-
          list of unbonding ids, each uniquely identifing an unbonding of this
          validator
        type: array
      unbonding_on_hold_ref_count:
        format: int64
        title: >-
          strictly positive if this validator's unbonding has been stopped by
          external modules
        type: string
      unbonding_time:
        description: >-
          unbonding_time defines, if unbonding, the min time for the validator
          to complete unbonding.
        format: date-time
        type: string
    type: object
  cosmos.upgrade.v1beta1.ModuleVersion:
    description: |-
      ModuleVersion specifies a module and its consensus version.

      Since: cosmos-sdk 0.43
    properties:
      name:
        title: name of the app module
        type: string
      version:
        format: uint64
        title: consensus version of the app module
        type: string
    type: object
  cosmos.upgrade.v1beta1.Plan:
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
    properties:
      height:
        description: The height at which the upgrade must be performed.
        format: int64
        type: string
      info:
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
        type: string
      name:
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
        type: string
      time:
        description: >-
          Deprecated: Time based upgrades have been deprecated. Time based
          upgrade logic

          has been removed from the SDK.

          If this field is not empty, an error will be thrown.
        format: date-time
        type: string
      upgraded_client_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
    type: object
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    description: >-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
      RPC

      method.
    properties:
      height:
        description: height is the block height at which the plan was applied.
        format: int64
        type: string
    type: object
  cosmos.upgrade.v1beta1.QueryAuthorityResponse:
    description: 'Since: cosmos-sdk 0.46'
    properties:
      address:
        type: string
    title: QueryAuthorityResponse is the response type for Query/Authority
    type: object
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    description: >-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
      RPC

      method.
    properties:
      plan:
        description: plan is the current upgrade plan.
        properties:
          height:
            description: The height at which the upgrade must be performed.
            format: int64
            type: string
          info:
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
            type: string
          name:
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
            type: string
          time:
            description: >-
              Deprecated: Time based upgrades have been deprecated. Time based
              upgrade logic

              has been removed from the SDK.

              If this field is not empty, an error will be thrown.
            format: date-time
            type: string
          upgraded_client_state:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
        type: object
    type: object
  cosmos.upgrade.v1beta1.QueryModuleVersionsResponse:
    description: >-
      QueryModuleVersionsResponse is the response type for the
      Query/ModuleVersions

      RPC method.


      Since: cosmos-sdk 0.43
    properties:
      module_versions:
        description: >-
          module_versions is a list of module names with their consensus
          versions.
        items:
          description: |-
            ModuleVersion specifies a module and its consensus version.

            Since: cosmos-sdk 0.43
          properties:
            name:
              title: name of the app module
              type: string
            version:
              format: uint64
              title: consensus version of the app module
              type: string
          type: object
        type: array
    type: object
  cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
    description: >-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState

      RPC method.
    properties:
      upgraded_consensus_state:
        format: byte
        title: 'Since: cosmos-sdk 0.43'
        type: string
    type: object
  cosmwasm.wasm.v1.AbsoluteTxPosition:
    description: |-
      AbsoluteTxPosition is a unique transaction position that allows for global
      ordering of transactions.
    properties:
      block_height:
        format: uint64
        title: BlockHeight is the block the contract was created at
        type: string
      tx_index:
        format: uint64
        title: >-
          TxIndex is a monotonic counter within the block (actual transaction
          index,

          or gas consumed)
        type: string
    type: object
  cosmwasm.wasm.v1.AccessConfig:
    description: AccessConfig access control type.
    properties:
      addresses:
        items:
          type: string
        type: array
      permission:
        default: ACCESS_TYPE_UNSPECIFIED
        description: >-
          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
          value
           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
        enum:
          - ACCESS_TYPE_UNSPECIFIED
          - ACCESS_TYPE_NOBODY
          - ACCESS_TYPE_EVERYBODY
          - ACCESS_TYPE_ANY_OF_ADDRESSES
        title: AccessType permission types
        type: string
    type: object
  cosmwasm.wasm.v1.AccessType:
    default: ACCESS_TYPE_UNSPECIFIED
    description: >-
      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
      value
       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
       - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
    enum:
      - ACCESS_TYPE_UNSPECIFIED
      - ACCESS_TYPE_NOBODY
      - ACCESS_TYPE_EVERYBODY
      - ACCESS_TYPE_ANY_OF_ADDRESSES
    title: AccessType permission types
    type: string
  cosmwasm.wasm.v1.CodeInfoResponse:
    properties:
      code_id:
        format: uint64
        type: string
      creator:
        type: string
      data_hash:
        format: byte
        type: string
      instantiate_permission:
        description: AccessConfig access control type.
        properties:
          addresses:
            items:
              type: string
            type: array
          permission:
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            title: AccessType permission types
            type: string
        type: object
    title: CodeInfoResponse contains code meta data from CodeInfo
    type: object
  cosmwasm.wasm.v1.ContractCodeHistoryEntry:
    description: ContractCodeHistoryEntry metadata to a contract.
    properties:
      code_id:
        format: uint64
        title: CodeID is the reference to the stored WASM code
        type: string
      msg:
        format: byte
        type: string
      operation:
        default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
        description: >-
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
          ContractCodeHistoryOperationTypeUnspecified placeholder for empty
          value
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
        enum:
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
        title: ContractCodeHistoryOperationType actions that caused a code change
        type: string
      updated:
        description: Updated Tx position when the operation was executed.
        properties:
          block_height:
            format: uint64
            title: BlockHeight is the block the contract was created at
            type: string
          tx_index:
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
            type: string
        type: object
    type: object
  cosmwasm.wasm.v1.ContractCodeHistoryOperationType:
    default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
    description: >-
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
      ContractCodeHistoryOperationTypeUnspecified placeholder for empty value
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
    enum:
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
    title: ContractCodeHistoryOperationType actions that caused a code change
    type: string
  cosmwasm.wasm.v1.ContractInfo:
    properties:
      admin:
        title: Admin is an optional address that can execute migrations
        type: string
      code_id:
        format: uint64
        title: CodeID is the reference to the stored Wasm code
        type: string
      created:
        description: Created Tx position when the contract was instantiated.
        properties:
          block_height:
            format: uint64
            title: BlockHeight is the block the contract was created at
            type: string
          tx_index:
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
            type: string
        type: object
      creator:
        title: Creator address who initially instantiated the contract
        type: string
      extension:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      ibc_port_id:
        type: string
      label:
        description: Label is optional metadata to be stored with a contract instance.
        type: string
    title: ContractInfo stores a WASM contract instance
    type: object
  cosmwasm.wasm.v1.Model:
    properties:
      key:
        format: byte
        title: hex-encode key to read it better (this is often ascii)
        type: string
      value:
        format: byte
        title: base64-encode raw value
        type: string
    title: Model is a struct that holds a KV pair
    type: object
  cosmwasm.wasm.v1.Params:
    description: Params defines the set of wasm parameters.
    properties:
      code_upload_access:
        description: AccessConfig access control type.
        properties:
          addresses:
            items:
              type: string
            type: array
          permission:
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            title: AccessType permission types
            type: string
        type: object
      instantiate_default_permission:
        default: ACCESS_TYPE_UNSPECIFIED
        description: >-
          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
          value
           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
        enum:
          - ACCESS_TYPE_UNSPECIFIED
          - ACCESS_TYPE_NOBODY
          - ACCESS_TYPE_EVERYBODY
          - ACCESS_TYPE_ANY_OF_ADDRESSES
        title: AccessType permission types
        type: string
    type: object
  cosmwasm.wasm.v1.QueryAllContractStateResponse:
    properties:
      models:
        items:
          properties:
            key:
              format: byte
              title: hex-encode key to read it better (this is often ascii)
              type: string
            value:
              format: byte
              title: base64-encode raw value
              type: string
          title: Model is a struct that holds a KV pair
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: |-
      QueryAllContractStateResponse is the response type for the
      Query/AllContractState RPC method
    type: object
  cosmwasm.wasm.v1.QueryBuildAddressResponse:
    description: >-
      QueryBuildAddressResponse is the response type for the Query/BuildAddress
      RPC

      method.
    properties:
      address:
        title: Address is the contract address
        type: string
    type: object
  cosmwasm.wasm.v1.QueryCodeResponse:
    properties:
      code_info:
        properties:
          code_id:
            format: uint64
            type: string
          creator:
            type: string
          data_hash:
            format: byte
            type: string
          instantiate_permission:
            description: AccessConfig access control type.
            properties:
              addresses:
                items:
                  type: string
                type: array
              permission:
                default: ACCESS_TYPE_UNSPECIFIED
                description: >-
                  - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                  for empty value
                   - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                   - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                   - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                enum:
                  - ACCESS_TYPE_UNSPECIFIED
                  - ACCESS_TYPE_NOBODY
                  - ACCESS_TYPE_EVERYBODY
                  - ACCESS_TYPE_ANY_OF_ADDRESSES
                title: AccessType permission types
                type: string
            type: object
        title: CodeInfoResponse contains code meta data from CodeInfo
        type: object
      data:
        format: byte
        type: string
    title: QueryCodeResponse is the response type for the Query/Code RPC method
    type: object
  cosmwasm.wasm.v1.QueryCodesResponse:
    properties:
      code_infos:
        items:
          properties:
            code_id:
              format: uint64
              type: string
            creator:
              type: string
            data_hash:
              format: byte
              type: string
            instantiate_permission:
              description: AccessConfig access control type.
              properties:
                addresses:
                  items:
                    type: string
                  type: array
                permission:
                  default: ACCESS_TYPE_UNSPECIFIED
                  description: >-
                    - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                    for empty value
                     - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                     - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                     - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                  enum:
                    - ACCESS_TYPE_UNSPECIFIED
                    - ACCESS_TYPE_NOBODY
                    - ACCESS_TYPE_EVERYBODY
                    - ACCESS_TYPE_ANY_OF_ADDRESSES
                  title: AccessType permission types
                  type: string
              type: object
          title: CodeInfoResponse contains code meta data from CodeInfo
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: QueryCodesResponse is the response type for the Query/Codes RPC method
    type: object
  cosmwasm.wasm.v1.QueryContractHistoryResponse:
    properties:
      entries:
        items:
          description: ContractCodeHistoryEntry metadata to a contract.
          properties:
            code_id:
              format: uint64
              title: CodeID is the reference to the stored WASM code
              type: string
            msg:
              format: byte
              type: string
            operation:
              default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
              description: >-
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                ContractCodeHistoryOperationTypeUnspecified placeholder for
                empty value
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
              enum:
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
              title: >-
                ContractCodeHistoryOperationType actions that caused a code
                change
              type: string
            updated:
              description: Updated Tx position when the operation was executed.
              properties:
                block_height:
                  format: uint64
                  title: BlockHeight is the block the contract was created at
                  type: string
                tx_index:
                  format: uint64
                  title: >-
                    TxIndex is a monotonic counter within the block (actual
                    transaction index,

                    or gas consumed)
                  type: string
              type: object
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: |-
      QueryContractHistoryResponse is the response type for the
      Query/ContractHistory RPC method
    type: object
  cosmwasm.wasm.v1.QueryContractInfoResponse:
    properties:
      address:
        title: address is the address of the contract
        type: string
      contract_info:
        properties:
          admin:
            title: Admin is an optional address that can execute migrations
            type: string
          code_id:
            format: uint64
            title: CodeID is the reference to the stored Wasm code
            type: string
          created:
            description: Created Tx position when the contract was instantiated.
            properties:
              block_height:
                format: uint64
                title: BlockHeight is the block the contract was created at
                type: string
              tx_index:
                format: uint64
                title: >-
                  TxIndex is a monotonic counter within the block (actual
                  transaction index,

                  or gas consumed)
                type: string
            type: object
          creator:
            title: Creator address who initially instantiated the contract
            type: string
          extension:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          ibc_port_id:
            type: string
          label:
            description: Label is optional metadata to be stored with a contract instance.
            type: string
        title: ContractInfo stores a WASM contract instance
        type: object
    title: >-
      QueryContractInfoResponse is the response type for the Query/ContractInfo
      RPC

      method
    type: object
  cosmwasm.wasm.v1.QueryContractsByCodeResponse:
    properties:
      contracts:
        items:
          type: string
        title: contracts are a set of contract addresses
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: |-
      QueryContractsByCodeResponse is the response type for the
      Query/ContractsByCode RPC method
    type: object
  cosmwasm.wasm.v1.QueryContractsByCreatorResponse:
    description: |-
      QueryContractsByCreatorResponse is the response type for the
      Query/ContractsByCreator RPC method.
    properties:
      contract_addresses:
        items:
          type: string
        title: ContractAddresses result set
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  cosmwasm.wasm.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          code_upload_access:
            description: AccessConfig access control type.
            properties:
              addresses:
                items:
                  type: string
                type: array
              permission:
                default: ACCESS_TYPE_UNSPECIFIED
                description: >-
                  - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                  for empty value
                   - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                   - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                   - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                enum:
                  - ACCESS_TYPE_UNSPECIFIED
                  - ACCESS_TYPE_NOBODY
                  - ACCESS_TYPE_EVERYBODY
                  - ACCESS_TYPE_ANY_OF_ADDRESSES
                title: AccessType permission types
                type: string
            type: object
          instantiate_default_permission:
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            title: AccessType permission types
            type: string
        type: object
    type: object
  cosmwasm.wasm.v1.QueryPinnedCodesResponse:
    properties:
      code_ids:
        items:
          format: uint64
          type: string
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: |-
      QueryPinnedCodesResponse is the response type for the
      Query/PinnedCodes RPC method
    type: object
  cosmwasm.wasm.v1.QueryRawContractStateResponse:
    properties:
      data:
        format: byte
        title: Data contains the raw store data
        type: string
    title: |-
      QueryRawContractStateResponse is the response type for the
      Query/RawContractState RPC method
    type: object
  cosmwasm.wasm.v1.QuerySmartContractStateResponse:
    properties:
      data:
        format: byte
        title: Data contains the json data returned from the smart contract
        type: string
    title: |-
      QuerySmartContractStateResponse is the response type for the
      Query/SmartContractState RPC method
    type: object
  google.protobuf.Any:
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".


      JSON


      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    properties:
      type_url:
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
        type: string
      value:
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
        format: byte
        type: string
    type: object
  grpc.gateway.runtime.Error:
    properties:
      code:
        format: int32
        type: integer
      details:
        items:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  ibc.applications.fee.v1.Fee:
    properties:
      ack_fee:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the packet acknowledgement fee
        type: array
      recv_fee:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the packet receive fee
        type: array
      timeout_fee:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the packet timeout fee
        type: array
    title: Fee defines the ICS29 receive, acknowledgement and timeout fees
    type: object
  ibc.applications.fee.v1.FeeEnabledChannel:
    properties:
      channel_id:
        title: unique channel identifier
        type: string
      port_id:
        title: unique port identifier
        type: string
    title: >-
      FeeEnabledChannel contains the PortID & ChannelID for a fee enabled
      channel
    type: object
  ibc.applications.fee.v1.IdentifiedPacketFees:
    properties:
      packet_fees:
        items:
          properties:
            fee:
              title: >-
                fee encapsulates the recv, ack and timeout fees associated with
                an IBC packet
              properties:
                ack_fee:
                  items:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  title: the packet acknowledgement fee
                  type: array
                recv_fee:
                  items:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  title: the packet receive fee
                  type: array
                timeout_fee:
                  items:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  title: the packet timeout fee
                  type: array
              type: object
            refund_address:
              title: the refund address for unspent fees
              type: string
            relayers:
              items:
                type: string
              title: optional list of relayers permitted to receive fees
              type: array
          title: >-
            PacketFee contains ICS29 relayer fees, refund address and optional
            list of permitted relayers
          type: object
        title: list of packet fees
        type: array
      packet_id:
        title: >-
          unique packet identifier comprised of the channel ID, port ID and
          sequence
        properties:
          channel_id:
            title: channel unique identifier
            type: string
          port_id:
            title: channel port identifier
            type: string
          sequence:
            format: uint64
            title: packet sequence
            type: string
        type: object
    title: >-
      IdentifiedPacketFees contains a list of type PacketFee and associated
      PacketId
    type: object
  ibc.applications.fee.v1.PacketFee:
    properties:
      fee:
        title: >-
          fee encapsulates the recv, ack and timeout fees associated with an IBC
          packet
        properties:
          ack_fee:
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            title: the packet acknowledgement fee
            type: array
          recv_fee:
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            title: the packet receive fee
            type: array
          timeout_fee:
            items:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            title: the packet timeout fee
            type: array
        type: object
      refund_address:
        title: the refund address for unspent fees
        type: string
      relayers:
        items:
          type: string
        title: optional list of relayers permitted to receive fees
        type: array
    title: >-
      PacketFee contains ICS29 relayer fees, refund address and optional list of
      permitted relayers
    type: object
  ibc.applications.fee.v1.QueryCounterpartyPayeeResponse:
    properties:
      counterparty_payee:
        title: the counterparty payee address used to compensate forward relaying
        type: string
    title: >-
      QueryCounterpartyPayeeResponse defines the response type for the
      CounterpartyPayee rpc
    type: object
  ibc.applications.fee.v1.QueryFeeEnabledChannelResponse:
    properties:
      fee_enabled:
        title: boolean flag representing the fee enabled channel status
        type: boolean
    title: >-
      QueryFeeEnabledChannelResponse defines the response type for the
      FeeEnabledChannel rpc
    type: object
  ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse:
    properties:
      fee_enabled_channels:
        items:
          properties:
            channel_id:
              title: unique channel identifier
              type: string
            port_id:
              title: unique port identifier
              type: string
          title: >-
            FeeEnabledChannel contains the PortID & ChannelID for a fee enabled
            channel
          type: object
        title: list of fee enabled channels
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: >-
      QueryFeeEnabledChannelsResponse defines the response type for the
      FeeEnabledChannels rpc
    type: object
  ibc.applications.fee.v1.QueryIncentivizedPacketResponse:
    properties:
      incentivized_packet:
        title: the identified fees for the incentivized packet
        properties:
          packet_fees:
            items:
              properties:
                fee:
                  title: >-
                    fee encapsulates the recv, ack and timeout fees associated
                    with an IBC packet
                  properties:
                    ack_fee:
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      title: the packet acknowledgement fee
                      type: array
                    recv_fee:
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      title: the packet receive fee
                      type: array
                    timeout_fee:
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      title: the packet timeout fee
                      type: array
                  type: object
                refund_address:
                  title: the refund address for unspent fees
                  type: string
                relayers:
                  items:
                    type: string
                  title: optional list of relayers permitted to receive fees
                  type: array
              title: >-
                PacketFee contains ICS29 relayer fees, refund address and
                optional list of permitted relayers
              type: object
            title: list of packet fees
            type: array
          packet_id:
            title: >-
              unique packet identifier comprised of the channel ID, port ID and
              sequence
            properties:
              channel_id:
                title: channel unique identifier
                type: string
              port_id:
                title: channel port identifier
                type: string
              sequence:
                format: uint64
                title: packet sequence
                type: string
            type: object
        type: object
    title: >-
      QueryIncentivizedPacketsResponse defines the response type for the
      IncentivizedPacket rpc
    type: object
  ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse:
    properties:
      incentivized_packets:
        items:
          properties:
            packet_fees:
              items:
                properties:
                  fee:
                    title: >-
                      fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    properties:
                      ack_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet acknowledgement fee
                        type: array
                      recv_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet receive fee
                        type: array
                      timeout_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet timeout fee
                        type: array
                    type: object
                  refund_address:
                    title: the refund address for unspent fees
                    type: string
                  relayers:
                    items:
                      type: string
                    title: optional list of relayers permitted to receive fees
                    type: array
                title: >-
                  PacketFee contains ICS29 relayer fees, refund address and
                  optional list of permitted relayers
                type: object
              title: list of packet fees
              type: array
            packet_id:
              title: >-
                unique packet identifier comprised of the channel ID, port ID
                and sequence
              properties:
                channel_id:
                  title: channel unique identifier
                  type: string
                port_id:
                  title: channel port identifier
                  type: string
                sequence:
                  format: uint64
                  title: packet sequence
                  type: string
              type: object
          title: >-
            IdentifiedPacketFees contains a list of type PacketFee and
            associated PacketId
          type: object
        title: Map of all incentivized_packets
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: >-
      QueryIncentivizedPacketsResponse defines the response type for the
      incentivized packets RPC
    type: object
  ibc.applications.fee.v1.QueryIncentivizedPacketsResponse:
    properties:
      incentivized_packets:
        items:
          properties:
            packet_fees:
              items:
                properties:
                  fee:
                    title: >-
                      fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    properties:
                      ack_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet acknowledgement fee
                        type: array
                      recv_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet receive fee
                        type: array
                      timeout_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet timeout fee
                        type: array
                    type: object
                  refund_address:
                    title: the refund address for unspent fees
                    type: string
                  relayers:
                    items:
                      type: string
                    title: optional list of relayers permitted to receive fees
                    type: array
                title: >-
                  PacketFee contains ICS29 relayer fees, refund address and
                  optional list of permitted relayers
                type: object
              title: list of packet fees
              type: array
            packet_id:
              title: >-
                unique packet identifier comprised of the channel ID, port ID
                and sequence
              properties:
                channel_id:
                  title: channel unique identifier
                  type: string
                port_id:
                  title: channel port identifier
                  type: string
                sequence:
                  format: uint64
                  title: packet sequence
                  type: string
              type: object
          title: >-
            IdentifiedPacketFees contains a list of type PacketFee and
            associated PacketId
          type: object
        title: list of identified fees for incentivized packets
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    title: >-
      QueryIncentivizedPacketsResponse defines the response type for the
      IncentivizedPackets rpc
    type: object
  ibc.applications.fee.v1.QueryPayeeResponse:
    properties:
      payee_address:
        title: the payee address to which packet fees are paid out
        type: string
    title: QueryPayeeResponse defines the response type for the Payee rpc
    type: object
  ibc.applications.fee.v1.QueryTotalAckFeesResponse:
    properties:
      ack_fees:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the total packet acknowledgement fees
        type: array
    title: >-
      QueryTotalAckFeesResponse defines the response type for the TotalAckFees
      rpc
    type: object
  ibc.applications.fee.v1.QueryTotalRecvFeesResponse:
    properties:
      recv_fees:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the total packet receive fees
        type: array
    title: >-
      QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees
      rpc
    type: object
  ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse:
    properties:
      timeout_fees:
        items:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        title: the total packet timeout fees
        type: array
    title: >-
      QueryTotalTimeoutFeesResponse defines the response type for the
      TotalTimeoutFees rpc
    type: object
  ibc.applications.interchain_accounts.controller.v1.Params:
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the controller submodule.
    properties:
      controller_enabled:
        description: controller_enabled enables or disables the controller submodule.
        type: boolean
    type: object
  ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountResponse:
    description: >-
      QueryInterchainAccountResponse the response type for the
      Query/InterchainAccount RPC method.
    properties:
      address:
        type: string
    type: object
  ibc.applications.interchain_accounts.controller.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          controller_enabled:
            description: controller_enabled enables or disables the controller submodule.
            type: boolean
        type: object
    type: object
  ibc.applications.interchain_accounts.host.v1.Params:
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the host submodule.
    properties:
      allow_messages:
        description: >-
          allow_messages defines a list of sdk message typeURLs allowed to be
          executed on a host chain.
        items:
          type: string
        type: array
      host_enabled:
        description: host_enabled enables or disables the host submodule.
        type: boolean
    type: object
  ibc.applications.interchain_accounts.host.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          allow_messages:
            description: >-
              allow_messages defines a list of sdk message typeURLs allowed to
              be executed on a host chain.
            items:
              type: string
            type: array
          host_enabled:
            description: host_enabled enables or disables the host submodule.
            type: boolean
        type: object
    type: object
  ibc.applications.transfer.v1.DenomTrace:
    description: >-
      DenomTrace contains the base denomination for ICS20 fungible tokens and
      the

      source tracing information path.
    properties:
      base_denom:
        description: base denomination of the relayed fungible token.
        type: string
      path:
        description: >-
          path defines the chain of port/channel identifiers used for tracing
          the

          source of the fungible token.
        type: string
    type: object
  ibc.applications.transfer.v1.Params:
    description: >-
      Params defines the set of IBC transfer parameters.

      NOTE: To prevent a single token from being transferred, set the

      TransfersEnabled parameter to true and then set the bank module's
      SendEnabled

      parameter for the denomination to false.
    properties:
      receive_enabled:
        description: >-
          receive_enabled enables or disables all cross-chain token transfers to
          this

          chain.
        type: boolean
      send_enabled:
        description: >-
          send_enabled enables or disables all cross-chain token transfers from
          this

          chain.
        type: boolean
    type: object
  ibc.applications.transfer.v1.QueryDenomHashResponse:
    description: |-
      QueryDenomHashResponse is the response type for the Query/DenomHash RPC
      method.
    properties:
      hash:
        description: hash (in hex format) of the denomination trace information.
        type: string
    type: object
  ibc.applications.transfer.v1.QueryDenomTraceResponse:
    description: |-
      QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
      method.
    properties:
      denom_trace:
        description: denom_trace returns the requested denomination trace information.
        properties:
          base_denom:
            description: base denomination of the relayed fungible token.
            type: string
          path:
            description: >-
              path defines the chain of port/channel identifiers used for
              tracing the

              source of the fungible token.
            type: string
        type: object
    type: object
  ibc.applications.transfer.v1.QueryDenomTracesResponse:
    description: >-
      QueryConnectionsResponse is the response type for the Query/DenomTraces
      RPC

      method.
    properties:
      denom_traces:
        description: denom_traces returns all denominations trace information.
        items:
          description: >-
            DenomTrace contains the base denomination for ICS20 fungible tokens
            and the

            source tracing information path.
          properties:
            base_denom:
              description: base denomination of the relayed fungible token.
              type: string
            path:
              description: >-
                path defines the chain of port/channel identifiers used for
                tracing the

                source of the fungible token.
              type: string
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  ibc.applications.transfer.v1.QueryEscrowAddressResponse:
    description: >-
      QueryEscrowAddressResponse is the response type of the EscrowAddress RPC
      method.
    properties:
      escrow_address:
        title: the escrow account address
        type: string
    type: object
  ibc.applications.transfer.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          receive_enabled:
            description: >-
              receive_enabled enables or disables all cross-chain token
              transfers to this

              chain.
            type: boolean
          send_enabled:
            description: >-
              send_enabled enables or disables all cross-chain token transfers
              from this

              chain.
            type: boolean
        type: object
    type: object
  ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse:
    description: >-
      QueryTotalEscrowForDenomResponse is the response type for
      TotalEscrowForDenom RPC method.
    properties:
      amount:
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        properties:
          amount:
            type: string
          denom:
            type: string
        type: object
    type: object
  ibc.core.channel.v1.Channel:
    description: |-
      Channel defines pipeline for exactly-once packet delivery between specific
      modules on separate blockchains, which has at least one end capable of
      sending packets and one end capable of receiving packets.
    properties:
      connection_hops:
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
        type: array
      counterparty:
        title: counterparty channel end
        properties:
          channel_id:
            title: channel end on the counterparty chain
            type: string
          port_id:
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
            type: string
        type: object
      ordering:
        title: whether the channel is ordered or unordered
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        type: string
      state:
        title: current state of the channel end
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
           - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
           - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
          - STATE_FLUSHING
          - STATE_FLUSHCOMPLETE
        type: string
      upgrade_sequence:
        format: uint64
        title: >-
          upgrade sequence indicates the latest upgrade attempt performed by
          this channel

          the value of 0 indicates the channel has never been upgraded
        type: string
      version:
        title: opaque channel version, which is agreed upon during the handshake
        type: string
    type: object
  ibc.core.channel.v1.Counterparty:
    properties:
      channel_id:
        title: channel end on the counterparty chain
        type: string
      port_id:
        description: >-
          port on the counterparty chain which owns the other end of the
          channel.
        type: string
    title: Counterparty defines a channel end counterparty
    type: object
  ibc.core.channel.v1.ErrorReceipt:
    description: >-
      ErrorReceipt defines a type which encapsulates the upgrade sequence and
      error associated with the

      upgrade handshake failure. When a channel upgrade handshake is aborted
      both chains are expected to increment to the

      next sequence.
    properties:
      message:
        title: the error message detailing the cause of failure
        type: string
      sequence:
        format: uint64
        title: the channel upgrade sequence
        type: string
    type: object
  ibc.core.channel.v1.IdentifiedChannel:
    description: |-
      IdentifiedChannel defines a channel with additional port and channel
      identifier fields.
    properties:
      channel_id:
        title: channel identifier
        type: string
      connection_hops:
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
        type: array
      counterparty:
        title: counterparty channel end
        properties:
          channel_id:
            title: channel end on the counterparty chain
            type: string
          port_id:
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
            type: string
        type: object
      ordering:
        title: whether the channel is ordered or unordered
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        type: string
      port_id:
        title: port identifier
        type: string
      state:
        title: current state of the channel end
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
           - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
           - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
          - STATE_FLUSHING
          - STATE_FLUSHCOMPLETE
        type: string
      upgrade_sequence:
        format: uint64
        title: >-
          upgrade sequence indicates the latest upgrade attempt performed by
          this channel

          the value of 0 indicates the channel has never been upgraded
        type: string
      version:
        title: opaque channel version, which is agreed upon during the handshake
        type: string
    type: object
  ibc.core.channel.v1.Order:
    default: ORDER_NONE_UNSPECIFIED
    description: |-
      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
      which they were sent.
       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    title: Order defines if a channel is ORDERED or UNORDERED
    type: string
  ibc.core.channel.v1.PacketId:
    properties:
      channel_id:
        title: channel unique identifier
        type: string
      port_id:
        title: channel port identifier
        type: string
      sequence:
        format: uint64
        title: packet sequence
        type: string
    title: |-
      PacketId is an identifer for a unique Packet
      Source chains refer to packets by source port/channel
      Destination chains refer to packets by destination port/channel
    type: object
  ibc.core.channel.v1.PacketState:
    description: |-
      PacketState defines the generic type necessary to retrieve and store
      packet commitments, acknowledgements, and receipts.
      Caller is responsible for knowing the context necessary to interpret this
      state as a commitment, acknowledgement, or a receipt.
    properties:
      channel_id:
        description: channel unique identifier.
        type: string
      data:
        description: embedded data that represents packet state.
        format: byte
        type: string
      port_id:
        description: channel port identifier.
        type: string
      sequence:
        description: packet sequence.
        format: uint64
        type: string
    type: object
  ibc.core.channel.v1.Params:
    description: Params defines the set of IBC channel parameters.
    properties:
      upgrade_timeout:
        description: the relative timeout after which channel upgrades will time out.
        properties:
          height:
            title: block height after which the packet or upgrade times out
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
            properties:
              revision_height:
                format: uint64
                title: the height within the given revision
                type: string
              revision_number:
                format: uint64
                title: the revision that the client is currently on
                type: string
            type: object
          timestamp:
            format: uint64
            title: >-
              block timestamp (in nanoseconds) after which the packet or upgrade
              times out
            type: string
        type: object
    type: object
  ibc.core.channel.v1.QueryChannelClientStateResponse:
    properties:
      identified_client_state:
        title: client state associated with the channel
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
        properties:
          client_id:
            title: client identifier
            type: string
          client_state:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
            title: client state
        type: object
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
    type: object
  ibc.core.channel.v1.QueryChannelConsensusStateResponse:
    properties:
      client_id:
        title: client ID associated with the consensus state
        type: string
      consensus_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: consensus state associated with the channel
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
    type: object
  ibc.core.channel.v1.QueryChannelParamsResponse:
    description: >-
      QueryChannelParamsResponse is the response type for the
      Query/ChannelParams RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          upgrade_timeout:
            description: the relative timeout after which channel upgrades will time out.
            properties:
              height:
                title: block height after which the packet or upgrade times out
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              timestamp:
                format: uint64
                title: >-
                  block timestamp (in nanoseconds) after which the packet or
                  upgrade times out
                type: string
            type: object
        type: object
    type: object
  ibc.core.channel.v1.QueryChannelResponse:
    description: >-
      QueryChannelResponse is the response type for the Query/Channel RPC
      method.

      Besides the Channel end, it includes a proof and the height from which the

      proof was retrieved.
    properties:
      channel:
        title: channel associated with the request identifiers
        description: >-
          Channel defines pipeline for exactly-once packet delivery between
          specific

          modules on separate blockchains, which has at least one end capable of

          sending packets and one end capable of receiving packets.
        properties:
          connection_hops:
            items:
              type: string
            title: >-
              list of connection identifiers, in order, along which packets sent
              on

              this channel will travel
            type: array
          counterparty:
            title: counterparty channel end
            properties:
              channel_id:
                title: channel end on the counterparty chain
                type: string
              port_id:
                description: >-
                  port on the counterparty chain which owns the other end of the
                  channel.
                type: string
            type: object
          ordering:
            title: whether the channel is ordered or unordered
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            type: string
          state:
            title: current state of the channel end
            default: STATE_UNINITIALIZED_UNSPECIFIED
            description: >-
              State defines if a channel is in one of the following states:

              CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
              UNINITIALIZED.

               - STATE_UNINITIALIZED_UNSPECIFIED: Default State
               - STATE_INIT: A channel has just started the opening handshake.
               - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
               - STATE_OPEN: A channel has completed the handshake. Open channels are
              ready to send and receive packets.
               - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
              packets.
               - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
               - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
              - STATE_FLUSHING
              - STATE_FLUSHCOMPLETE
            type: string
          upgrade_sequence:
            format: uint64
            title: >-
              upgrade sequence indicates the latest upgrade attempt performed by
              this channel

              the value of 0 indicates the channel has never been upgraded
            type: string
          version:
            title: opaque channel version, which is agreed upon during the handshake
            type: string
        type: object
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    type: object
  ibc.core.channel.v1.QueryChannelsResponse:
    description: >-
      QueryChannelsResponse is the response type for the Query/Channels RPC
      method.
    properties:
      channels:
        description: list of stored channels of the chain.
        items:
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
          properties:
            channel_id:
              title: channel identifier
              type: string
            connection_hops:
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
              type: array
            counterparty:
              title: counterparty channel end
              properties:
                channel_id:
                  title: channel end on the counterparty chain
                  type: string
                port_id:
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                  type: string
              type: object
            ordering:
              title: whether the channel is ordered or unordered
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              type: string
            port_id:
              title: port identifier
              type: string
            state:
              title: current state of the channel end
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: >-
                State defines if a channel is in one of the following states:

                CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
                UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
                 - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
                 - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
                - STATE_FLUSHING
                - STATE_FLUSHCOMPLETE
              type: string
            upgrade_sequence:
              format: uint64
              title: >-
                upgrade sequence indicates the latest upgrade attempt performed
                by this channel

                the value of 0 indicates the channel has never been upgraded
              type: string
            version:
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
              type: string
          type: object
        type: array
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    type: object
  ibc.core.channel.v1.QueryConnectionChannelsResponse:
    properties:
      channels:
        description: list of channels associated with a connection.
        items:
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
          properties:
            channel_id:
              title: channel identifier
              type: string
            connection_hops:
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
              type: array
            counterparty:
              title: counterparty channel end
              properties:
                channel_id:
                  title: channel end on the counterparty chain
                  type: string
                port_id:
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                  type: string
              type: object
            ordering:
              title: whether the channel is ordered or unordered
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              type: string
            port_id:
              title: port identifier
              type: string
            state:
              title: current state of the channel end
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: >-
                State defines if a channel is in one of the following states:

                CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
                UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
                 - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
                 - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
                - STATE_FLUSHING
                - STATE_FLUSHCOMPLETE
              type: string
            upgrade_sequence:
              format: uint64
              title: >-
                upgrade sequence indicates the latest upgrade attempt performed
                by this channel

                the value of 0 indicates the channel has never been upgraded
              type: string
            version:
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
              type: string
          type: object
        type: array
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    title: |-
      QueryConnectionChannelsResponse is the Response type for the
      Query/QueryConnectionChannels RPC method
    type: object
  ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
    properties:
      next_sequence_receive:
        format: uint64
        title: next sequence receive number
        type: string
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: |-
      QuerySequenceResponse is the response type for the
      Query/QueryNextSequenceReceiveResponse RPC method
    type: object
  ibc.core.channel.v1.QueryNextSequenceSendResponse:
    properties:
      next_sequence_send:
        format: uint64
        title: next sequence send number
        type: string
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: |-
      QueryNextSequenceSendResponse is the request type for the
      Query/QueryNextSequenceSend RPC method
    type: object
  ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
    properties:
      acknowledgement:
        format: byte
        title: packet associated with the request fields
        type: string
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: |-
      QueryPacketAcknowledgementResponse defines the client query response for a
      packet which also includes a proof and the height from which the
      proof was retrieved
    type: object
  ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
    properties:
      acknowledgements:
        items:
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
          properties:
            channel_id:
              description: channel unique identifier.
              type: string
            data:
              description: embedded data that represents packet state.
              format: byte
              type: string
            port_id:
              description: channel port identifier.
              type: string
            sequence:
              description: packet sequence.
              format: uint64
              type: string
          type: object
        type: array
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    title: |-
      QueryPacketAcknowledgemetsResponse is the request type for the
      Query/QueryPacketAcknowledgements RPC method
    type: object
  ibc.core.channel.v1.QueryPacketCommitmentResponse:
    properties:
      commitment:
        format: byte
        title: packet associated with the request fields
        type: string
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: >-
      QueryPacketCommitmentResponse defines the client query response for a
      packet

      which also includes a proof and the height from which the proof was

      retrieved
    type: object
  ibc.core.channel.v1.QueryPacketCommitmentsResponse:
    properties:
      commitments:
        items:
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
          properties:
            channel_id:
              description: channel unique identifier.
              type: string
            data:
              description: embedded data that represents packet state.
              format: byte
              type: string
            port_id:
              description: channel port identifier.
              type: string
            sequence:
              description: packet sequence.
              format: uint64
              type: string
          type: object
        type: array
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    title: |-
      QueryPacketCommitmentsResponse is the request type for the
      Query/QueryPacketCommitments RPC method
    type: object
  ibc.core.channel.v1.QueryPacketReceiptResponse:
    properties:
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      received:
        title: success flag for if receipt exists
        type: boolean
    title: >-
      QueryPacketReceiptResponse defines the client query response for a packet

      receipt which also includes a proof, and the height from which the proof
      was

      retrieved
    type: object
  ibc.core.channel.v1.QueryUnreceivedAcksResponse:
    properties:
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      sequences:
        items:
          format: uint64
          type: string
        title: list of unreceived acknowledgement sequences
        type: array
    title: |-
      QueryUnreceivedAcksResponse is the response type for the
      Query/UnreceivedAcks RPC method
    type: object
  ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
    properties:
      height:
        title: query block height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      sequences:
        items:
          format: uint64
          type: string
        title: list of unreceived packet sequences
        type: array
    title: |-
      QueryUnreceivedPacketsResponse is the response type for the
      Query/UnreceivedPacketCommitments RPC method
    type: object
  ibc.core.channel.v1.QueryUpgradeErrorResponse:
    properties:
      error_receipt:
        description: >-
          ErrorReceipt defines a type which encapsulates the upgrade sequence
          and error associated with the

          upgrade handshake failure. When a channel upgrade handshake is aborted
          both chains are expected to increment to the

          next sequence.
        properties:
          message:
            title: the error message detailing the cause of failure
            type: string
          sequence:
            format: uint64
            title: the channel upgrade sequence
            type: string
        type: object
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    title: >-
      QueryUpgradeErrorResponse is the response type for the
      Query/QueryUpgradeError RPC method
    type: object
  ibc.core.channel.v1.QueryUpgradeResponse:
    properties:
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      upgrade:
        description: >-
          Upgrade is a verifiable type which contains the relevant information

          for an attempted upgrade. It provides the proposed changes to the
          channel

          end, the timeout for this upgrade attempt and the next packet sequence

          which allows the counterparty to efficiently know the highest sequence
          it has received.

          The next sequence send is used for pruning and upgrading from
          unordered to ordered channels.
        properties:
          fields:
            description: |-
              UpgradeFields are the fields in a channel end which may be changed
              during a channel upgrade.
            properties:
              connection_hops:
                items:
                  type: string
                type: array
              ordering:
                default: ORDER_NONE_UNSPECIFIED
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                enum:
                  - ORDER_NONE_UNSPECIFIED
                  - ORDER_UNORDERED
                  - ORDER_ORDERED
                title: Order defines if a channel is ORDERED or UNORDERED
                type: string
              version:
                type: string
            type: object
          next_sequence_send:
            format: uint64
            type: string
          timeout:
            description: >-
              Timeout defines an execution deadline structure for 04-channel
              handlers.

              This includes packet lifecycle handlers as well as the upgrade
              handshake handlers.

              A valid Timeout contains either one or both of a timestamp and
              block height (sequence).
            properties:
              height:
                title: block height after which the packet or upgrade times out
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              timestamp:
                format: uint64
                title: >-
                  block timestamp (in nanoseconds) after which the packet or
                  upgrade times out
                type: string
            type: object
        type: object
    title: >-
      QueryUpgradeResponse is the response type for the QueryUpgradeResponse RPC
      method
    type: object
  ibc.core.channel.v1.State:
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a channel is in one of the following states:
      CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A channel has just started the opening handshake.
       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
       - STATE_OPEN: A channel has completed the handshake. Open channels are
      ready to send and receive packets.
       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
      packets.
       - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
       - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
      - STATE_FLUSHING
      - STATE_FLUSHCOMPLETE
    type: string
  ibc.core.channel.v1.Timeout:
    description: >-
      Timeout defines an execution deadline structure for 04-channel handlers.

      This includes packet lifecycle handlers as well as the upgrade handshake
      handlers.

      A valid Timeout contains either one or both of a timestamp and block
      height (sequence).
    properties:
      height:
        title: block height after which the packet or upgrade times out
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
      timestamp:
        format: uint64
        title: >-
          block timestamp (in nanoseconds) after which the packet or upgrade
          times out
        type: string
    type: object
  ibc.core.channel.v1.Upgrade:
    description: >-
      Upgrade is a verifiable type which contains the relevant information

      for an attempted upgrade. It provides the proposed changes to the channel

      end, the timeout for this upgrade attempt and the next packet sequence

      which allows the counterparty to efficiently know the highest sequence it
      has received.

      The next sequence send is used for pruning and upgrading from unordered to
      ordered channels.
    properties:
      fields:
        description: |-
          UpgradeFields are the fields in a channel end which may be changed
          during a channel upgrade.
        properties:
          connection_hops:
            items:
              type: string
            type: array
          ordering:
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            title: Order defines if a channel is ORDERED or UNORDERED
            type: string
          version:
            type: string
        type: object
      next_sequence_send:
        format: uint64
        type: string
      timeout:
        description: >-
          Timeout defines an execution deadline structure for 04-channel
          handlers.

          This includes packet lifecycle handlers as well as the upgrade
          handshake handlers.

          A valid Timeout contains either one or both of a timestamp and block
          height (sequence).
        properties:
          height:
            title: block height after which the packet or upgrade times out
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
            properties:
              revision_height:
                format: uint64
                title: the height within the given revision
                type: string
              revision_number:
                format: uint64
                title: the revision that the client is currently on
                type: string
            type: object
          timestamp:
            format: uint64
            title: >-
              block timestamp (in nanoseconds) after which the packet or upgrade
              times out
            type: string
        type: object
    type: object
  ibc.core.channel.v1.UpgradeFields:
    description: |-
      UpgradeFields are the fields in a channel end which may be changed
      during a channel upgrade.
    properties:
      connection_hops:
        items:
          type: string
        type: array
      ordering:
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        title: Order defines if a channel is ORDERED or UNORDERED
        type: string
      version:
        type: string
    type: object
  ibc.core.client.v1.ConsensusStateWithHeight:
    description: >-
      ConsensusStateWithHeight defines a consensus state with an additional
      height

      field.
    properties:
      consensus_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: consensus state
      height:
        title: consensus state height
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    type: object
  ibc.core.client.v1.Height:
    description: |-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber the same. However some consensus algorithms may choose to
      reset the height in certain conditions e.g. hard forks, state-machine
      breaking changes In these cases, the RevisionNumber is incremented so that
      height continues to be monitonically increasing even as the RevisionHeight
      gets reset
    properties:
      revision_height:
        format: uint64
        title: the height within the given revision
        type: string
      revision_number:
        format: uint64
        title: the revision that the client is currently on
        type: string
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
    type: object
  ibc.core.client.v1.IdentifiedClientState:
    description: |-
      IdentifiedClientState defines a client state with an additional client
      identifier field.
    properties:
      client_id:
        title: client identifier
        type: string
      client_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: client state
    type: object
  ibc.core.client.v1.Params:
    description: Params defines the set of IBC light client parameters.
    properties:
      allowed_clients:
        description: >-
          allowed_clients defines the list of allowed client state types which
          can be created

          and interacted with. If a client type is removed from the allowed
          clients list, usage

          of this client will be disabled until it is added again to the list.
        items:
          type: string
        type: array
    type: object
  ibc.core.client.v1.QueryClientParamsResponse:
    description: >-
      QueryClientParamsResponse is the response type for the Query/ClientParams
      RPC

      method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          allowed_clients:
            description: >-
              allowed_clients defines the list of allowed client state types
              which can be created

              and interacted with. If a client type is removed from the allowed
              clients list, usage

              of this client will be disabled until it is added again to the
              list.
            items:
              type: string
            type: array
        type: object
    type: object
  ibc.core.client.v1.QueryClientStateResponse:
    description: >-
      QueryClientStateResponse is the response type for the Query/ClientState
      RPC

      method. Besides the client state, it includes a proof and the height from

      which the proof was retrieved.
    properties:
      client_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: client state associated with the request identifier
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        title: height at which the proof was retrieved
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        type: object
    type: object
  ibc.core.client.v1.QueryClientStatesResponse:
    description: >-
      QueryClientStatesResponse is the response type for the Query/ClientStates
      RPC

      method.
    properties:
      client_states:
        description: list of stored ClientStates of the chain.
        items:
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
              title: client state
          type: object
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    type: object
  ibc.core.client.v1.QueryClientStatusResponse:
    description: >-
      QueryClientStatusResponse is the response type for the Query/ClientStatus
      RPC

      method. It returns the current status of the IBC client.
    properties:
      status:
        type: string
    type: object
  ibc.core.client.v1.QueryConsensusStateHeightsResponse:
    properties:
      consensus_state_heights:
        items:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
        title: consensus state heights
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    title: |-
      QueryConsensusStateHeightsResponse is the response type for the
      Query/ConsensusStateHeights RPC method
    type: object
  ibc.core.client.v1.QueryConsensusStateResponse:
    properties:
      consensus_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: >-
          consensus state associated with the client identifier at the given
          height
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
    title: >-
      QueryConsensusStateResponse is the response type for the
      Query/ConsensusState

      RPC method
    type: object
  ibc.core.client.v1.QueryConsensusStatesResponse:
    properties:
      consensus_states:
        items:
          description: >-
            ConsensusStateWithHeight defines a consensus state with an
            additional height

            field.
          properties:
            consensus_state:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }
                    // or ...
                    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                      foo = any.unpack(Foo.getDefaultInstance());
                    }

                Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".


                JSON


                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
              title: consensus state
            height:
              title: consensus state height
              description: >-
                Normally the RevisionHeight is incremented at each height while
                keeping

                RevisionNumber the same. However some consensus algorithms may
                choose to

                reset the height in certain conditions e.g. hard forks,
                state-machine

                breaking changes In these cases, the RevisionNumber is
                incremented so that

                height continues to be monitonically increasing even as the
                RevisionHeight

                gets reset
              properties:
                revision_height:
                  format: uint64
                  title: the height within the given revision
                  type: string
                revision_number:
                  format: uint64
                  title: the revision that the client is currently on
                  type: string
              type: object
          type: object
        title: consensus states associated with the identifier
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    title: |-
      QueryConsensusStatesResponse is the response type for the
      Query/ConsensusStates RPC method
    type: object
  ibc.core.client.v1.QueryUpgradedClientStateResponse:
    description: |-
      QueryUpgradedClientStateResponse is the response type for the
      Query/UpgradedClientState RPC method.
    properties:
      upgraded_client_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: client state associated with the request identifier
    type: object
  ibc.core.client.v1.QueryUpgradedConsensusStateResponse:
    description: |-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState RPC method.
    properties:
      upgraded_consensus_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: Consensus state associated with the request identifier
    type: object
  ibc.core.commitment.v1.MerklePrefix:
    properties:
      key_prefix:
        format: byte
        type: string
    title: |-
      MerklePrefix is merkle path prefixed to the key.
      The constructed key from the Path and the key will be append(Path.KeyPath,
      append(Path.KeyPrefix, key...))
    type: object
  ibc.core.connection.v1.ConnectionEnd:
    description: |-
      ConnectionEnd defines a stateful object on a chain connected to another
      separate one.
      NOTE: there must only be 2 defined ConnectionEnds to establish
      a connection between two chains.
    properties:
      client_id:
        description: client associated with this connection.
        type: string
      counterparty:
        description: counterparty chain associated with this connection.
        properties:
          client_id:
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
            type: string
          connection_id:
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
            type: string
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            properties:
              key_prefix:
                format: byte
                type: string
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
            type: object
        type: object
      delay_period:
        description: >-
          delay period that must pass before a consensus state can be used for

          packet-verification NOTE: delay period logic is only implemented by
          some

          clients.
        format: uint64
        type: string
      state:
        description: current state of the connection end.
        default: STATE_UNINITIALIZED_UNSPECIFIED
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        type: string
      versions:
        description: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection.
        items:
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
          properties:
            features:
              items:
                type: string
              title: list of features compatible with the specified identifier
              type: array
            identifier:
              title: unique version identifier
              type: string
          type: object
        type: array
    type: object
  ibc.core.connection.v1.Counterparty:
    description: >-
      Counterparty defines the counterparty chain associated with a connection
      end.
    properties:
      client_id:
        description: >-
          identifies the client on the counterparty chain associated with a
          given

          connection.
        type: string
      connection_id:
        description: >-
          identifies the connection end on the counterparty chain associated
          with a

          given connection.
        type: string
      prefix:
        description: commitment merkle prefix of the counterparty chain.
        properties:
          key_prefix:
            format: byte
            type: string
        title: >-
          MerklePrefix is merkle path prefixed to the key.

          The constructed key from the Path and the key will be
          append(Path.KeyPath,

          append(Path.KeyPrefix, key...))
        type: object
    type: object
  ibc.core.connection.v1.IdentifiedConnection:
    description: |-
      IdentifiedConnection defines a connection with additional connection
      identifier field.
    properties:
      client_id:
        description: client associated with this connection.
        type: string
      counterparty:
        description: counterparty chain associated with this connection.
        properties:
          client_id:
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
            type: string
          connection_id:
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
            type: string
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            properties:
              key_prefix:
                format: byte
                type: string
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
            type: object
        type: object
      delay_period:
        description: delay period associated with this connection.
        format: uint64
        type: string
      id:
        description: connection identifier.
        type: string
      state:
        description: current state of the connection end.
        default: STATE_UNINITIALIZED_UNSPECIFIED
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        type: string
      versions:
        items:
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
          properties:
            features:
              items:
                type: string
              title: list of features compatible with the specified identifier
              type: array
            identifier:
              title: unique version identifier
              type: string
          type: object
        title: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection
        type: array
    type: object
  ibc.core.connection.v1.Params:
    description: Params defines the set of Connection parameters.
    properties:
      max_expected_time_per_block:
        description: >-
          maximum expected time per block (in nanoseconds), used to enforce
          block delay. This parameter should reflect the

          largest amount of time that the chain might reasonably take to produce
          the next block under normal operating

          conditions. A safe choice is 3-5x the expected time per block.
        format: uint64
        type: string
    type: object
  ibc.core.connection.v1.QueryClientConnectionsResponse:
    properties:
      connection_paths:
        description: slice of all the connection paths associated with a client.
        items:
          type: string
        type: array
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
    title: |-
      QueryClientConnectionsResponse is the response type for the
      Query/ClientConnections RPC method
    type: object
  ibc.core.connection.v1.QueryConnectionClientStateResponse:
    properties:
      identified_client_state:
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
        properties:
          client_id:
            title: client identifier
            type: string
          client_state:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
            title: client state
        type: object
        title: client state associated with the channel
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
    title: |-
      QueryConnectionClientStateResponse is the response type for the
      Query/ConnectionClientState RPC method
    type: object
  ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
    properties:
      client_id:
        title: client ID associated with the consensus state
        type: string
      consensus_state:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
        title: consensus state associated with the channel
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
    title: |-
      QueryConnectionConsensusStateResponse is the response type for the
      Query/ConnectionConsensusState RPC method
    type: object
  ibc.core.connection.v1.QueryConnectionParamsResponse:
    description: >-
      QueryConnectionParamsResponse is the response type for the
      Query/ConnectionParams RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          max_expected_time_per_block:
            description: >-
              maximum expected time per block (in nanoseconds), used to enforce
              block delay. This parameter should reflect the

              largest amount of time that the chain might reasonably take to
              produce the next block under normal operating

              conditions. A safe choice is 3-5x the expected time per block.
            format: uint64
            type: string
        type: object
    type: object
  ibc.core.connection.v1.QueryConnectionResponse:
    description: >-
      QueryConnectionResponse is the response type for the Query/Connection RPC

      method. Besides the connection end, it includes a proof and the height
      from

      which the proof was retrieved.
    properties:
      connection:
        title: connection associated with the request identifier
        description: >-
          ConnectionEnd defines a stateful object on a chain connected to
          another

          separate one.

          NOTE: there must only be 2 defined ConnectionEnds to establish

          a connection between two chains.
        properties:
          client_id:
            description: client associated with this connection.
            type: string
          counterparty:
            description: counterparty chain associated with this connection.
            properties:
              client_id:
                description: >-
                  identifies the client on the counterparty chain associated
                  with a given

                  connection.
                type: string
              connection_id:
                description: >-
                  identifies the connection end on the counterparty chain
                  associated with a

                  given connection.
                type: string
              prefix:
                description: commitment merkle prefix of the counterparty chain.
                properties:
                  key_prefix:
                    format: byte
                    type: string
                title: >-
                  MerklePrefix is merkle path prefixed to the key.

                  The constructed key from the Path and the key will be
                  append(Path.KeyPath,

                  append(Path.KeyPrefix, key...))
                type: object
            type: object
          delay_period:
            description: >-
              delay period that must pass before a consensus state can be used
              for

              packet-verification NOTE: delay period logic is only implemented
              by some

              clients.
            format: uint64
            type: string
          state:
            description: current state of the connection end.
            default: STATE_UNINITIALIZED_UNSPECIFIED
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
            type: string
          versions:
            description: >-
              IBC version which can be utilised to determine encodings or
              protocols for

              channels or packets utilising this connection.
            items:
              description: >-
                Version defines the versioning scheme used to negotiate the IBC
                verison in

                the connection handshake.
              properties:
                features:
                  items:
                    type: string
                  title: list of features compatible with the specified identifier
                  type: array
                identifier:
                  title: unique version identifier
                  type: string
              type: object
            type: array
        type: object
      proof:
        format: byte
        title: merkle proof of existence
        type: string
      proof_height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
    type: object
  ibc.core.connection.v1.QueryConnectionsResponse:
    description: >-
      QueryConnectionsResponse is the response type for the Query/Connections
      RPC

      method.
    properties:
      connections:
        description: list of stored connections of the chain.
        items:
          description: |-
            IdentifiedConnection defines a connection with additional connection
            identifier field.
          properties:
            client_id:
              description: client associated with this connection.
              type: string
            counterparty:
              description: counterparty chain associated with this connection.
              properties:
                client_id:
                  description: >-
                    identifies the client on the counterparty chain associated
                    with a given

                    connection.
                  type: string
                connection_id:
                  description: >-
                    identifies the connection end on the counterparty chain
                    associated with a

                    given connection.
                  type: string
                prefix:
                  description: commitment merkle prefix of the counterparty chain.
                  properties:
                    key_prefix:
                      format: byte
                      type: string
                  title: >-
                    MerklePrefix is merkle path prefixed to the key.

                    The constructed key from the Path and the key will be
                    append(Path.KeyPath,

                    append(Path.KeyPrefix, key...))
                  type: object
              type: object
            delay_period:
              description: delay period associated with this connection.
              format: uint64
              type: string
            id:
              description: connection identifier.
              type: string
            state:
              description: current state of the connection end.
              default: STATE_UNINITIALIZED_UNSPECIFIED
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              type: string
            versions:
              items:
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
                properties:
                  features:
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                    type: array
                  identifier:
                    title: unique version identifier
                    type: string
                type: object
              title: >-
                IBC version which can be utilised to determine encodings or
                protocols for

                channels or packets utilising this connection
              type: array
          type: object
        type: array
      height:
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        properties:
          revision_height:
            format: uint64
            title: the height within the given revision
            type: string
          revision_number:
            format: uint64
            title: the revision that the client is currently on
            type: string
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
        type: object
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
        title: pagination response
    type: object
  ibc.core.connection.v1.State:
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a connection is in one of the following states:
      INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A connection end has just started the opening handshake.
       - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
      chain.
       - STATE_OPEN: A connection end has completed the handshake.
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
    type: string
  ibc.core.connection.v1.Version:
    description: |-
      Version defines the versioning scheme used to negotiate the IBC verison in
      the connection handshake.
    properties:
      features:
        items:
          type: string
        title: list of features compatible with the specified identifier
        type: array
      identifier:
        title: unique version identifier
        type: string
    type: object
  ibc.lightclients.wasm.v1.QueryChecksumsResponse:
    description: >-
      QueryChecksumsResponse is the response type for the Query/Checksums RPC
      method.
    properties:
      checksums:
        description: >-
          checksums is a list of the hex encoded checksums of all wasm codes
          stored.
        items:
          type: string
        type: array
      pagination:
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        properties:
          next_key:
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
            format: byte
            type: string
          total:
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
            type: string
        type: object
    type: object
  ibc.lightclients.wasm.v1.QueryCodeResponse:
    description: QueryCodeResponse is the response type for the Query/Code RPC method.
    properties:
      data:
        format: byte
        type: string
    type: object
  nolus.mint.v1beta1.Params:
    description: Params holds parameters for the mint module.
    properties:
      max_mintable_nanoseconds:
        type: string
      mint_denom:
        title: type of coin to mint
        type: string
    type: object
  nolus.mint.v1beta1.QueryAnnualInflationResponse:
    description: |-
      QueryAnnualInflationResponse is the response type for the
      Query/AnnualInflation RPC method.
    properties:
      annual_inflation:
        description: inflation is the current minting inflation value.
        format: byte
        type: string
    type: object
  nolus.mint.v1beta1.QueryMintStateResponse:
    description: |-
      QueryMintStateResponse is the response type for the Query/State RPC
      method.
    properties:
      norm_time_passed:
        format: byte
        type: string
      total_minted:
        format: byte
        type: string
    type: object
  nolus.mint.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
    properties:
      params:
        description: params defines the parameters of the module.
        properties:
          max_mintable_nanoseconds:
            type: string
          mint_denom:
            title: type of coin to mint
            type: string
        type: object
    type: object
  nolus.tax.v1beta1.DenomTicker:
    properties:
      denom:
        type: string
      ticker:
        type: string
    title: DenomTicker will be used to define accepted denoms and their ticker
    type: object
  nolus.tax.v1beta1.FeeParam:
    properties:
      accepted_denoms:
        items:
          properties:
            denom:
              type: string
            ticker:
              type: string
          title: DenomTicker will be used to define accepted denoms and their ticker
          type: object
        type: array
      oracle_address:
        type: string
      profit_address:
        type: string
    title: Defines the accepted fees with corresponding oracle and profit addresses
    type: object
  nolus.tax.v1beta1.Params:
    description: Params defines the parameters for the module.
    properties:
      base_denom:
        type: string
      contract_address:
        type: string
      fee_params:
        items:
          properties:
            accepted_denoms:
              items:
                properties:
                  denom:
                    type: string
                  ticker:
                    type: string
                title: >-
                  DenomTicker will be used to define accepted denoms and their
                  ticker
                type: object
              type: array
            oracle_address:
              type: string
            profit_address:
              type: string
          title: >-
            Defines the accepted fees with corresponding oracle and profit
            addresses
          type: object
        type: array
      fee_rate:
        format: int32
        type: integer
    type: object
  nolus.tax.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      params:
        description: params holds all the parameters of this module.
        properties:
          base_denom:
            type: string
          contract_address:
            type: string
          fee_params:
            items:
              properties:
                accepted_denoms:
                  items:
                    properties:
                      denom:
                        type: string
                      ticker:
                        type: string
                    title: >-
                      DenomTicker will be used to define accepted denoms and
                      their ticker
                    type: object
                  type: array
                oracle_address:
                  type: string
                profit_address:
                  type: string
              title: >-
                Defines the accepted fees with corresponding oracle and profit
                addresses
              type: object
            type: array
          fee_rate:
            format: int32
            type: integer
        type: object
    type: object
  tendermint.crypto.PublicKey:
    properties:
      ed25519:
        format: byte
        type: string
      secp256k1:
        format: byte
        type: string
    title: PublicKey defines the keys available for use with Validators
    type: object
  tendermint.p2p.DefaultNodeInfo:
    properties:
      channels:
        format: byte
        type: string
      default_node_id:
        type: string
      listen_addr:
        type: string
      moniker:
        type: string
      network:
        type: string
      other:
        properties:
          rpc_address:
            type: string
          tx_index:
            type: string
        type: object
      protocol_version:
        properties:
          app:
            format: uint64
            type: string
          block:
            format: uint64
            type: string
          p2p:
            format: uint64
            type: string
        type: object
      version:
        type: string
    type: object
  tendermint.p2p.DefaultNodeInfoOther:
    properties:
      rpc_address:
        type: string
      tx_index:
        type: string
    type: object
  tendermint.p2p.ProtocolVersion:
    properties:
      app:
        format: uint64
        type: string
      block:
        format: uint64
        type: string
      p2p:
        format: uint64
        type: string
    type: object
  tendermint.types.ABCIParams:
    description: >-
      ABCIParams configure functionality specific to the Application Blockchain
      Interface.
    properties:
      vote_extensions_enable_height:
        description: >-
          vote_extensions_enable_height configures the first height during which

          vote extensions will be enabled. During this specified height, and for
          all

          subsequent heights, precommit messages that do not contain valid
          extension data

          will be considered invalid. Prior to this height, vote extensions will
          not

          be used or accepted by validators on the network.


          Once enabled, vote extensions will be created by the application in
          ExtendVote,

          passed to the application for validation in VerifyVoteExtension and
          given

          to the application to use when proposing a block during
          PrepareProposal.
        format: int64
        type: string
    type: object
  tendermint.types.Block:
    properties:
      data:
        properties:
          txs:
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
            items:
              format: byte
              type: string
            type: array
        title: Data contains the set of transactions included in the block
        type: object
      evidence:
        properties:
          evidence:
            items:
              properties:
                duplicate_vote_evidence:
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                  properties:
                    timestamp:
                      format: date-time
                      type: string
                    total_voting_power:
                      format: int64
                      type: string
                    validator_power:
                      format: int64
                      type: string
                    vote_a:
                      description: >-
                        Vote represents a prevote or precommit vote from
                        validators for

                        consensus.
                      properties:
                        block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: BlockID
                          type: object
                        extension:
                          description: >-
                            Vote extension provided by the application. Only
                            valid for precommit

                            messages.
                          format: byte
                          type: string
                        extension_signature:
                          description: >-
                            Vote extension signature by the validator if they
                            participated in

                            consensus for the associated block.

                            Only valid for precommit messages.
                          format: byte
                          type: string
                        height:
                          format: int64
                          type: string
                        round:
                          format: int32
                          type: integer
                        signature:
                          description: >-
                            Vote signature by the validator if they participated
                            in consensus for the

                            associated block.
                          format: byte
                          type: string
                        timestamp:
                          format: date-time
                          type: string
                        type:
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          type: string
                        validator_address:
                          format: byte
                          type: string
                        validator_index:
                          format: int32
                          type: integer
                      type: object
                    vote_b:
                      description: >-
                        Vote represents a prevote or precommit vote from
                        validators for

                        consensus.
                      properties:
                        block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: BlockID
                          type: object
                        extension:
                          description: >-
                            Vote extension provided by the application. Only
                            valid for precommit

                            messages.
                          format: byte
                          type: string
                        extension_signature:
                          description: >-
                            Vote extension signature by the validator if they
                            participated in

                            consensus for the associated block.

                            Only valid for precommit messages.
                          format: byte
                          type: string
                        height:
                          format: int64
                          type: string
                        round:
                          format: int32
                          type: integer
                        signature:
                          description: >-
                            Vote signature by the validator if they participated
                            in consensus for the

                            associated block.
                          format: byte
                          type: string
                        timestamp:
                          format: date-time
                          type: string
                        type:
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          type: string
                        validator_address:
                          format: byte
                          type: string
                        validator_index:
                          format: int32
                          type: integer
                      type: object
                  type: object
                light_client_attack_evidence:
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
                  properties:
                    byzantine_validators:
                      items:
                        properties:
                          address:
                            format: byte
                            type: string
                          proposer_priority:
                            format: int64
                            type: string
                          pub_key:
                            properties:
                              ed25519:
                                format: byte
                                type: string
                              secp256k1:
                                format: byte
                                type: string
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                            type: object
                          voting_power:
                            format: int64
                            type: string
                        type: object
                      type: array
                    common_height:
                      format: int64
                      type: string
                    conflicting_block:
                      properties:
                        signed_header:
                          properties:
                            commit:
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                              properties:
                                block_id:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    part_set_header:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        total:
                                          format: int64
                                          type: integer
                                      title: PartsetHeader
                                      type: object
                                  title: BlockID
                                  type: object
                                height:
                                  format: int64
                                  type: string
                                round:
                                  format: int32
                                  type: integer
                                signatures:
                                  items:
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                                    properties:
                                      block_id_flag:
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        title: >-
                                          BlockIdFlag indicates which BlockID the
                                          signature is for
                                        type: string
                                      signature:
                                        format: byte
                                        type: string
                                      timestamp:
                                        format: date-time
                                        type: string
                                      validator_address:
                                        format: byte
                                        type: string
                                    type: object
                                  type: array
                              type: object
                            header:
                              description: Header defines the structure of a block header.
                              properties:
                                app_hash:
                                  format: byte
                                  type: string
                                chain_id:
                                  type: string
                                consensus_hash:
                                  format: byte
                                  type: string
                                data_hash:
                                  format: byte
                                  type: string
                                evidence_hash:
                                  format: byte
                                  title: consensus info
                                  type: string
                                height:
                                  format: int64
                                  type: string
                                last_block_id:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    part_set_header:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        total:
                                          format: int64
                                          type: integer
                                      title: PartsetHeader
                                      type: object
                                  title: BlockID
                                  type: object
                                last_commit_hash:
                                  format: byte
                                  title: hashes of block data
                                  type: string
                                last_results_hash:
                                  format: byte
                                  type: string
                                next_validators_hash:
                                  format: byte
                                  type: string
                                proposer_address:
                                  format: byte
                                  type: string
                                time:
                                  format: date-time
                                  type: string
                                validators_hash:
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                  type: string
                                version:
                                  title: basic block info
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                  properties:
                                    app:
                                      format: uint64
                                      type: string
                                    block:
                                      format: uint64
                                      type: string
                                  type: object
                              type: object
                          type: object
                        validator_set:
                          properties:
                            proposer:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            total_voting_power:
                              format: int64
                              type: string
                            validators:
                              items:
                                properties:
                                  address:
                                    format: byte
                                    type: string
                                  proposer_priority:
                                    format: int64
                                    type: string
                                  pub_key:
                                    properties:
                                      ed25519:
                                        format: byte
                                        type: string
                                      secp256k1:
                                        format: byte
                                        type: string
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                    type: object
                                  voting_power:
                                    format: int64
                                    type: string
                                type: object
                              type: array
                          type: object
                      type: object
                    timestamp:
                      format: date-time
                      type: string
                    total_voting_power:
                      format: int64
                      type: string
                  type: object
              type: object
            type: array
        type: object
      header:
        description: Header defines the structure of a block header.
        properties:
          app_hash:
            format: byte
            type: string
          chain_id:
            type: string
          consensus_hash:
            format: byte
            type: string
          data_hash:
            format: byte
            type: string
          evidence_hash:
            format: byte
            title: consensus info
            type: string
          height:
            format: int64
            type: string
          last_block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          last_commit_hash:
            format: byte
            title: hashes of block data
            type: string
          last_results_hash:
            format: byte
            type: string
          next_validators_hash:
            format: byte
            type: string
          proposer_address:
            format: byte
            type: string
          time:
            format: date-time
            type: string
          validators_hash:
            format: byte
            title: hashes from the app output from the prev block
            type: string
          version:
            title: basic block info
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
            properties:
              app:
                format: uint64
                type: string
              block:
                format: uint64
                type: string
            type: object
        type: object
      last_commit:
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
        properties:
          block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          height:
            format: int64
            type: string
          round:
            format: int32
            type: integer
          signatures:
            items:
              description: CommitSig is a part of the Vote included in a Commit.
              properties:
                block_id_flag:
                  default: BLOCK_ID_FLAG_UNKNOWN
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  title: BlockIdFlag indicates which BlockID the signature is for
                  type: string
                signature:
                  format: byte
                  type: string
                timestamp:
                  format: date-time
                  type: string
                validator_address:
                  format: byte
                  type: string
              type: object
            type: array
        type: object
    type: object
  tendermint.types.BlockID:
    properties:
      hash:
        format: byte
        type: string
      part_set_header:
        properties:
          hash:
            format: byte
            type: string
          total:
            format: int64
            type: integer
        title: PartsetHeader
        type: object
    title: BlockID
    type: object
  tendermint.types.BlockIDFlag:
    default: BLOCK_ID_FLAG_UNKNOWN
    enum:
      - BLOCK_ID_FLAG_UNKNOWN
      - BLOCK_ID_FLAG_ABSENT
      - BLOCK_ID_FLAG_COMMIT
      - BLOCK_ID_FLAG_NIL
    title: BlockIdFlag indicates which BlockID the signature is for
    type: string
  tendermint.types.BlockParams:
    description: BlockParams contains limits on the block size.
    properties:
      max_bytes:
        format: int64
        title: |-
          Max block size, in bytes.
          Note: must be greater than 0
        type: string
      max_gas:
        format: int64
        title: |-
          Max gas per block.
          Note: must be greater or equal to -1
        type: string
    type: object
  tendermint.types.Commit:
    description: >-
      Commit contains the evidence that a block was committed by a set of
      validators.
    properties:
      block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      height:
        format: int64
        type: string
      round:
        format: int32
        type: integer
      signatures:
        items:
          description: CommitSig is a part of the Vote included in a Commit.
          properties:
            block_id_flag:
              default: BLOCK_ID_FLAG_UNKNOWN
              enum:
                - BLOCK_ID_FLAG_UNKNOWN
                - BLOCK_ID_FLAG_ABSENT
                - BLOCK_ID_FLAG_COMMIT
                - BLOCK_ID_FLAG_NIL
              title: BlockIdFlag indicates which BlockID the signature is for
              type: string
            signature:
              format: byte
              type: string
            timestamp:
              format: date-time
              type: string
            validator_address:
              format: byte
              type: string
          type: object
        type: array
    type: object
  tendermint.types.CommitSig:
    description: CommitSig is a part of the Vote included in a Commit.
    properties:
      block_id_flag:
        default: BLOCK_ID_FLAG_UNKNOWN
        enum:
          - BLOCK_ID_FLAG_UNKNOWN
          - BLOCK_ID_FLAG_ABSENT
          - BLOCK_ID_FLAG_COMMIT
          - BLOCK_ID_FLAG_NIL
        title: BlockIdFlag indicates which BlockID the signature is for
        type: string
      signature:
        format: byte
        type: string
      timestamp:
        format: date-time
        type: string
      validator_address:
        format: byte
        type: string
    type: object
  tendermint.types.ConsensusParams:
    description: |-
      ConsensusParams contains consensus critical parameters that determine the
      validity of blocks.
    properties:
      abci:
        description: >-
          ABCIParams configure functionality specific to the Application
          Blockchain Interface.
        properties:
          vote_extensions_enable_height:
            description: >-
              vote_extensions_enable_height configures the first height during
              which

              vote extensions will be enabled. During this specified height, and
              for all

              subsequent heights, precommit messages that do not contain valid
              extension data

              will be considered invalid. Prior to this height, vote extensions
              will not

              be used or accepted by validators on the network.


              Once enabled, vote extensions will be created by the application
              in ExtendVote,

              passed to the application for validation in VerifyVoteExtension
              and given

              to the application to use when proposing a block during
              PrepareProposal.
            format: int64
            type: string
        type: object
      block:
        description: BlockParams contains limits on the block size.
        properties:
          max_bytes:
            format: int64
            title: |-
              Max block size, in bytes.
              Note: must be greater than 0
            type: string
          max_gas:
            format: int64
            title: |-
              Max gas per block.
              Note: must be greater or equal to -1
            type: string
        type: object
      evidence:
        description: EvidenceParams determine how we handle evidence of malfeasance.
        properties:
          max_age_duration:
            description: >-
              Max age of evidence, in time.


              It should correspond with an app's "unbonding period" or other
              similar

              mechanism for handling [Nothing-At-Stake

              attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
            type: string
          max_age_num_blocks:
            description: >-
              Max age of evidence, in blocks.


              The basic formula for calculating this is: MaxAgeDuration /
              {average block

              time}.
            format: int64
            type: string
          max_bytes:
            format: int64
            title: >-
              This sets the maximum size of total evidence in bytes that can be
              committed in a single block.

              and should fall comfortably under the max block bytes.

              Default is 1048576 or 1MB
            type: string
        type: object
      validator:
        description: |-
          ValidatorParams restrict the public key types validators can use.
          NOTE: uses ABCI pubkey naming, not Amino names.
        properties:
          pub_key_types:
            items:
              type: string
            type: array
        type: object
      version:
        description: VersionParams contains the ABCI application version.
        properties:
          app:
            format: uint64
            type: string
        type: object
    type: object
  tendermint.types.Data:
    properties:
      txs:
        description: >-
          Txs that will be applied by state @ block.Height+1.

          NOTE: not all txs here are valid.  We're just agreeing on the order
          first.

          This means that block.AppHash does not include these txs.
        items:
          format: byte
          type: string
        type: array
    title: Data contains the set of transactions included in the block
    type: object
  tendermint.types.DuplicateVoteEvidence:
    description: >-
      DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
    properties:
      timestamp:
        format: date-time
        type: string
      total_voting_power:
        format: int64
        type: string
      validator_power:
        format: int64
        type: string
      vote_a:
        description: |-
          Vote represents a prevote or precommit vote from validators for
          consensus.
        properties:
          block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          extension:
            description: >-
              Vote extension provided by the application. Only valid for
              precommit

              messages.
            format: byte
            type: string
          extension_signature:
            description: |-
              Vote extension signature by the validator if they participated in
              consensus for the associated block.
              Only valid for precommit messages.
            format: byte
            type: string
          height:
            format: int64
            type: string
          round:
            format: int32
            type: integer
          signature:
            description: >-
              Vote signature by the validator if they participated in consensus
              for the

              associated block.
            format: byte
            type: string
          timestamp:
            format: date-time
            type: string
          type:
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            type: string
          validator_address:
            format: byte
            type: string
          validator_index:
            format: int32
            type: integer
        type: object
      vote_b:
        description: |-
          Vote represents a prevote or precommit vote from validators for
          consensus.
        properties:
          block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          extension:
            description: >-
              Vote extension provided by the application. Only valid for
              precommit

              messages.
            format: byte
            type: string
          extension_signature:
            description: |-
              Vote extension signature by the validator if they participated in
              consensus for the associated block.
              Only valid for precommit messages.
            format: byte
            type: string
          height:
            format: int64
            type: string
          round:
            format: int32
            type: integer
          signature:
            description: >-
              Vote signature by the validator if they participated in consensus
              for the

              associated block.
            format: byte
            type: string
          timestamp:
            format: date-time
            type: string
          type:
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            type: string
          validator_address:
            format: byte
            type: string
          validator_index:
            format: int32
            type: integer
        type: object
    type: object
  tendermint.types.Evidence:
    properties:
      duplicate_vote_evidence:
        description: >-
          DuplicateVoteEvidence contains evidence of a validator signed two
          conflicting votes.
        properties:
          timestamp:
            format: date-time
            type: string
          total_voting_power:
            format: int64
            type: string
          validator_power:
            format: int64
            type: string
          vote_a:
            description: |-
              Vote represents a prevote or precommit vote from validators for
              consensus.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              extension:
                description: >-
                  Vote extension provided by the application. Only valid for
                  precommit

                  messages.
                format: byte
                type: string
              extension_signature:
                description: >-
                  Vote extension signature by the validator if they participated
                  in

                  consensus for the associated block.

                  Only valid for precommit messages.
                format: byte
                type: string
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signature:
                description: >-
                  Vote signature by the validator if they participated in
                  consensus for the

                  associated block.
                format: byte
                type: string
              timestamp:
                format: date-time
                type: string
              type:
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                type: string
              validator_address:
                format: byte
                type: string
              validator_index:
                format: int32
                type: integer
            type: object
          vote_b:
            description: |-
              Vote represents a prevote or precommit vote from validators for
              consensus.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              extension:
                description: >-
                  Vote extension provided by the application. Only valid for
                  precommit

                  messages.
                format: byte
                type: string
              extension_signature:
                description: >-
                  Vote extension signature by the validator if they participated
                  in

                  consensus for the associated block.

                  Only valid for precommit messages.
                format: byte
                type: string
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signature:
                description: >-
                  Vote signature by the validator if they participated in
                  consensus for the

                  associated block.
                format: byte
                type: string
              timestamp:
                format: date-time
                type: string
              type:
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                type: string
              validator_address:
                format: byte
                type: string
              validator_index:
                format: int32
                type: integer
            type: object
        type: object
      light_client_attack_evidence:
        description: >-
          LightClientAttackEvidence contains evidence of a set of validators
          attempting to mislead a light client.
        properties:
          byzantine_validators:
            items:
              properties:
                address:
                  format: byte
                  type: string
                proposer_priority:
                  format: int64
                  type: string
                pub_key:
                  properties:
                    ed25519:
                      format: byte
                      type: string
                    secp256k1:
                      format: byte
                      type: string
                  title: PublicKey defines the keys available for use with Validators
                  type: object
                voting_power:
                  format: int64
                  type: string
              type: object
            type: array
          common_height:
            format: int64
            type: string
          conflicting_block:
            properties:
              signed_header:
                properties:
                  commit:
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signatures:
                        items:
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                          properties:
                            block_id_flag:
                              default: BLOCK_ID_FLAG_UNKNOWN
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              title: >-
                                BlockIdFlag indicates which BlockID the
                                signature is for
                              type: string
                            signature:
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            validator_address:
                              format: byte
                              type: string
                          type: object
                        type: array
                    type: object
                  header:
                    description: Header defines the structure of a block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        format: byte
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                type: object
              validator_set:
                properties:
                  proposer:
                    properties:
                      address:
                        format: byte
                        type: string
                      proposer_priority:
                        format: int64
                        type: string
                      pub_key:
                        properties:
                          ed25519:
                            format: byte
                            type: string
                          secp256k1:
                            format: byte
                            type: string
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                        type: object
                      voting_power:
                        format: int64
                        type: string
                    type: object
                  total_voting_power:
                    format: int64
                    type: string
                  validators:
                    items:
                      properties:
                        address:
                          format: byte
                          type: string
                        proposer_priority:
                          format: int64
                          type: string
                        pub_key:
                          properties:
                            ed25519:
                              format: byte
                              type: string
                            secp256k1:
                              format: byte
                              type: string
                          title: >-
                            PublicKey defines the keys available for use with
                            Validators
                          type: object
                        voting_power:
                          format: int64
                          type: string
                      type: object
                    type: array
                type: object
            type: object
          timestamp:
            format: date-time
            type: string
          total_voting_power:
            format: int64
            type: string
        type: object
    type: object
  tendermint.types.EvidenceList:
    properties:
      evidence:
        items:
          properties:
            duplicate_vote_evidence:
              description: >-
                DuplicateVoteEvidence contains evidence of a validator signed
                two conflicting votes.
              properties:
                timestamp:
                  format: date-time
                  type: string
                total_voting_power:
                  format: int64
                  type: string
                validator_power:
                  format: int64
                  type: string
                vote_a:
                  description: >-
                    Vote represents a prevote or precommit vote from validators
                    for

                    consensus.
                  properties:
                    block_id:
                      properties:
                        hash:
                          format: byte
                          type: string
                        part_set_header:
                          properties:
                            hash:
                              format: byte
                              type: string
                            total:
                              format: int64
                              type: integer
                          title: PartsetHeader
                          type: object
                      title: BlockID
                      type: object
                    extension:
                      description: >-
                        Vote extension provided by the application. Only valid
                        for precommit

                        messages.
                      format: byte
                      type: string
                    extension_signature:
                      description: >-
                        Vote extension signature by the validator if they
                        participated in

                        consensus for the associated block.

                        Only valid for precommit messages.
                      format: byte
                      type: string
                    height:
                      format: int64
                      type: string
                    round:
                      format: int32
                      type: integer
                    signature:
                      description: >-
                        Vote signature by the validator if they participated in
                        consensus for the

                        associated block.
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    type:
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      type: string
                    validator_address:
                      format: byte
                      type: string
                    validator_index:
                      format: int32
                      type: integer
                  type: object
                vote_b:
                  description: >-
                    Vote represents a prevote or precommit vote from validators
                    for

                    consensus.
                  properties:
                    block_id:
                      properties:
                        hash:
                          format: byte
                          type: string
                        part_set_header:
                          properties:
                            hash:
                              format: byte
                              type: string
                            total:
                              format: int64
                              type: integer
                          title: PartsetHeader
                          type: object
                      title: BlockID
                      type: object
                    extension:
                      description: >-
                        Vote extension provided by the application. Only valid
                        for precommit

                        messages.
                      format: byte
                      type: string
                    extension_signature:
                      description: >-
                        Vote extension signature by the validator if they
                        participated in

                        consensus for the associated block.

                        Only valid for precommit messages.
                      format: byte
                      type: string
                    height:
                      format: int64
                      type: string
                    round:
                      format: int32
                      type: integer
                    signature:
                      description: >-
                        Vote signature by the validator if they participated in
                        consensus for the

                        associated block.
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    type:
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      type: string
                    validator_address:
                      format: byte
                      type: string
                    validator_index:
                      format: int32
                      type: integer
                  type: object
              type: object
            light_client_attack_evidence:
              description: >-
                LightClientAttackEvidence contains evidence of a set of
                validators attempting to mislead a light client.
              properties:
                byzantine_validators:
                  items:
                    properties:
                      address:
                        format: byte
                        type: string
                      proposer_priority:
                        format: int64
                        type: string
                      pub_key:
                        properties:
                          ed25519:
                            format: byte
                            type: string
                          secp256k1:
                            format: byte
                            type: string
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                        type: object
                      voting_power:
                        format: int64
                        type: string
                    type: object
                  type: array
                common_height:
                  format: int64
                  type: string
                conflicting_block:
                  properties:
                    signed_header:
                      properties:
                        commit:
                          description: >-
                            Commit contains the evidence that a block was
                            committed by a set of validators.
                          properties:
                            block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            height:
                              format: int64
                              type: string
                            round:
                              format: int32
                              type: integer
                            signatures:
                              items:
                                description: >-
                                  CommitSig is a part of the Vote included in a
                                  Commit.
                                properties:
                                  block_id_flag:
                                    default: BLOCK_ID_FLAG_UNKNOWN
                                    enum:
                                      - BLOCK_ID_FLAG_UNKNOWN
                                      - BLOCK_ID_FLAG_ABSENT
                                      - BLOCK_ID_FLAG_COMMIT
                                      - BLOCK_ID_FLAG_NIL
                                    title: >-
                                      BlockIdFlag indicates which BlockID the
                                      signature is for
                                    type: string
                                  signature:
                                    format: byte
                                    type: string
                                  timestamp:
                                    format: date-time
                                    type: string
                                  validator_address:
                                    format: byte
                                    type: string
                                type: object
                              type: array
                          type: object
                        header:
                          description: Header defines the structure of a block header.
                          properties:
                            app_hash:
                              format: byte
                              type: string
                            chain_id:
                              type: string
                            consensus_hash:
                              format: byte
                              type: string
                            data_hash:
                              format: byte
                              type: string
                            evidence_hash:
                              format: byte
                              title: consensus info
                              type: string
                            height:
                              format: int64
                              type: string
                            last_block_id:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                part_set_header:
                                  properties:
                                    hash:
                                      format: byte
                                      type: string
                                    total:
                                      format: int64
                                      type: integer
                                  title: PartsetHeader
                                  type: object
                              title: BlockID
                              type: object
                            last_commit_hash:
                              format: byte
                              title: hashes of block data
                              type: string
                            last_results_hash:
                              format: byte
                              type: string
                            next_validators_hash:
                              format: byte
                              type: string
                            proposer_address:
                              format: byte
                              type: string
                            time:
                              format: date-time
                              type: string
                            validators_hash:
                              format: byte
                              title: hashes from the app output from the prev block
                              type: string
                            version:
                              title: basic block info
                              description: >-
                                Consensus captures the consensus rules for
                                processing a block in the blockchain,

                                including all blockchain data structures and the
                                rules of the application's

                                state transition machine.
                              properties:
                                app:
                                  format: uint64
                                  type: string
                                block:
                                  format: uint64
                                  type: string
                              type: object
                          type: object
                      type: object
                    validator_set:
                      properties:
                        proposer:
                          properties:
                            address:
                              format: byte
                              type: string
                            proposer_priority:
                              format: int64
                              type: string
                            pub_key:
                              properties:
                                ed25519:
                                  format: byte
                                  type: string
                                secp256k1:
                                  format: byte
                                  type: string
                              title: >-
                                PublicKey defines the keys available for use
                                with Validators
                              type: object
                            voting_power:
                              format: int64
                              type: string
                          type: object
                        total_voting_power:
                          format: int64
                          type: string
                        validators:
                          items:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          type: array
                      type: object
                  type: object
                timestamp:
                  format: date-time
                  type: string
                total_voting_power:
                  format: int64
                  type: string
              type: object
          type: object
        type: array
    type: object
  tendermint.types.EvidenceParams:
    description: EvidenceParams determine how we handle evidence of malfeasance.
    properties:
      max_age_duration:
        description: >-
          Max age of evidence, in time.


          It should correspond with an app's "unbonding period" or other similar

          mechanism for handling [Nothing-At-Stake

          attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
        type: string
      max_age_num_blocks:
        description: >-
          Max age of evidence, in blocks.


          The basic formula for calculating this is: MaxAgeDuration / {average
          block

          time}.
        format: int64
        type: string
      max_bytes:
        format: int64
        title: >-
          This sets the maximum size of total evidence in bytes that can be
          committed in a single block.

          and should fall comfortably under the max block bytes.

          Default is 1048576 or 1MB
        type: string
    type: object
  tendermint.types.Header:
    description: Header defines the structure of a block header.
    properties:
      app_hash:
        format: byte
        type: string
      chain_id:
        type: string
      consensus_hash:
        format: byte
        type: string
      data_hash:
        format: byte
        type: string
      evidence_hash:
        format: byte
        title: consensus info
        type: string
      height:
        format: int64
        type: string
      last_block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      last_commit_hash:
        format: byte
        title: hashes of block data
        type: string
      last_results_hash:
        format: byte
        type: string
      next_validators_hash:
        format: byte
        type: string
      proposer_address:
        format: byte
        type: string
      time:
        format: date-time
        type: string
      validators_hash:
        format: byte
        title: hashes from the app output from the prev block
        type: string
      version:
        title: basic block info
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
        properties:
          app:
            format: uint64
            type: string
          block:
            format: uint64
            type: string
        type: object
    type: object
  tendermint.types.LightBlock:
    properties:
      signed_header:
        properties:
          commit:
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
            properties:
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              height:
                format: int64
                type: string
              round:
                format: int32
                type: integer
              signatures:
                items:
                  description: CommitSig is a part of the Vote included in a Commit.
                  properties:
                    block_id_flag:
                      default: BLOCK_ID_FLAG_UNKNOWN
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      title: BlockIdFlag indicates which BlockID the signature is for
                      type: string
                    signature:
                      format: byte
                      type: string
                    timestamp:
                      format: date-time
                      type: string
                    validator_address:
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
          header:
            description: Header defines the structure of a block header.
            properties:
              app_hash:
                format: byte
                type: string
              chain_id:
                type: string
              consensus_hash:
                format: byte
                type: string
              data_hash:
                format: byte
                type: string
              evidence_hash:
                format: byte
                title: consensus info
                type: string
              height:
                format: int64
                type: string
              last_block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              last_commit_hash:
                format: byte
                title: hashes of block data
                type: string
              last_results_hash:
                format: byte
                type: string
              next_validators_hash:
                format: byte
                type: string
              proposer_address:
                format: byte
                type: string
              time:
                format: date-time
                type: string
              validators_hash:
                format: byte
                title: hashes from the app output from the prev block
                type: string
              version:
                title: basic block info
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
                properties:
                  app:
                    format: uint64
                    type: string
                  block:
                    format: uint64
                    type: string
                type: object
            type: object
        type: object
      validator_set:
        properties:
          proposer:
            properties:
              address:
                format: byte
                type: string
              proposer_priority:
                format: int64
                type: string
              pub_key:
                properties:
                  ed25519:
                    format: byte
                    type: string
                  secp256k1:
                    format: byte
                    type: string
                title: PublicKey defines the keys available for use with Validators
                type: object
              voting_power:
                format: int64
                type: string
            type: object
          total_voting_power:
            format: int64
            type: string
          validators:
            items:
              properties:
                address:
                  format: byte
                  type: string
                proposer_priority:
                  format: int64
                  type: string
                pub_key:
                  properties:
                    ed25519:
                      format: byte
                      type: string
                    secp256k1:
                      format: byte
                      type: string
                  title: PublicKey defines the keys available for use with Validators
                  type: object
                voting_power:
                  format: int64
                  type: string
              type: object
            type: array
        type: object
    type: object
  tendermint.types.LightClientAttackEvidence:
    description: >-
      LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
    properties:
      byzantine_validators:
        items:
          properties:
            address:
              format: byte
              type: string
            proposer_priority:
              format: int64
              type: string
            pub_key:
              properties:
                ed25519:
                  format: byte
                  type: string
                secp256k1:
                  format: byte
                  type: string
              title: PublicKey defines the keys available for use with Validators
              type: object
            voting_power:
              format: int64
              type: string
          type: object
        type: array
      common_height:
        format: int64
        type: string
      conflicting_block:
        properties:
          signed_header:
            properties:
              commit:
                description: >-
                  Commit contains the evidence that a block was committed by a
                  set of validators.
                properties:
                  block_id:
                    properties:
                      hash:
                        format: byte
                        type: string
                      part_set_header:
                        properties:
                          hash:
                            format: byte
                            type: string
                          total:
                            format: int64
                            type: integer
                        title: PartsetHeader
                        type: object
                    title: BlockID
                    type: object
                  height:
                    format: int64
                    type: string
                  round:
                    format: int32
                    type: integer
                  signatures:
                    items:
                      description: CommitSig is a part of the Vote included in a Commit.
                      properties:
                        block_id_flag:
                          default: BLOCK_ID_FLAG_UNKNOWN
                          enum:
                            - BLOCK_ID_FLAG_UNKNOWN
                            - BLOCK_ID_FLAG_ABSENT
                            - BLOCK_ID_FLAG_COMMIT
                            - BLOCK_ID_FLAG_NIL
                          title: >-
                            BlockIdFlag indicates which BlockID the signature is
                            for
                          type: string
                        signature:
                          format: byte
                          type: string
                        timestamp:
                          format: date-time
                          type: string
                        validator_address:
                          format: byte
                          type: string
                      type: object
                    type: array
                type: object
              header:
                description: Header defines the structure of a block header.
                properties:
                  app_hash:
                    format: byte
                    type: string
                  chain_id:
                    type: string
                  consensus_hash:
                    format: byte
                    type: string
                  data_hash:
                    format: byte
                    type: string
                  evidence_hash:
                    format: byte
                    title: consensus info
                    type: string
                  height:
                    format: int64
                    type: string
                  last_block_id:
                    properties:
                      hash:
                        format: byte
                        type: string
                      part_set_header:
                        properties:
                          hash:
                            format: byte
                            type: string
                          total:
                            format: int64
                            type: integer
                        title: PartsetHeader
                        type: object
                    title: BlockID
                    type: object
                  last_commit_hash:
                    format: byte
                    title: hashes of block data
                    type: string
                  last_results_hash:
                    format: byte
                    type: string
                  next_validators_hash:
                    format: byte
                    type: string
                  proposer_address:
                    format: byte
                    type: string
                  time:
                    format: date-time
                    type: string
                  validators_hash:
                    format: byte
                    title: hashes from the app output from the prev block
                    type: string
                  version:
                    title: basic block info
                    description: >-
                      Consensus captures the consensus rules for processing a
                      block in the blockchain,

                      including all blockchain data structures and the rules of
                      the application's

                      state transition machine.
                    properties:
                      app:
                        format: uint64
                        type: string
                      block:
                        format: uint64
                        type: string
                    type: object
                type: object
            type: object
          validator_set:
            properties:
              proposer:
                properties:
                  address:
                    format: byte
                    type: string
                  proposer_priority:
                    format: int64
                    type: string
                  pub_key:
                    properties:
                      ed25519:
                        format: byte
                        type: string
                      secp256k1:
                        format: byte
                        type: string
                    title: >-
                      PublicKey defines the keys available for use with
                      Validators
                    type: object
                  voting_power:
                    format: int64
                    type: string
                type: object
              total_voting_power:
                format: int64
                type: string
              validators:
                items:
                  properties:
                    address:
                      format: byte
                      type: string
                    proposer_priority:
                      format: int64
                      type: string
                    pub_key:
                      properties:
                        ed25519:
                          format: byte
                          type: string
                        secp256k1:
                          format: byte
                          type: string
                      title: >-
                        PublicKey defines the keys available for use with
                        Validators
                      type: object
                    voting_power:
                      format: int64
                      type: string
                  type: object
                type: array
            type: object
        type: object
      timestamp:
        format: date-time
        type: string
      total_voting_power:
        format: int64
        type: string
    type: object
  tendermint.types.PartSetHeader:
    properties:
      hash:
        format: byte
        type: string
      total:
        format: int64
        type: integer
    title: PartsetHeader
    type: object
  tendermint.types.SignedHeader:
    properties:
      commit:
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
        properties:
          block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          height:
            format: int64
            type: string
          round:
            format: int32
            type: integer
          signatures:
            items:
              description: CommitSig is a part of the Vote included in a Commit.
              properties:
                block_id_flag:
                  default: BLOCK_ID_FLAG_UNKNOWN
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  title: BlockIdFlag indicates which BlockID the signature is for
                  type: string
                signature:
                  format: byte
                  type: string
                timestamp:
                  format: date-time
                  type: string
                validator_address:
                  format: byte
                  type: string
              type: object
            type: array
        type: object
      header:
        description: Header defines the structure of a block header.
        properties:
          app_hash:
            format: byte
            type: string
          chain_id:
            type: string
          consensus_hash:
            format: byte
            type: string
          data_hash:
            format: byte
            type: string
          evidence_hash:
            format: byte
            title: consensus info
            type: string
          height:
            format: int64
            type: string
          last_block_id:
            properties:
              hash:
                format: byte
                type: string
              part_set_header:
                properties:
                  hash:
                    format: byte
                    type: string
                  total:
                    format: int64
                    type: integer
                title: PartsetHeader
                type: object
            title: BlockID
            type: object
          last_commit_hash:
            format: byte
            title: hashes of block data
            type: string
          last_results_hash:
            format: byte
            type: string
          next_validators_hash:
            format: byte
            type: string
          proposer_address:
            format: byte
            type: string
          time:
            format: date-time
            type: string
          validators_hash:
            format: byte
            title: hashes from the app output from the prev block
            type: string
          version:
            title: basic block info
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
            properties:
              app:
                format: uint64
                type: string
              block:
                format: uint64
                type: string
            type: object
        type: object
    type: object
  tendermint.types.SignedMsgType:
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
    enum:
      - SIGNED_MSG_TYPE_UNKNOWN
      - SIGNED_MSG_TYPE_PREVOTE
      - SIGNED_MSG_TYPE_PRECOMMIT
      - SIGNED_MSG_TYPE_PROPOSAL
    type: string
  tendermint.types.Validator:
    properties:
      address:
        format: byte
        type: string
      proposer_priority:
        format: int64
        type: string
      pub_key:
        properties:
          ed25519:
            format: byte
            type: string
          secp256k1:
            format: byte
            type: string
        title: PublicKey defines the keys available for use with Validators
        type: object
      voting_power:
        format: int64
        type: string
    type: object
  tendermint.types.ValidatorParams:
    description: |-
      ValidatorParams restrict the public key types validators can use.
      NOTE: uses ABCI pubkey naming, not Amino names.
    properties:
      pub_key_types:
        items:
          type: string
        type: array
    type: object
  tendermint.types.ValidatorSet:
    properties:
      proposer:
        properties:
          address:
            format: byte
            type: string
          proposer_priority:
            format: int64
            type: string
          pub_key:
            properties:
              ed25519:
                format: byte
                type: string
              secp256k1:
                format: byte
                type: string
            title: PublicKey defines the keys available for use with Validators
            type: object
          voting_power:
            format: int64
            type: string
        type: object
      total_voting_power:
        format: int64
        type: string
      validators:
        items:
          properties:
            address:
              format: byte
              type: string
            proposer_priority:
              format: int64
              type: string
            pub_key:
              properties:
                ed25519:
                  format: byte
                  type: string
                secp256k1:
                  format: byte
                  type: string
              title: PublicKey defines the keys available for use with Validators
              type: object
            voting_power:
              format: int64
              type: string
          type: object
        type: array
    type: object
  tendermint.types.VersionParams:
    description: VersionParams contains the ABCI application version.
    properties:
      app:
        format: uint64
        type: string
    type: object
  tendermint.types.Vote:
    description: |-
      Vote represents a prevote or precommit vote from validators for
      consensus.
    properties:
      block_id:
        properties:
          hash:
            format: byte
            type: string
          part_set_header:
            properties:
              hash:
                format: byte
                type: string
              total:
                format: int64
                type: integer
            title: PartsetHeader
            type: object
        title: BlockID
        type: object
      extension:
        description: |-
          Vote extension provided by the application. Only valid for precommit
          messages.
        format: byte
        type: string
      extension_signature:
        description: |-
          Vote extension signature by the validator if they participated in
          consensus for the associated block.
          Only valid for precommit messages.
        format: byte
        type: string
      height:
        format: int64
        type: string
      round:
        format: int32
        type: integer
      signature:
        description: >-
          Vote signature by the validator if they participated in consensus for
          the

          associated block.
        format: byte
        type: string
      timestamp:
        format: date-time
        type: string
      type:
        default: SIGNED_MSG_TYPE_UNKNOWN
        description: |-
          SignedMsgType is a type of signed message in the consensus.

           - SIGNED_MSG_TYPE_PREVOTE: Votes
           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
        enum:
          - SIGNED_MSG_TYPE_UNKNOWN
          - SIGNED_MSG_TYPE_PREVOTE
          - SIGNED_MSG_TYPE_PRECOMMIT
          - SIGNED_MSG_TYPE_PROPOSAL
        type: string
      validator_address:
        format: byte
        type: string
      validator_index:
        format: int32
        type: integer
    type: object
  tendermint.version.Consensus:
    description: >-
      Consensus captures the consensus rules for processing a block in the
      blockchain,

      including all blockchain data structures and the rules of the
      application's

      state transition machine.
    properties:
      app:
        format: uint64
        type: string
      block:
        format: uint64
        type: string
    type: object
  testpb.EchoResponse:
    properties:
      message:
        type: string
    type: object
  testpb.HasAnimal:
    properties:
      animal:
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        properties:
          type_url:
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
            type: string
          value:
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
            format: byte
            type: string
        type: object
      x:
        format: int64
        type: string
    type: object
  testpb.SayHelloResponse:
    properties:
      greeting:
        type: string
    type: object
  testpb.TestAnyResponse:
    properties:
      has_animal:
        properties:
          animal:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          x:
            format: int64
            type: string
        type: object
    type: object
info:
  title: Nolus Protocol
  version: nolus-core
paths:
  /cosmos/auth/v1beta1/account_info/{address}:
    get:
      description: 'Since: cosmos-sdk 0.47'
      operationId: AccountInfo
      parameters:
        - description: address is the account address string.
          in: path
          name: address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryAccountInfoResponse is the Query/AccountInfo response type.

              Since: cosmos-sdk 0.47
            properties:
              info:
                description: info is the account info which is represented by BaseAccount.
                properties:
                  account_number:
                    format: uint64
                    type: string
                  address:
                    type: string
                  pub_key:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  sequence:
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AccountInfo queries account info which is common to all account types.
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.


        Since: cosmos-sdk 0.43
      operationId: Accounts
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAccountsResponse is the response type for the Query/Accounts
              RPC method.


              Since: cosmos-sdk 0.43
            properties:
              accounts:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                title: accounts are the existing accounts
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Accounts returns all the existing accounts.
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      operationId: Account
      parameters:
        - description: address defines the address to query for.
          in: path
          name: address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
            properties:
              account:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Account returns account details based on address.
      tags:
        - Query
  /cosmos/auth/v1beta1/address_by_id/{id}:
    get:
      description: 'Since: cosmos-sdk 0.46.2'
      operationId: AccountAddressByID
      parameters:
        - description: |-
            Deprecated, use account_id instead

            id is the account number of the address to be queried. This field
            should have been an uint64 (like all account numbers), and will be
            updated to uint64 in a future version of the auth query.
          format: int64
          in: path
          name: id
          required: true
          type: string
        - description: |-
            account_id is the account number of the address to be queried.

            Since: cosmos-sdk 0.47
          format: uint64
          in: query
          name: account_id
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: 'Since: cosmos-sdk 0.46.2'
            properties:
              account_address:
                type: string
            title: >-
              QueryAccountAddressByIDResponse is the response type for
              AccountAddressByID rpc method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AccountAddressByID returns account address based on account number.
      tags:
        - Query
  /cosmos/auth/v1beta1/bech32:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: Bech32Prefix
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              Bech32PrefixResponse is the response type for Bech32Prefix rpc
              method.


              Since: cosmos-sdk 0.46
            properties:
              bech32_prefix:
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Bech32Prefix queries bech32Prefix
      tags:
        - Query
  /cosmos/auth/v1beta1/bech32/{address_bytes}:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: AddressBytesToString
      parameters:
        - format: byte
          in: path
          name: address_bytes
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              AddressBytesToStringResponse is the response type for
              AddressString rpc method.


              Since: cosmos-sdk 0.46
            properties:
              address_string:
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AddressBytesToString converts Account Address bytes to string
      tags:
        - Query
  /cosmos/auth/v1beta1/bech32/{address_string}:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: AddressStringToBytes
      parameters:
        - in: path
          name: address_string
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              AddressStringToBytesResponse is the response type for AddressBytes
              rpc method.


              Since: cosmos-sdk 0.46
            properties:
              address_bytes:
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AddressStringToBytes converts Address string to bytes
      tags:
        - Query
  /cosmos/auth/v1beta1/module_accounts:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: ModuleAccounts
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryModuleAccountsResponse is the response type for the
              Query/ModuleAccounts RPC method.


              Since: cosmos-sdk 0.46
            properties:
              accounts:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ModuleAccounts returns all the existing module accounts.
      tags:
        - Query
  /cosmos/auth/v1beta1/module_accounts/{name}:
    get:
      operationId: ModuleAccountByName
      parameters:
        - in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryModuleAccountByNameResponse is the response type for the
              Query/ModuleAccountByName RPC method.
            properties:
              account:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ModuleAccountByName returns the module account info by module name
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  max_memo_characters:
                    format: uint64
                    type: string
                  sig_verify_cost_ed25519:
                    format: uint64
                    type: string
                  sig_verify_cost_secp256k1:
                    format: uint64
                    type: string
                  tx_sig_limit:
                    format: uint64
                    type: string
                  tx_size_cost_per_byte:
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters.
      tags:
        - Query
  /cosmos/authz/v1beta1/grants:
    get:
      operationId: Grants
      parameters:
        - in: query
          name: granter
          required: false
          type: string
        - in: query
          name: grantee
          required: false
          type: string
        - description: >-
            Optional, msg_type_url, when set, will query only grants matching
            given msg type.
          in: query
          name: msg_type_url
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGrantsResponse is the response type for the
              Query/Authorizations RPC method.
            properties:
              grants:
                description: >-
                  authorizations is a list of grants granted for grantee by
                  granter.
                items:
                  description: |-
                    Grant gives permissions to execute
                    the provide method with expiration time.
                  properties:
                    authorization:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    expiration:
                      format: date-time
                      title: >-
                        time when the grant will expire and will be pruned. If
                        null, then the grant

                        doesn't have a time expiration (other conditions  in
                        `authorization`

                        may apply to invalidate the grant)
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Returns list of `Authorization`, granted to the grantee by the granter.
      tags:
        - Query
  /cosmos/authz/v1beta1/grants/grantee/{grantee}:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: GranteeGrants
      parameters:
        - in: path
          name: grantee
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGranteeGrantsResponse is the response type for the
              Query/GranteeGrants RPC method.
            properties:
              grants:
                description: grants is a list of grants granted to the grantee.
                items:
                  properties:
                    authorization:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    expiration:
                      format: date-time
                      type: string
                    grantee:
                      type: string
                    granter:
                      type: string
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                  type: object
                type: array
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GranteeGrants returns a list of `GrantAuthorization` by grantee.
      tags:
        - Query
  /cosmos/authz/v1beta1/grants/granter/{granter}:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: GranterGrants
      parameters:
        - in: path
          name: granter
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGranterGrantsResponse is the response type for the
              Query/GranterGrants RPC method.
            properties:
              grants:
                description: grants is a list of grants granted by the granter.
                items:
                  properties:
                    authorization:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    expiration:
                      format: date-time
                      type: string
                    grantee:
                      type: string
                    granter:
                      type: string
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                  type: object
                type: array
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GranterGrants returns list of `GrantAuthorization`, granted by granter.
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: AllBalances
      parameters:
        - description: address is the address to query balances for.
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
        - description: >-
            resolve_denom is the flag to resolve the denom into a human-readable
            form from the metadata.


            Since: cosmos-sdk 0.50
          in: query
          name: resolve_denom
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC

              method.
            properties:
              balances:
                description: balances is the balances of all the coins.
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AllBalances queries the balance of all coins for a single account.
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}/by_denom:
    get:
      operationId: Balance
      parameters:
        - description: address is the address to query balances for.
          in: path
          name: address
          required: true
          type: string
        - description: denom is the coin denom to query balances for.
          in: query
          name: denom
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
            properties:
              balance:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Balance queries the balance of a single coin for a single account.
      tags:
        - Query
  /cosmos/bank/v1beta1/denom_owners/{denom}:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.


        Since: cosmos-sdk 0.46
      operationId: DenomOwners
      parameters:
        - description: >-
            denom defines the coin denomination to query all account holders
            for.
          in: path
          name: denom
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomOwnersResponse defines the RPC response of a DenomOwners
              RPC query.


              Since: cosmos-sdk 0.46
            properties:
              denom_owners:
                items:
                  description: >-
                    DenomOwner defines structure representing an account that
                    owns or holds a

                    particular denominated token. It contains the account
                    address and account

                    balance of the denominated token.


                    Since: cosmos-sdk 0.46
                  properties:
                    address:
                      description: >-
                        address defines the address that owns a particular
                        denomination.
                      type: string
                    balance:
                      description: >-
                        balance is the balance of the denominated coin for an
                        account.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        DenomOwners queries for all account addresses that own a particular
        token

        denomination.
      tags:
        - Query
  /cosmos/bank/v1beta1/denom_owners_by_query:
    get:
      description: 'Since: cosmos-sdk 0.50.3'
      operationId: DenomOwnersByQuery
      parameters:
        - description: >-
            denom defines the coin denomination to query all account holders
            for.
          in: query
          name: denom
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomOwnersByQueryResponse defines the RPC response of a
              DenomOwnersByQuery RPC query.


              Since: cosmos-sdk 0.50.3
            properties:
              denom_owners:
                items:
                  description: >-
                    DenomOwner defines structure representing an account that
                    owns or holds a

                    particular denominated token. It contains the account
                    address and account

                    balance of the denominated token.


                    Since: cosmos-sdk 0.46
                  properties:
                    address:
                      description: >-
                        address defines the address that owns a particular
                        denomination.
                      type: string
                    balance:
                      description: >-
                        balance is the balance of the denominated coin for an
                        account.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        DenomOwnersByQuery queries for all account addresses that own a
        particular token

        denomination.
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      operationId: DenomsMetadata
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomsMetadataResponse is the response type for the
              Query/DenomsMetadata RPC

              method.
            properties:
              metadatas:
                description: >-
                  metadata provides the client information for all the
                  registered tokens.
                items:
                  description: |-
                    Metadata represents a struct that describes
                    a basic token.
                  properties:
                    base:
                      description: >-
                        base represents the base denom (should be the DenomUnit
                        with exponent = 0).
                      type: string
                    denom_units:
                      items:
                        description: |-
                          DenomUnit represents a struct that describes a given
                          denomination unit of the basic token.
                        properties:
                          aliases:
                            items:
                              type: string
                            title: >-
                              aliases is a list of string aliases for the given
                              denom
                            type: array
                          denom:
                            description: >-
                              denom represents the string name of the given
                              denom unit (e.g uatom).
                            type: string
                          exponent:
                            description: >-
                              exponent represents power of 10 exponent that one
                              must

                              raise the base_denom to in order to equal the
                              given DenomUnit's denom

                              1 denom = 10^exponent base_denom

                              (e.g. with a base_denom of uatom, one can create a
                              DenomUnit of 'atom' with

                              exponent = 6, thus: 1 atom = 10^6 uatom).
                            format: int64
                            type: integer
                        type: object
                      title: >-
                        denom_units represents the list of DenomUnit's for a
                        given coin
                      type: array
                    description:
                      type: string
                    display:
                      description: |-
                        display indicates the suggested denom that should be
                        displayed in clients.
                      type: string
                    name:
                      description: 'Since: cosmos-sdk 0.43'
                      title: 'name defines the name of the token (eg: Cosmos Atom)'
                      type: string
                    symbol:
                      description: >-
                        symbol is the token symbol usually shown on exchanges
                        (eg: ATOM). This can

                        be the same as the display.


                        Since: cosmos-sdk 0.43
                      type: string
                    uri:
                      description: >-
                        URI to a document (on or off-chain) that contains
                        additional information. Optional.


                        Since: cosmos-sdk 0.46
                      type: string
                    uri_hash:
                      description: >-
                        URIHash is a sha256 hash of a document pointed by URI.
                        It's used to verify that

                        the document didn't change. Optional.


                        Since: cosmos-sdk 0.46
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      operationId: DenomMetadata
      parameters:
        - description: denom is the coin denom to query the metadata for.
          in: path
          name: denom
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata RPC

              method.
            properties:
              metadata:
                description: >-
                  metadata describes and provides all the client information for
                  the requested token.
                properties:
                  base:
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                    type: string
                  denom_units:
                    items:
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                      properties:
                        aliases:
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                          type: array
                        denom:
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                          type: string
                        exponent:
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 10^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                          format: int64
                          type: integer
                      type: object
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                    type: array
                  description:
                    type: string
                  display:
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                    type: string
                  name:
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                    type: string
                  symbol:
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                    type: string
                  uri:
                    description: >-
                      URI to a document (on or off-chain) that contains
                      additional information. Optional.


                      Since: cosmos-sdk 0.46
                    type: string
                  uri_hash:
                    description: >-
                      URIHash is a sha256 hash of a document pointed by URI.
                      It's used to verify that

                      the document didn't change. Optional.


                      Since: cosmos-sdk 0.46
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DenomMetadata queries the client metadata of a given coin denomination.
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata_by_query_string:
    get:
      operationId: DenomMetadataByQueryString
      parameters:
        - description: denom is the coin denom to query the metadata for.
          in: query
          name: denom
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomMetadataByQueryStringResponse is the response type for
              the Query/DenomMetadata RPC

              method. Identical with QueryDenomMetadataResponse but receives
              denom as query string in request.
            properties:
              metadata:
                description: >-
                  metadata describes and provides all the client information for
                  the requested token.
                properties:
                  base:
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                    type: string
                  denom_units:
                    items:
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                      properties:
                        aliases:
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                          type: array
                        denom:
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                          type: string
                        exponent:
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 10^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                          format: int64
                          type: integer
                      type: object
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                    type: array
                  description:
                    type: string
                  display:
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                    type: string
                  name:
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                    type: string
                  symbol:
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                    type: string
                  uri:
                    description: >-
                      URI to a document (on or off-chain) that contains
                      additional information. Optional.


                      Since: cosmos-sdk 0.46
                    type: string
                  uri_hash:
                    description: >-
                      URIHash is a sha256 hash of a document pointed by URI.
                      It's used to verify that

                      the document didn't change. Optional.


                      Since: cosmos-sdk 0.46
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        DenomMetadataByQueryString queries the client metadata of a given coin
        denomination.
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
            properties:
              params:
                description: params provides the parameters of the bank module.
                properties:
                  default_send_enabled:
                    type: boolean
                  send_enabled:
                    description: >-
                      Deprecated: Use of SendEnabled in params is deprecated.

                      For genesis, use the newly added send_enabled field in the
                      genesis object.

                      Storage, lookup, and manipulation of this information is
                      now in the keeper.


                      As of cosmos-sdk 0.47, this only exists for backwards
                      compatibility of genesis files.
                    items:
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      type: object
                    type: array
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries the parameters of x/bank module.
      tags:
        - Query
  /cosmos/bank/v1beta1/send_enabled:
    get:
      description: >-
        This query only returns denominations that have specific SendEnabled
        settings.

        Any denomination that does not have a specific setting will use the
        default

        params.default_send_enabled, and will not be returned by this query.


        Since: cosmos-sdk 0.47
      operationId: SendEnabled
      parameters:
        - collectionFormat: multi
          description: >-
            denoms is the specific denoms you want look up. Leave empty to get
            all entries.
          in: query
          items:
            type: string
          name: denoms
          required: false
          type: array
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QuerySendEnabledResponse defines the RPC response of a SendEnable
              query.


              Since: cosmos-sdk 0.47
            properties:
              pagination:
                description: >-
                  pagination defines the pagination in the response. This field
                  is only

                  populated if the denoms field in the request is empty.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              send_enabled:
                items:
                  description: >-
                    SendEnabled maps coin denom to a send_enabled status
                    (whether a denom is

                    sendable).
                  properties:
                    denom:
                      type: string
                    enabled:
                      type: boolean
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: SendEnabled queries for SendEnabled entries.
      tags:
        - Query
  /cosmos/bank/v1beta1/spendable_balances/{address}:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.


        Since: cosmos-sdk 0.46
      operationId: SpendableBalances
      parameters:
        - description: address is the address to query spendable balances for.
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QuerySpendableBalancesResponse defines the gRPC response structure
              for querying

              an account's spendable balances.


              Since: cosmos-sdk 0.46
            properties:
              balances:
                description: balances is the spendable balances of all the coins.
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        SpendableBalances queries the spendable balance of all coins for a
        single

        account.
      tags:
        - Query
  /cosmos/bank/v1beta1/spendable_balances/{address}/by_denom:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.


        Since: cosmos-sdk 0.47
      operationId: SpendableBalanceByDenom
      parameters:
        - description: address is the address to query balances for.
          in: path
          name: address
          required: true
          type: string
        - description: denom is the coin denom to query balances for.
          in: query
          name: denom
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QuerySpendableBalanceByDenomResponse defines the gRPC response
              structure for

              querying an account's spendable balance for a specific denom.


              Since: cosmos-sdk 0.47
            properties:
              balance:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        SpendableBalanceByDenom queries the spendable balance of a single denom
        for

        a single account.
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: TotalSupply
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              pagination:
                description: |-
                  pagination defines the pagination in the response.

                  Since: cosmos-sdk 0.43
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              supply:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: supply is the supply of the coins
                type: array
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC

              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: TotalSupply queries the total supply of all coins.
      tags:
        - Query
  /cosmos/bank/v1beta1/supply/by_denom:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: SupplyOf
      parameters:
        - description: denom is the coin denom to query balances for.
          in: query
          name: denom
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
            properties:
              amount:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: SupplyOf queries the supply of a single coin.
      tags:
        - Query
  /cosmos/base/node/v1beta1/config:
    get:
      operationId: Config
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              ConfigResponse defines the response structure for the Config gRPC
              query.
            properties:
              halt_height:
                format: uint64
                type: string
              minimum_gas_price:
                type: string
              pruning_interval:
                type: string
              pruning_keep_recent:
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Config queries for the operator configuration.
      tags:
        - Service
  /cosmos/base/node/v1beta1/status:
    get:
      operationId: Status
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              StateResponse defines the response structure for the status of a
              node.
            properties:
              app_hash:
                format: byte
                type: string
              earliest_store_height:
                format: uint64
                type: string
              height:
                format: uint64
                type: string
              timestamp:
                format: date-time
                type: string
              validator_hash:
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Status queries for the node status.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/abci_query:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: ABCIQuery
      parameters:
        - format: byte
          in: query
          name: data
          required: false
          type: string
        - in: query
          name: path
          required: false
          type: string
        - format: int64
          in: query
          name: height
          required: false
          type: string
        - in: query
          name: prove
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              ABCIQueryResponse defines the response structure for the ABCIQuery
              gRPC query.


              Note: This type is a duplicate of the ResponseQuery proto type
              defined in

              Tendermint.
            properties:
              code:
                format: int64
                type: integer
              codespace:
                type: string
              height:
                format: int64
                type: string
              index:
                format: int64
                type: string
              info:
                type: string
              key:
                format: byte
                type: string
              log:
                type: string
              proof_ops:
                description: >-
                  ProofOps is Merkle proof defined by the list of ProofOps.


                  Note: This type is a duplicate of the ProofOps proto type
                  defined in Tendermint.
                properties:
                  ops:
                    items:
                      description: >-
                        ProofOp defines an operation used for calculating Merkle
                        root. The data could

                        be arbitrary format, providing necessary data for
                        example neighbouring node

                        hash.


                        Note: This type is a duplicate of the ProofOp proto type
                        defined in Tendermint.
                      properties:
                        data:
                          format: byte
                          type: string
                        key:
                          format: byte
                          type: string
                        type:
                          type: string
                      type: object
                    type: array
                type: object
              value:
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ABCIQuery defines a query handler that supports ABCI queries directly to
        the

        application, bypassing Tendermint completely. The ABCI query must
        contain

        a valid and supported path, including app, custom, p2p, and store.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      operationId: GetLatestBlock
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetLatestBlockResponse is the response type for the
              Query/GetLatestBlock RPC method.
            properties:
              block:
                title: 'Deprecated: please use `sdk_block` instead'
                properties:
                  data:
                    properties:
                      txs:
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                        items:
                          format: byte
                          type: string
                        type: array
                    title: >-
                      Data contains the set of transactions included in the
                      block
                    type: object
                  evidence:
                    properties:
                      evidence:
                        items:
                          properties:
                            duplicate_vote_evidence:
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                              properties:
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                                validator_power:
                                  format: int64
                                  type: string
                                vote_a:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                                vote_b:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            light_client_attack_evidence:
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                              properties:
                                byzantine_validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                                common_height:
                                  format: int64
                                  type: string
                                conflicting_block:
                                  properties:
                                    signed_header:
                                      properties:
                                        commit:
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                          properties:
                                            block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            height:
                                              format: int64
                                              type: string
                                            round:
                                              format: int32
                                              type: integer
                                            signatures:
                                              items:
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                                properties:
                                                  block_id_flag:
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    title: >-
                                                      BlockIdFlag indicates which BlockID the
                                                      signature is for
                                                    type: string
                                                  signature:
                                                    format: byte
                                                    type: string
                                                  timestamp:
                                                    format: date-time
                                                    type: string
                                                  validator_address:
                                                    format: byte
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                        header:
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                          properties:
                                            app_hash:
                                              format: byte
                                              type: string
                                            chain_id:
                                              type: string
                                            consensus_hash:
                                              format: byte
                                              type: string
                                            data_hash:
                                              format: byte
                                              type: string
                                            evidence_hash:
                                              format: byte
                                              title: consensus info
                                              type: string
                                            height:
                                              format: int64
                                              type: string
                                            last_block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            last_commit_hash:
                                              format: byte
                                              title: hashes of block data
                                              type: string
                                            last_results_hash:
                                              format: byte
                                              type: string
                                            next_validators_hash:
                                              format: byte
                                              type: string
                                            proposer_address:
                                              format: byte
                                              type: string
                                            time:
                                              format: date-time
                                              type: string
                                            validators_hash:
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                              type: string
                                            version:
                                              title: basic block info
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                              properties:
                                                app:
                                                  format: uint64
                                                  type: string
                                                block:
                                                  format: uint64
                                                  type: string
                                              type: object
                                          type: object
                                      type: object
                                    validator_set:
                                      properties:
                                        proposer:
                                          properties:
                                            address:
                                              format: byte
                                              type: string
                                            proposer_priority:
                                              format: int64
                                              type: string
                                            pub_key:
                                              properties:
                                                ed25519:
                                                  format: byte
                                                  type: string
                                                secp256k1:
                                                  format: byte
                                                  type: string
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                              type: object
                                            voting_power:
                                              format: int64
                                              type: string
                                          type: object
                                        total_voting_power:
                                          format: int64
                                          type: string
                                        validators:
                                          items:
                                            properties:
                                              address:
                                                format: byte
                                                type: string
                                              proposer_priority:
                                                format: int64
                                                type: string
                                              pub_key:
                                                properties:
                                                  ed25519:
                                                    format: byte
                                                    type: string
                                                  secp256k1:
                                                    format: byte
                                                    type: string
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                                type: object
                                              voting_power:
                                                format: int64
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                              type: object
                          type: object
                        type: array
                    type: object
                  header:
                    description: Header defines the structure of a block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        format: byte
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                  last_commit:
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signatures:
                        items:
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                          properties:
                            block_id_flag:
                              default: BLOCK_ID_FLAG_UNKNOWN
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              title: >-
                                BlockIdFlag indicates which BlockID the
                                signature is for
                              type: string
                            signature:
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            validator_address:
                              format: byte
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              sdk_block:
                title: 'Since: cosmos-sdk 0.47'
                description: >-
                  Block is tendermint type Block, with the Header proposer
                  address

                  field converted to bech32 string.
                properties:
                  data:
                    properties:
                      txs:
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                        items:
                          format: byte
                          type: string
                        type: array
                    title: >-
                      Data contains the set of transactions included in the
                      block
                    type: object
                  evidence:
                    properties:
                      evidence:
                        items:
                          properties:
                            duplicate_vote_evidence:
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                              properties:
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                                validator_power:
                                  format: int64
                                  type: string
                                vote_a:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                                vote_b:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            light_client_attack_evidence:
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                              properties:
                                byzantine_validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                                common_height:
                                  format: int64
                                  type: string
                                conflicting_block:
                                  properties:
                                    signed_header:
                                      properties:
                                        commit:
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                          properties:
                                            block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            height:
                                              format: int64
                                              type: string
                                            round:
                                              format: int32
                                              type: integer
                                            signatures:
                                              items:
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                                properties:
                                                  block_id_flag:
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    title: >-
                                                      BlockIdFlag indicates which BlockID the
                                                      signature is for
                                                    type: string
                                                  signature:
                                                    format: byte
                                                    type: string
                                                  timestamp:
                                                    format: date-time
                                                    type: string
                                                  validator_address:
                                                    format: byte
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                        header:
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                          properties:
                                            app_hash:
                                              format: byte
                                              type: string
                                            chain_id:
                                              type: string
                                            consensus_hash:
                                              format: byte
                                              type: string
                                            data_hash:
                                              format: byte
                                              type: string
                                            evidence_hash:
                                              format: byte
                                              title: consensus info
                                              type: string
                                            height:
                                              format: int64
                                              type: string
                                            last_block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            last_commit_hash:
                                              format: byte
                                              title: hashes of block data
                                              type: string
                                            last_results_hash:
                                              format: byte
                                              type: string
                                            next_validators_hash:
                                              format: byte
                                              type: string
                                            proposer_address:
                                              format: byte
                                              type: string
                                            time:
                                              format: date-time
                                              type: string
                                            validators_hash:
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                              type: string
                                            version:
                                              title: basic block info
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                              properties:
                                                app:
                                                  format: uint64
                                                  type: string
                                                block:
                                                  format: uint64
                                                  type: string
                                              type: object
                                          type: object
                                      type: object
                                    validator_set:
                                      properties:
                                        proposer:
                                          properties:
                                            address:
                                              format: byte
                                              type: string
                                            proposer_priority:
                                              format: int64
                                              type: string
                                            pub_key:
                                              properties:
                                                ed25519:
                                                  format: byte
                                                  type: string
                                                secp256k1:
                                                  format: byte
                                                  type: string
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                              type: object
                                            voting_power:
                                              format: int64
                                              type: string
                                          type: object
                                        total_voting_power:
                                          format: int64
                                          type: string
                                        validators:
                                          items:
                                            properties:
                                              address:
                                                format: byte
                                                type: string
                                              proposer_priority:
                                                format: int64
                                                type: string
                                              pub_key:
                                                properties:
                                                  ed25519:
                                                    format: byte
                                                    type: string
                                                  secp256k1:
                                                    format: byte
                                                    type: string
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                                type: object
                                              voting_power:
                                                format: int64
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                              type: object
                          type: object
                        type: array
                    type: object
                  header:
                    description: Header defines the structure of a Tendermint block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        description: >-
                          proposer_address is the original block proposer
                          address, formatted as a Bech32 string.

                          In Tendermint, this type is `bytes`, but in the SDK,
                          we convert it to a Bech32 string

                          for better UX.
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                  last_commit:
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signatures:
                        items:
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                          properties:
                            block_id_flag:
                              default: BLOCK_ID_FLAG_UNKNOWN
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              title: >-
                                BlockIdFlag indicates which BlockID the
                                signature is for
                              type: string
                            signature:
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            validator_address:
                              format: byte
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetLatestBlock returns the latest block.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/{height}:
    get:
      operationId: GetBlockByHeight
      parameters:
        - format: int64
          in: path
          name: height
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetBlockByHeightResponse is the response type for the
              Query/GetBlockByHeight RPC method.
            properties:
              block:
                title: 'Deprecated: please use `sdk_block` instead'
                properties:
                  data:
                    properties:
                      txs:
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                        items:
                          format: byte
                          type: string
                        type: array
                    title: >-
                      Data contains the set of transactions included in the
                      block
                    type: object
                  evidence:
                    properties:
                      evidence:
                        items:
                          properties:
                            duplicate_vote_evidence:
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                              properties:
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                                validator_power:
                                  format: int64
                                  type: string
                                vote_a:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                                vote_b:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            light_client_attack_evidence:
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                              properties:
                                byzantine_validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                                common_height:
                                  format: int64
                                  type: string
                                conflicting_block:
                                  properties:
                                    signed_header:
                                      properties:
                                        commit:
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                          properties:
                                            block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            height:
                                              format: int64
                                              type: string
                                            round:
                                              format: int32
                                              type: integer
                                            signatures:
                                              items:
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                                properties:
                                                  block_id_flag:
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    title: >-
                                                      BlockIdFlag indicates which BlockID the
                                                      signature is for
                                                    type: string
                                                  signature:
                                                    format: byte
                                                    type: string
                                                  timestamp:
                                                    format: date-time
                                                    type: string
                                                  validator_address:
                                                    format: byte
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                        header:
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                          properties:
                                            app_hash:
                                              format: byte
                                              type: string
                                            chain_id:
                                              type: string
                                            consensus_hash:
                                              format: byte
                                              type: string
                                            data_hash:
                                              format: byte
                                              type: string
                                            evidence_hash:
                                              format: byte
                                              title: consensus info
                                              type: string
                                            height:
                                              format: int64
                                              type: string
                                            last_block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            last_commit_hash:
                                              format: byte
                                              title: hashes of block data
                                              type: string
                                            last_results_hash:
                                              format: byte
                                              type: string
                                            next_validators_hash:
                                              format: byte
                                              type: string
                                            proposer_address:
                                              format: byte
                                              type: string
                                            time:
                                              format: date-time
                                              type: string
                                            validators_hash:
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                              type: string
                                            version:
                                              title: basic block info
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                              properties:
                                                app:
                                                  format: uint64
                                                  type: string
                                                block:
                                                  format: uint64
                                                  type: string
                                              type: object
                                          type: object
                                      type: object
                                    validator_set:
                                      properties:
                                        proposer:
                                          properties:
                                            address:
                                              format: byte
                                              type: string
                                            proposer_priority:
                                              format: int64
                                              type: string
                                            pub_key:
                                              properties:
                                                ed25519:
                                                  format: byte
                                                  type: string
                                                secp256k1:
                                                  format: byte
                                                  type: string
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                              type: object
                                            voting_power:
                                              format: int64
                                              type: string
                                          type: object
                                        total_voting_power:
                                          format: int64
                                          type: string
                                        validators:
                                          items:
                                            properties:
                                              address:
                                                format: byte
                                                type: string
                                              proposer_priority:
                                                format: int64
                                                type: string
                                              pub_key:
                                                properties:
                                                  ed25519:
                                                    format: byte
                                                    type: string
                                                  secp256k1:
                                                    format: byte
                                                    type: string
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                                type: object
                                              voting_power:
                                                format: int64
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                              type: object
                          type: object
                        type: array
                    type: object
                  header:
                    description: Header defines the structure of a block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        format: byte
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                  last_commit:
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signatures:
                        items:
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                          properties:
                            block_id_flag:
                              default: BLOCK_ID_FLAG_UNKNOWN
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              title: >-
                                BlockIdFlag indicates which BlockID the
                                signature is for
                              type: string
                            signature:
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            validator_address:
                              format: byte
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
              block_id:
                properties:
                  hash:
                    format: byte
                    type: string
                  part_set_header:
                    properties:
                      hash:
                        format: byte
                        type: string
                      total:
                        format: int64
                        type: integer
                    title: PartsetHeader
                    type: object
                title: BlockID
                type: object
              sdk_block:
                title: 'Since: cosmos-sdk 0.47'
                description: >-
                  Block is tendermint type Block, with the Header proposer
                  address

                  field converted to bech32 string.
                properties:
                  data:
                    properties:
                      txs:
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                        items:
                          format: byte
                          type: string
                        type: array
                    title: >-
                      Data contains the set of transactions included in the
                      block
                    type: object
                  evidence:
                    properties:
                      evidence:
                        items:
                          properties:
                            duplicate_vote_evidence:
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                              properties:
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                                validator_power:
                                  format: int64
                                  type: string
                                vote_a:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                                vote_b:
                                  description: >-
                                    Vote represents a prevote or precommit vote
                                    from validators for

                                    consensus.
                                  properties:
                                    block_id:
                                      properties:
                                        hash:
                                          format: byte
                                          type: string
                                        part_set_header:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            total:
                                              format: int64
                                              type: integer
                                          title: PartsetHeader
                                          type: object
                                      title: BlockID
                                      type: object
                                    extension:
                                      description: >-
                                        Vote extension provided by the
                                        application. Only valid for precommit

                                        messages.
                                      format: byte
                                      type: string
                                    extension_signature:
                                      description: >-
                                        Vote extension signature by the
                                        validator if they participated in

                                        consensus for the associated block.

                                        Only valid for precommit messages.
                                      format: byte
                                      type: string
                                    height:
                                      format: int64
                                      type: string
                                    round:
                                      format: int32
                                      type: integer
                                    signature:
                                      description: >-
                                        Vote signature by the validator if they
                                        participated in consensus for the

                                        associated block.
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    type:
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                    validator_index:
                                      format: int32
                                      type: integer
                                  type: object
                              type: object
                            light_client_attack_evidence:
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                              properties:
                                byzantine_validators:
                                  items:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  type: array
                                common_height:
                                  format: int64
                                  type: string
                                conflicting_block:
                                  properties:
                                    signed_header:
                                      properties:
                                        commit:
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                          properties:
                                            block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            height:
                                              format: int64
                                              type: string
                                            round:
                                              format: int32
                                              type: integer
                                            signatures:
                                              items:
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                                properties:
                                                  block_id_flag:
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    title: >-
                                                      BlockIdFlag indicates which BlockID the
                                                      signature is for
                                                    type: string
                                                  signature:
                                                    format: byte
                                                    type: string
                                                  timestamp:
                                                    format: date-time
                                                    type: string
                                                  validator_address:
                                                    format: byte
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                        header:
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                          properties:
                                            app_hash:
                                              format: byte
                                              type: string
                                            chain_id:
                                              type: string
                                            consensus_hash:
                                              format: byte
                                              type: string
                                            data_hash:
                                              format: byte
                                              type: string
                                            evidence_hash:
                                              format: byte
                                              title: consensus info
                                              type: string
                                            height:
                                              format: int64
                                              type: string
                                            last_block_id:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                part_set_header:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    total:
                                                      format: int64
                                                      type: integer
                                                  title: PartsetHeader
                                                  type: object
                                              title: BlockID
                                              type: object
                                            last_commit_hash:
                                              format: byte
                                              title: hashes of block data
                                              type: string
                                            last_results_hash:
                                              format: byte
                                              type: string
                                            next_validators_hash:
                                              format: byte
                                              type: string
                                            proposer_address:
                                              format: byte
                                              type: string
                                            time:
                                              format: date-time
                                              type: string
                                            validators_hash:
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                              type: string
                                            version:
                                              title: basic block info
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                              properties:
                                                app:
                                                  format: uint64
                                                  type: string
                                                block:
                                                  format: uint64
                                                  type: string
                                              type: object
                                          type: object
                                      type: object
                                    validator_set:
                                      properties:
                                        proposer:
                                          properties:
                                            address:
                                              format: byte
                                              type: string
                                            proposer_priority:
                                              format: int64
                                              type: string
                                            pub_key:
                                              properties:
                                                ed25519:
                                                  format: byte
                                                  type: string
                                                secp256k1:
                                                  format: byte
                                                  type: string
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                              type: object
                                            voting_power:
                                              format: int64
                                              type: string
                                          type: object
                                        total_voting_power:
                                          format: int64
                                          type: string
                                        validators:
                                          items:
                                            properties:
                                              address:
                                                format: byte
                                                type: string
                                              proposer_priority:
                                                format: int64
                                                type: string
                                              pub_key:
                                                properties:
                                                  ed25519:
                                                    format: byte
                                                    type: string
                                                  secp256k1:
                                                    format: byte
                                                    type: string
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                                type: object
                                              voting_power:
                                                format: int64
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                timestamp:
                                  format: date-time
                                  type: string
                                total_voting_power:
                                  format: int64
                                  type: string
                              type: object
                          type: object
                        type: array
                    type: object
                  header:
                    description: Header defines the structure of a Tendermint block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        description: >-
                          proposer_address is the original block proposer
                          address, formatted as a Bech32 string.

                          In Tendermint, this type is `bytes`, but in the SDK,
                          we convert it to a Bech32 string

                          for better UX.
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                  last_commit:
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signatures:
                        items:
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                          properties:
                            block_id_flag:
                              default: BLOCK_ID_FLAG_UNKNOWN
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              title: >-
                                BlockIdFlag indicates which BlockID the
                                signature is for
                              type: string
                            signature:
                              format: byte
                              type: string
                            timestamp:
                              format: date-time
                              type: string
                            validator_address:
                              format: byte
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetBlockByHeight queries block for given height.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      operationId: GetNodeInfo
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetNodeInfoResponse is the response type for the Query/GetNodeInfo
              RPC method.
            properties:
              application_version:
                description: VersionInfo is the type for the GetNodeInfoResponse message.
                properties:
                  app_name:
                    type: string
                  build_deps:
                    items:
                      properties:
                        path:
                          title: module path
                          type: string
                        sum:
                          title: checksum
                          type: string
                        version:
                          title: module version
                          type: string
                      title: Module is the type for VersionInfo
                      type: object
                    type: array
                  build_tags:
                    type: string
                  cosmos_sdk_version:
                    title: 'Since: cosmos-sdk 0.43'
                    type: string
                  git_commit:
                    type: string
                  go_version:
                    type: string
                  name:
                    type: string
                  version:
                    type: string
                type: object
              default_node_info:
                properties:
                  channels:
                    format: byte
                    type: string
                  default_node_id:
                    type: string
                  listen_addr:
                    type: string
                  moniker:
                    type: string
                  network:
                    type: string
                  other:
                    properties:
                      rpc_address:
                        type: string
                      tx_index:
                        type: string
                    type: object
                  protocol_version:
                    properties:
                      app:
                        format: uint64
                        type: string
                      block:
                        format: uint64
                        type: string
                      p2p:
                        format: uint64
                        type: string
                    type: object
                  version:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetNodeInfo queries the current node info.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      operationId: GetSyncing
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetSyncingResponse is the response type for the Query/GetSyncing
              RPC method.
            properties:
              syncing:
                type: boolean
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetSyncing queries node syncing.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      operationId: GetLatestValidatorSet
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetLatestValidatorSetResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
            properties:
              block_height:
                format: int64
                type: string
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              validators:
                items:
                  description: Validator is the type for the validator-set.
                  properties:
                    address:
                      type: string
                    proposer_priority:
                      format: int64
                      type: string
                    pub_key:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    voting_power:
                      format: int64
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetLatestValidatorSet queries latest validator-set.
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/{height}:
    get:
      operationId: GetValidatorSetByHeight
      parameters:
        - format: int64
          in: path
          name: height
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              GetValidatorSetByHeightResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
            properties:
              block_height:
                format: int64
                type: string
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              validators:
                items:
                  description: Validator is the type for the validator-set.
                  properties:
                    address:
                      type: string
                    proposer_priority:
                      format: int64
                      type: string
                    pub_key:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    voting_power:
                      format: int64
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      tags:
        - Service
  /cosmos/circuit/v1/accounts:
    get:
      operationId: Accounts
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              AccountsResponse is the response type for the Query/Accounts RPC
              method.
            properties:
              accounts:
                items:
                  properties:
                    address:
                      type: string
                    permissions:
                      description: >-
                        Permissions are the permissions that an account has to
                        trip

                        or reset the circuit breaker.
                      properties:
                        level:
                          description: >-
                            level is the level of permissions granted to this
                            account.
                          default: LEVEL_NONE_UNSPECIFIED
                          enum:
                            - LEVEL_NONE_UNSPECIFIED
                            - LEVEL_SOME_MSGS
                            - LEVEL_ALL_MSGS
                            - LEVEL_SUPER_ADMIN
                          type: string
                        limit_type_urls:
                          description: >-
                            limit_type_urls is used with LEVEL_SOME_MSGS to
                            limit the lists of Msg type

                            URLs that the account can trip. It is an error to
                            use limit_type_urls with

                            a level other than LEVEL_SOME_MSGS.
                          items:
                            type: string
                          type: array
                      type: object
                  title: >-
                    GenesisAccountPermissions is the account permissions for the
                    circuit breaker in genesis
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Account returns account permissions.
      tags:
        - Query
  /cosmos/circuit/v1/accounts/{address}:
    get:
      operationId: Account
      parameters:
        - in: path
          name: address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              AccountResponse is the response type for the Query/Account RPC
              method.
            properties:
              permission:
                description: |-
                  Permissions are the permissions that an account has to trip
                  or reset the circuit breaker.
                properties:
                  level:
                    description: level is the level of permissions granted to this account.
                    default: LEVEL_NONE_UNSPECIFIED
                    enum:
                      - LEVEL_NONE_UNSPECIFIED
                      - LEVEL_SOME_MSGS
                      - LEVEL_ALL_MSGS
                      - LEVEL_SUPER_ADMIN
                    type: string
                  limit_type_urls:
                    description: >-
                      limit_type_urls is used with LEVEL_SOME_MSGS to limit the
                      lists of Msg type

                      URLs that the account can trip. It is an error to use
                      limit_type_urls with

                      a level other than LEVEL_SOME_MSGS.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Account returns account permissions.
      tags:
        - Query
  /cosmos/circuit/v1/disable_list:
    get:
      operationId: DisabledList
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              DisabledListResponse is the response type for the
              Query/DisabledList RPC method.
            properties:
              disabled_list:
                items:
                  type: string
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DisabledList returns a list of disabled message urls
      tags:
        - Query
  /cosmos/consensus/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse defines the response type for querying
              x/consensus parameters.
            properties:
              params:
                description: >-
                  params are the tendermint consensus params stored in the
                  consensus module.

                  Please note that `params.version` is not populated in this
                  response, it is

                  tracked separately in the x/upgrade module.
                properties:
                  abci:
                    description: >-
                      ABCIParams configure functionality specific to the
                      Application Blockchain Interface.
                    properties:
                      vote_extensions_enable_height:
                        description: >-
                          vote_extensions_enable_height configures the first
                          height during which

                          vote extensions will be enabled. During this specified
                          height, and for all

                          subsequent heights, precommit messages that do not
                          contain valid extension data

                          will be considered invalid. Prior to this height, vote
                          extensions will not

                          be used or accepted by validators on the network.


                          Once enabled, vote extensions will be created by the
                          application in ExtendVote,

                          passed to the application for validation in
                          VerifyVoteExtension and given

                          to the application to use when proposing a block
                          during PrepareProposal.
                        format: int64
                        type: string
                    type: object
                  block:
                    description: BlockParams contains limits on the block size.
                    properties:
                      max_bytes:
                        format: int64
                        title: |-
                          Max block size, in bytes.
                          Note: must be greater than 0
                        type: string
                      max_gas:
                        format: int64
                        title: |-
                          Max gas per block.
                          Note: must be greater or equal to -1
                        type: string
                    type: object
                  evidence:
                    description: >-
                      EvidenceParams determine how we handle evidence of
                      malfeasance.
                    properties:
                      max_age_duration:
                        description: >-
                          Max age of evidence, in time.


                          It should correspond with an app's "unbonding period"
                          or other similar

                          mechanism for handling [Nothing-At-Stake

                          attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
                        type: string
                      max_age_num_blocks:
                        description: >-
                          Max age of evidence, in blocks.


                          The basic formula for calculating this is:
                          MaxAgeDuration / {average block

                          time}.
                        format: int64
                        type: string
                      max_bytes:
                        format: int64
                        title: >-
                          This sets the maximum size of total evidence in bytes
                          that can be committed in a single block.

                          and should fall comfortably under the max block bytes.

                          Default is 1048576 or 1MB
                        type: string
                    type: object
                  validator:
                    description: >-
                      ValidatorParams restrict the public key types validators
                      can use.

                      NOTE: uses ABCI pubkey naming, not Amino names.
                    properties:
                      pub_key_types:
                        items:
                          type: string
                        type: array
                    type: object
                  version:
                    description: VersionParams contains the ABCI application version.
                    properties:
                      app:
                        format: uint64
                        type: string
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries the parameters of x/consensus module.
      tags:
        - Query
  /cosmos/distribution/v1beta1/community_pool:
    get:
      operationId: CommunityPool
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryCommunityPoolResponse is the response type for the
              Query/CommunityPool

              RPC method.
            properties:
              pool:
                description: pool defines community pool's coins.
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: CommunityPool queries the community pool coins.
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards:
    get:
      operationId: DelegationTotalRewards
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegationTotalRewardsResponse is the response type for the
              Query/DelegationTotalRewards RPC method.
            properties:
              rewards:
                description: rewards defines all the rewards accrued by a delegator.
                items:
                  description: |-
                    DelegationDelegatorReward represents the properties
                    of a delegator's delegation reward.
                  properties:
                    reward:
                      items:
                        description: >-
                          DecCoin defines a token with a denomination and a
                          decimal amount.


                          NOTE: The amount field is an Dec which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      type: array
                    validator_address:
                      type: string
                  type: object
                type: array
              total:
                description: total defines the sum of all the rewards.
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by each
        validator.
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}:
    get:
      operationId: DelegationRewards
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          type: string
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegationRewardsResponse is the response type for the
              Query/DelegationRewards RPC method.
            properties:
              rewards:
                description: rewards defines the rewards accrued by a delegation.
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/validators:
    get:
      operationId: DelegatorValidators
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegatorValidatorsResponse is the response type for the
              Query/DelegatorValidators RPC method.
            properties:
              validators:
                description: >-
                  validators defines the validators a delegator is delegating
                  for.
                items:
                  type: string
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DelegatorValidators queries the validators of a delegator.
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address:
    get:
      operationId: DelegatorWithdrawAddress
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegatorWithdrawAddressResponse is the response type for the
              Query/DelegatorWithdrawAddress RPC method.
            properties:
              withdraw_address:
                description: withdraw_address defines the delegator address to query for.
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      tags:
        - Query
  /cosmos/distribution/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  base_proposer_reward:
                    description: >-
                      Deprecated: The base_proposer_reward field is deprecated
                      and is no longer used

                      in the x/distribution module's reward mechanism.
                    type: string
                  bonus_proposer_reward:
                    description: >-
                      Deprecated: The bonus_proposer_reward field is deprecated
                      and is no longer used

                      in the x/distribution module's reward mechanism.
                    type: string
                  community_tax:
                    type: string
                  withdraw_addr_enabled:
                    type: boolean
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries params of the distribution module.
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}:
    get:
      operationId: ValidatorDistributionInfo
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryValidatorDistributionInfoResponse is the response type for
              the Query/ValidatorDistributionInfo RPC method.
            properties:
              commission:
                description: commission defines the commission the validator received.
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              operator_address:
                description: operator_address defines the validator operator address.
                type: string
              self_bond_rewards:
                description: self_bond_rewards defines the self delegations rewards.
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ValidatorDistributionInfo queries validator commission and
        self-delegation rewards for validator
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/commission:
    get:
      operationId: ValidatorCommission
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              commission:
                description: commission defines the commission the validator received.
                properties:
                  commission:
                    items:
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
            title: |-
              QueryValidatorCommissionResponse is the response type for the
              Query/ValidatorCommission RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ValidatorCommission queries accumulated commission for a validator.
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards:
    get:
      operationId: ValidatorOutstandingRewards
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryValidatorOutstandingRewardsResponse is the response type for
              the

              Query/ValidatorOutstandingRewards RPC method.
            properties:
              rewards:
                description: >-
                  ValidatorOutstandingRewards represents outstanding
                  (un-withdrawn) rewards

                  for a validator inexpensive to track, allows simple sanity
                  checks.
                properties:
                  rewards:
                    items:
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/slashes:
    get:
      operationId: ValidatorSlashes
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          type: string
        - description: >-
            starting_height defines the optional starting height to query the
            slashes.
          format: uint64
          in: query
          name: starting_height
          required: false
          type: string
        - description: >-
            starting_height defines the optional ending height to query the
            slashes.
          format: uint64
          in: query
          name: ending_height
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryValidatorSlashesResponse is the response type for the
              Query/ValidatorSlashes RPC method.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              slashes:
                description: slashes defines the slashes the validator received.
                items:
                  description: >-
                    ValidatorSlashEvent represents a validator slash event.

                    Height is implicit within the store key.

                    This is needed to calculate appropriate amount of staking
                    tokens

                    for delegations which are withdrawn after a slash has
                    occurred.
                  properties:
                    fraction:
                      type: string
                    validator_period:
                      format: uint64
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ValidatorSlashes queries slash events of a validator.
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence:
    get:
      operationId: AllEvidence
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC

              method.
            properties:
              evidence:
                description: evidence returns all evidences.
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AllEvidence queries all evidence.
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence/{hash}:
    get:
      operationId: Evidence
      parameters:
        - description: |-
            hash defines the evidence hash of the requested evidence.

            Since: cosmos-sdk 0.47
          in: path
          name: hash
          required: true
          type: string
        - description: |-
            evidence_hash defines the hash of the requested evidence.
            Deprecated: Use hash, a HEX encoded string, instead.
          format: byte
          in: query
          name: evidence_hash
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
            properties:
              evidence:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Evidence queries evidence based on evidence hash.
      tags:
        - Query
  /cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}:
    get:
      operationId: Allowance
      parameters:
        - description: >-
            granter is the address of the user granting an allowance of their
            funds.
          in: path
          name: granter
          required: true
          type: string
        - description: >-
            grantee is the address of the user being granted an allowance of
            another user's funds.
          in: path
          name: grantee
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAllowanceResponse is the response type for the
              Query/Allowance RPC method.
            properties:
              allowance:
                description: allowance is a allowance granted for grantee by granter.
                properties:
                  allowance:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  grantee:
                    description: >-
                      grantee is the address of the user being granted an
                      allowance of another user's funds.
                    type: string
                  granter:
                    description: >-
                      granter is the address of the user granting an allowance
                      of their funds.
                    type: string
                title: >-
                  Grant is stored in the KVStore to record a grant with full
                  context
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Allowance returns granted allwance to the grantee by the granter.
      tags:
        - Query
  /cosmos/feegrant/v1beta1/allowances/{grantee}:
    get:
      operationId: Allowances
      parameters:
        - in: path
          name: grantee
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAllowancesResponse is the response type for the
              Query/Allowances RPC method.
            properties:
              allowances:
                description: allowances are allowance's granted for grantee by granter.
                items:
                  properties:
                    allowance:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    grantee:
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                      type: string
                    granter:
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                      type: string
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                  type: object
                type: array
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Allowances returns all the grants for the given grantee address.
      tags:
        - Query
  /cosmos/feegrant/v1beta1/issued/{granter}:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: AllowancesByGranter
      parameters:
        - in: path
          name: granter
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAllowancesByGranterResponse is the response type for the
              Query/AllowancesByGranter RPC method.


              Since: cosmos-sdk 0.46
            properties:
              allowances:
                description: allowances that have been issued by the granter.
                items:
                  properties:
                    allowance:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    grantee:
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                      type: string
                    granter:
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                      type: string
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                  type: object
                type: array
              pagination:
                description: pagination defines an pagination for the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AllowancesByGranter returns all the grants given by an address
      tags:
        - Query
  /cosmos/gov/v1/constitution:
    get:
      operationId: Constitution
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              constitution:
                type: string
            title: >-
              QueryConstitutionResponse is the response type for the
              Query/Constitution RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Constitution queries the chain's constitution.
      tags:
        - Query
  /cosmos/gov/v1/params/{params_type}:
    get:
      operationId: Params
      parameters:
        - description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          name: params_type
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              deposit_params:
                description: |-
                  Deprecated: Prefer to use `params` instead.
                  deposit_params defines the parameters related to deposit.
                properties:
                  max_deposit_period:
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2

                      months.
                    type: string
                  min_deposit:
                    description: Minimum deposit for a proposal to enter voting period.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
              params:
                description: |-
                  params defines all the paramaters of x/gov module.

                  Since: cosmos-sdk 0.47
                properties:
                  burn_proposal_deposit_prevote:
                    title: burn deposits if the proposal does not enter voting period
                    type: boolean
                  burn_vote_quorum:
                    title: burn deposits if a proposal does not meet quorum
                    type: boolean
                  burn_vote_veto:
                    title: burn deposits if quorum with vote type no_veto is met
                    type: boolean
                  expedited_min_deposit:
                    description: >-
                      Minimum expedited deposit for a proposal to enter voting
                      period.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  expedited_threshold:
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.67.


                      Since: cosmos-sdk 0.50
                    type: string
                  expedited_voting_period:
                    description: |-
                      Duration of the voting period of an expedited proposal.

                      Since: cosmos-sdk 0.50
                    type: string
                  max_deposit_period:
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2

                      months.
                    type: string
                  min_deposit:
                    description: Minimum deposit for a proposal to enter voting period.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  min_deposit_ratio:
                    description: >-
                      The ratio representing the proportion of the deposit value
                      minimum that must be met when making a deposit.

                      Default value: 0.01. Meaning that for a chain with a
                      min_deposit of 100stake, a deposit of 1stake would be

                      required.


                      Since: cosmos-sdk 0.50
                    type: string
                  min_initial_deposit_ratio:
                    description: >-
                      The ratio representing the proportion of the deposit value
                      that must be paid at proposal submission.
                    type: string
                  proposal_cancel_dest:
                    description: >-
                      The address which will receive (proposal_cancel_ratio *
                      deposit) proposal deposits.

                      If empty, the (proposal_cancel_ratio * deposit) proposal
                      deposits will be burned.


                      Since: cosmos-sdk 0.50
                    type: string
                  proposal_cancel_ratio:
                    description: >-
                      The cancel ratio which will not be returned back to the
                      depositors when a proposal is cancelled.


                      Since: cosmos-sdk 0.50
                    type: string
                  quorum:
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                    type: string
                  threshold:
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                    type: string
                  veto_threshold:
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
                    type: string
                  voting_period:
                    description: Duration of the voting period.
                    type: string
                type: object
              tally_params:
                description: |-
                  Deprecated: Prefer to use `params` instead.
                  tally_params defines the parameters related to tally.
                properties:
                  quorum:
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be

                      considered valid.
                    type: string
                  threshold:
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                    type: string
                  veto_threshold:
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be

                      vetoed. Default value: 1/3.
                    type: string
                type: object
              voting_params:
                description: |-
                  Deprecated: Prefer to use `params` instead.
                  voting_params defines the parameters related to voting.
                properties:
                  voting_period:
                    description: Duration of the voting period.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters of the gov module.
      tags:
        - Query
  /cosmos/gov/v1/proposals:
    get:
      operationId: Proposals
      parameters:
        - default: PROPOSAL_STATUS_UNSPECIFIED
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          in: query
          name: proposal_status
          required: false
          type: string
        - description: voter defines the voter address for the proposals.
          in: query
          name: voter
          required: false
          type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: query
          name: depositor
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              proposals:
                description: proposals defines all the requested governance proposals.
                items:
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
                  properties:
                    deposit_end_time:
                      description: deposit_end_time is the end time for deposition.
                      format: date-time
                      type: string
                    expedited:
                      description: 'Since: cosmos-sdk 0.50'
                      title: expedited defines if the proposal is expedited
                      type: boolean
                    failed_reason:
                      description: 'Since: cosmos-sdk 0.50'
                      title: failed_reason defines the reason why the proposal failed
                      type: string
                    final_tally_result:
                      description: >-
                        final_tally_result is the final tally result of the
                        proposal. When

                        querying a proposal via gRPC, this field is not
                        populated until the

                        proposal's voting period has ended.
                      properties:
                        abstain_count:
                          description: >-
                            abstain_count is the number of abstain votes on a
                            proposal.
                          type: string
                        no_count:
                          description: no_count is the number of no votes on a proposal.
                          type: string
                        no_with_veto_count:
                          description: >-
                            no_with_veto_count is the number of no with veto
                            votes on a proposal.
                          type: string
                        yes_count:
                          description: yes_count is the number of yes votes on a proposal.
                          type: string
                      type: object
                    id:
                      description: id defines the unique id of the proposal.
                      format: uint64
                      type: string
                    messages:
                      description: >-
                        messages are the arbitrary messages to be executed if
                        the proposal passes.
                      items:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }
                              // or ...
                              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                                foo = any.unpack(Foo.getDefaultInstance());
                              }

                          Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                          Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".


                          JSON


                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      type: array
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the
                        proposal.

                        the recommended format of the metadata is to be found
                        here:

                        https://docs.cosmos.network/v0.47/modules/gov#proposal-3
                      type: string
                    proposer:
                      description: 'Since: cosmos-sdk 0.47'
                      title: proposer is the address of the proposal sumbitter
                      type: string
                    status:
                      description: status defines the proposal status.
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      type: string
                    submit_time:
                      description: submit_time is the time of proposal submission.
                      format: date-time
                      type: string
                    summary:
                      description: 'Since: cosmos-sdk 0.47'
                      title: summary is a short summary of the proposal
                      type: string
                    title:
                      description: 'Since: cosmos-sdk 0.47'
                      title: title is the title of the proposal
                      type: string
                    total_deposit:
                      description: total_deposit is the total deposit on the proposal.
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      type: array
                    voting_end_time:
                      description: voting_end_time is the end time of voting on a proposal.
                      format: date-time
                      type: string
                    voting_start_time:
                      description: >-
                        voting_start_time is the starting time to vote on a
                        proposal.
                      format: date-time
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Proposals queries all proposals based on given status.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}:
    get:
      operationId: Proposal
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
            properties:
              proposal:
                description: proposal is the requested governance proposal.
                properties:
                  deposit_end_time:
                    description: deposit_end_time is the end time for deposition.
                    format: date-time
                    type: string
                  expedited:
                    description: 'Since: cosmos-sdk 0.50'
                    title: expedited defines if the proposal is expedited
                    type: boolean
                  failed_reason:
                    description: 'Since: cosmos-sdk 0.50'
                    title: failed_reason defines the reason why the proposal failed
                    type: string
                  final_tally_result:
                    description: >-
                      final_tally_result is the final tally result of the
                      proposal. When

                      querying a proposal via gRPC, this field is not populated
                      until the

                      proposal's voting period has ended.
                    properties:
                      abstain_count:
                        description: >-
                          abstain_count is the number of abstain votes on a
                          proposal.
                        type: string
                      no_count:
                        description: no_count is the number of no votes on a proposal.
                        type: string
                      no_with_veto_count:
                        description: >-
                          no_with_veto_count is the number of no with veto votes
                          on a proposal.
                        type: string
                      yes_count:
                        description: yes_count is the number of yes votes on a proposal.
                        type: string
                    type: object
                  id:
                    description: id defines the unique id of the proposal.
                    format: uint64
                    type: string
                  messages:
                    description: >-
                      messages are the arbitrary messages to be executed if the
                      proposal passes.
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata attached to the
                      proposal.

                      the recommended format of the metadata is to be found
                      here:

                      https://docs.cosmos.network/v0.47/modules/gov#proposal-3
                    type: string
                  proposer:
                    description: 'Since: cosmos-sdk 0.47'
                    title: proposer is the address of the proposal sumbitter
                    type: string
                  status:
                    description: status defines the proposal status.
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    type: string
                  submit_time:
                    description: submit_time is the time of proposal submission.
                    format: date-time
                    type: string
                  summary:
                    description: 'Since: cosmos-sdk 0.47'
                    title: summary is a short summary of the proposal
                    type: string
                  title:
                    description: 'Since: cosmos-sdk 0.47'
                    title: title is the title of the proposal
                    type: string
                  total_deposit:
                    description: total_deposit is the total deposit on the proposal.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  voting_end_time:
                    description: voting_end_time is the end time of voting on a proposal.
                    format: date-time
                    type: string
                  voting_start_time:
                    description: >-
                      voting_start_time is the starting time to vote on a
                      proposal.
                    format: date-time
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Proposal queries proposal details based on ProposalID.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}/deposits:
    get:
      operationId: Deposits
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
            properties:
              deposits:
                description: deposits defines the requested deposits.
                items:
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
                  properties:
                    amount:
                      description: amount to be deposited by depositor.
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      type: array
                    depositor:
                      description: >-
                        depositor defines the deposit addresses from the
                        proposals.
                      type: string
                    proposal_id:
                      description: proposal_id defines the unique id of the proposal.
                      format: uint64
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Deposits queries all deposits of a single proposal.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}:
    get:
      operationId: Deposit
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: path
          name: depositor
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
            properties:
              deposit:
                description: deposit defines the requested deposit.
                properties:
                  amount:
                    description: amount to be deposited by depositor.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  depositor:
                    description: >-
                      depositor defines the deposit addresses from the
                      proposals.
                    type: string
                  proposal_id:
                    description: proposal_id defines the unique id of the proposal.
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Deposit queries single deposit information based on proposalID,
        depositAddr.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}/tally:
    get:
      operationId: TallyResult
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
            properties:
              tally:
                description: tally defines the requested tally.
                properties:
                  abstain_count:
                    description: >-
                      abstain_count is the number of abstain votes on a
                      proposal.
                    type: string
                  no_count:
                    description: no_count is the number of no votes on a proposal.
                    type: string
                  no_with_veto_count:
                    description: >-
                      no_with_veto_count is the number of no with veto votes on
                      a proposal.
                    type: string
                  yes_count:
                    description: yes_count is the number of yes votes on a proposal.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: TallyResult queries the tally of a proposal vote.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}/votes:
    get:
      operationId: Votes
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              votes:
                description: votes defines the queried votes.
                items:
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                  properties:
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the vote.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/gov#vote-5
                      type: string
                    options:
                      description: options is the weighted vote options.
                      items:
                        description: >-
                          WeightedVoteOption defines a unit of vote for vote
                          split.
                        properties:
                          option:
                            description: >-
                              option defines the valid vote options, it must not
                              contain duplicate vote options.
                            default: VOTE_OPTION_UNSPECIFIED
                            enum:
                              - VOTE_OPTION_UNSPECIFIED
                              - VOTE_OPTION_YES
                              - VOTE_OPTION_ABSTAIN
                              - VOTE_OPTION_NO
                              - VOTE_OPTION_NO_WITH_VETO
                            type: string
                          weight:
                            description: >-
                              weight is the vote weight associated with the vote
                              option.
                            type: string
                        type: object
                      type: array
                    proposal_id:
                      description: proposal_id defines the unique id of the proposal.
                      format: uint64
                      type: string
                    voter:
                      description: voter is the voter address of the proposal.
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Votes queries votes of a given proposal.
      tags:
        - Query
  /cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}:
    get:
      operationId: Vote
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: voter defines the voter address for the proposals.
          in: path
          name: voter
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
            properties:
              vote:
                description: vote defines the queried vote.
                properties:
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata attached to the vote.

                      the recommended format of the metadata is to be found
                      here: https://docs.cosmos.network/v0.47/modules/gov#vote-5
                    type: string
                  options:
                    description: options is the weighted vote options.
                    items:
                      description: >-
                        WeightedVoteOption defines a unit of vote for vote
                        split.
                      properties:
                        option:
                          description: >-
                            option defines the valid vote options, it must not
                            contain duplicate vote options.
                          default: VOTE_OPTION_UNSPECIFIED
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          type: string
                        weight:
                          description: >-
                            weight is the vote weight associated with the vote
                            option.
                          type: string
                      type: object
                    type: array
                  proposal_id:
                    description: proposal_id defines the unique id of the proposal.
                    format: uint64
                    type: string
                  voter:
                    description: voter is the voter address of the proposal.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Vote queries voted information based on proposalID, voterAddr.
      tags:
        - Query
  /cosmos/gov/v1beta1/params/{params_type}:
    get:
      operationId: Params
      parameters:
        - description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          name: params_type
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              deposit_params:
                description: deposit_params defines the parameters related to deposit.
                properties:
                  max_deposit_period:
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2

                      months.
                    type: string
                  min_deposit:
                    description: Minimum deposit for a proposal to enter voting period.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
              tally_params:
                description: tally_params defines the parameters related to tally.
                properties:
                  quorum:
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be

                      considered valid.
                    format: byte
                    type: string
                  threshold:
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                    format: byte
                    type: string
                  veto_threshold:
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be

                      vetoed. Default value: 1/3.
                    format: byte
                    type: string
                type: object
              voting_params:
                description: voting_params defines the parameters related to voting.
                properties:
                  voting_period:
                    description: Duration of the voting period.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters of the gov module.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals:
    get:
      operationId: Proposals
      parameters:
        - default: PROPOSAL_STATUS_UNSPECIFIED
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          in: query
          name: proposal_status
          required: false
          type: string
        - description: voter defines the voter address for the proposals.
          in: query
          name: voter
          required: false
          type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: query
          name: depositor
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              proposals:
                description: proposals defines all the requested governance proposals.
                items:
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
                  properties:
                    content:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    deposit_end_time:
                      description: deposit_end_time is the end time for deposition.
                      format: date-time
                      type: string
                    final_tally_result:
                      description: >-
                        final_tally_result is the final tally result of the
                        proposal. When

                        querying a proposal via gRPC, this field is not
                        populated until the

                        proposal's voting period has ended.
                      properties:
                        abstain:
                          description: >-
                            abstain is the number of abstain votes on a
                            proposal.
                          type: string
                        'no':
                          description: no is the number of no votes on a proposal.
                          type: string
                        no_with_veto:
                          description: >-
                            no_with_veto is the number of no with veto votes on
                            a proposal.
                          type: string
                        'yes':
                          description: yes is the number of yes votes on a proposal.
                          type: string
                      type: object
                    proposal_id:
                      description: proposal_id defines the unique id of the proposal.
                      format: uint64
                      type: string
                    status:
                      description: status defines the proposal status.
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      type: string
                    submit_time:
                      description: submit_time is the time of proposal submission.
                      format: date-time
                      type: string
                    total_deposit:
                      description: total_deposit is the total deposit on the proposal.
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      type: array
                    voting_end_time:
                      description: voting_end_time is the end time of voting on a proposal.
                      format: date-time
                      type: string
                    voting_start_time:
                      description: >-
                        voting_start_time is the starting time to vote on a
                        proposal.
                      format: date-time
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Proposals queries all proposals based on given status.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}:
    get:
      operationId: Proposal
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
            properties:
              proposal:
                description: >-
                  Proposal defines the core field members of a governance
                  proposal.
                properties:
                  content:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  deposit_end_time:
                    description: deposit_end_time is the end time for deposition.
                    format: date-time
                    type: string
                  final_tally_result:
                    description: >-
                      final_tally_result is the final tally result of the
                      proposal. When

                      querying a proposal via gRPC, this field is not populated
                      until the

                      proposal's voting period has ended.
                    properties:
                      abstain:
                        description: abstain is the number of abstain votes on a proposal.
                        type: string
                      'no':
                        description: no is the number of no votes on a proposal.
                        type: string
                      no_with_veto:
                        description: >-
                          no_with_veto is the number of no with veto votes on a
                          proposal.
                        type: string
                      'yes':
                        description: yes is the number of yes votes on a proposal.
                        type: string
                    type: object
                  proposal_id:
                    description: proposal_id defines the unique id of the proposal.
                    format: uint64
                    type: string
                  status:
                    description: status defines the proposal status.
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    type: string
                  submit_time:
                    description: submit_time is the time of proposal submission.
                    format: date-time
                    type: string
                  total_deposit:
                    description: total_deposit is the total deposit on the proposal.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  voting_end_time:
                    description: voting_end_time is the end time of voting on a proposal.
                    format: date-time
                    type: string
                  voting_start_time:
                    description: >-
                      voting_start_time is the starting time to vote on a
                      proposal.
                    format: date-time
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Proposal queries proposal details based on ProposalID.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits:
    get:
      operationId: Deposits
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
            properties:
              deposits:
                description: deposits defines the requested deposits.
                items:
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
                  properties:
                    amount:
                      description: amount to be deposited by depositor.
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      type: array
                    depositor:
                      description: >-
                        depositor defines the deposit addresses from the
                        proposals.
                      type: string
                    proposal_id:
                      description: proposal_id defines the unique id of the proposal.
                      format: uint64
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Deposits queries all deposits of a single proposal.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}:
    get:
      operationId: Deposit
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: path
          name: depositor
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
            properties:
              deposit:
                description: deposit defines the requested deposit.
                properties:
                  amount:
                    description: amount to be deposited by depositor.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  depositor:
                    description: >-
                      depositor defines the deposit addresses from the
                      proposals.
                    type: string
                  proposal_id:
                    description: proposal_id defines the unique id of the proposal.
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Deposit queries single deposit information based on proposalID,
        depositor address.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/tally:
    get:
      operationId: TallyResult
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
            properties:
              tally:
                description: tally defines the requested tally.
                properties:
                  abstain:
                    description: abstain is the number of abstain votes on a proposal.
                    type: string
                  'no':
                    description: no is the number of no votes on a proposal.
                    type: string
                  no_with_veto:
                    description: >-
                      no_with_veto is the number of no with veto votes on a
                      proposal.
                    type: string
                  'yes':
                    description: yes is the number of yes votes on a proposal.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: TallyResult queries the tally of a proposal vote.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes:
    get:
      operationId: Votes
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              votes:
                description: votes defines the queried votes.
                items:
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                  properties:
                    option:
                      description: >-
                        Deprecated: Prefer to use `options` instead. This field
                        is set in queries

                        if and only if `len(options) == 1` and that option has
                        weight 1. In all

                        other cases, this field will default to
                        VOTE_OPTION_UNSPECIFIED.
                      default: VOTE_OPTION_UNSPECIFIED
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      type: string
                    options:
                      description: |-
                        options is the weighted vote options.

                        Since: cosmos-sdk 0.43
                      items:
                        description: >-
                          WeightedVoteOption defines a unit of vote for vote
                          split.


                          Since: cosmos-sdk 0.43
                        properties:
                          option:
                            description: >-
                              option defines the valid vote options, it must not
                              contain duplicate vote options.
                            default: VOTE_OPTION_UNSPECIFIED
                            enum:
                              - VOTE_OPTION_UNSPECIFIED
                              - VOTE_OPTION_YES
                              - VOTE_OPTION_ABSTAIN
                              - VOTE_OPTION_NO
                              - VOTE_OPTION_NO_WITH_VETO
                            type: string
                          weight:
                            description: >-
                              weight is the vote weight associated with the vote
                              option.
                            type: string
                        type: object
                      type: array
                    proposal_id:
                      description: proposal_id defines the unique id of the proposal.
                      format: uint64
                      type: string
                    voter:
                      description: voter is the voter address of the proposal.
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Votes queries votes of a given proposal.
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}:
    get:
      operationId: Vote
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: voter defines the voter address for the proposals.
          in: path
          name: voter
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
            properties:
              vote:
                description: vote defines the queried vote.
                properties:
                  option:
                    description: >-
                      Deprecated: Prefer to use `options` instead. This field is
                      set in queries

                      if and only if `len(options) == 1` and that option has
                      weight 1. In all

                      other cases, this field will default to
                      VOTE_OPTION_UNSPECIFIED.
                    default: VOTE_OPTION_UNSPECIFIED
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    type: string
                  options:
                    description: |-
                      options is the weighted vote options.

                      Since: cosmos-sdk 0.43
                    items:
                      description: >-
                        WeightedVoteOption defines a unit of vote for vote
                        split.


                        Since: cosmos-sdk 0.43
                      properties:
                        option:
                          description: >-
                            option defines the valid vote options, it must not
                            contain duplicate vote options.
                          default: VOTE_OPTION_UNSPECIFIED
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          type: string
                        weight:
                          description: >-
                            weight is the vote weight associated with the vote
                            option.
                          type: string
                      type: object
                    type: array
                  proposal_id:
                    description: proposal_id defines the unique id of the proposal.
                    format: uint64
                    type: string
                  voter:
                    description: voter is the voter address of the proposal.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Vote queries voted information based on proposalID, voterAddr.
      tags:
        - Query
  /cosmos/group/v1/group_info/{group_id}:
    get:
      operationId: GroupInfo
      parameters:
        - description: group_id is the unique ID of the group.
          format: uint64
          in: path
          name: group_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: QueryGroupInfoResponse is the Query/GroupInfo response type.
            properties:
              info:
                description: info is the GroupInfo of the group.
                properties:
                  admin:
                    description: admin is the account address of the group's admin.
                    type: string
                  created_at:
                    description: >-
                      created_at is a timestamp specifying when a group was
                      created.
                    format: date-time
                    type: string
                  id:
                    description: id is the unique ID of the group.
                    format: uint64
                    type: string
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata to attached to the
                      group.

                      the recommended format of the metadata is to be found
                      here:
                      https://docs.cosmos.network/v0.47/modules/group#group-1
                    type: string
                  total_weight:
                    description: total_weight is the sum of the group members' weights.
                    type: string
                  version:
                    format: uint64
                    title: >-
                      version is used to track changes to a group's membership
                      structure that

                      would break existing proposals. Whenever any members
                      weight is changed,

                      or any member is added or removed this version is
                      incremented and will

                      cause proposals based on older versions of this group to
                      fail
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupInfo queries group info based on group id.
      tags:
        - Query
  /cosmos/group/v1/group_members/{group_id}:
    get:
      operationId: GroupMembers
      parameters:
        - description: group_id is the unique ID of the group.
          format: uint64
          in: path
          name: group_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupMembersResponse is the Query/GroupMembersResponse
              response type.
            properties:
              members:
                description: members are the members of the group with given group_id.
                items:
                  description: >-
                    GroupMember represents the relationship between a group and
                    a member.
                  properties:
                    group_id:
                      description: group_id is the unique ID of the group.
                      format: uint64
                      type: string
                    member:
                      description: member is the member data.
                      properties:
                        added_at:
                          description: >-
                            added_at is a timestamp specifying when a member was
                            added.
                          format: date-time
                          type: string
                        address:
                          description: address is the member's account address.
                          type: string
                        metadata:
                          description: >-
                            metadata is any arbitrary metadata attached to the
                            member.
                          type: string
                        weight:
                          description: >-
                            weight is the member's voting weight that should be
                            greater than 0.
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupMembers queries members of a group by group id.
      tags:
        - Query
  /cosmos/group/v1/group_policies_by_admin/{admin}:
    get:
      operationId: GroupPoliciesByAdmin
      parameters:
        - description: admin is the admin address of the group policy.
          in: path
          name: admin
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupPoliciesByAdminResponse is the
              Query/GroupPoliciesByAdmin response type.
            properties:
              group_policies:
                description: >-
                  group_policies are the group policies info with provided
                  admin.
                items:
                  description: >-
                    GroupPolicyInfo represents the high-level on-chain
                    information for a group policy.
                  properties:
                    address:
                      description: address is the account address of group policy.
                      type: string
                    admin:
                      description: admin is the account address of the group admin.
                      type: string
                    created_at:
                      description: >-
                        created_at is a timestamp specifying when a group policy
                        was created.
                      format: date-time
                      type: string
                    decision_policy:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    group_id:
                      description: group_id is the unique ID of the group.
                      format: uint64
                      type: string
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the group
                        policy.

                        the recommended format of the metadata is to be found
                        here:

                        https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
                      type: string
                    version:
                      description: >-
                        version is used to track changes to a group's
                        GroupPolicyInfo structure that

                        would create a different result on a running proposal.
                      format: uint64
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupPoliciesByAdmin queries group policies by admin address.
      tags:
        - Query
  /cosmos/group/v1/group_policies_by_group/{group_id}:
    get:
      operationId: GroupPoliciesByGroup
      parameters:
        - description: group_id is the unique ID of the group policy's group.
          format: uint64
          in: path
          name: group_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupPoliciesByGroupResponse is the
              Query/GroupPoliciesByGroup response type.
            properties:
              group_policies:
                description: >-
                  group_policies are the group policies info associated with the
                  provided group.
                items:
                  description: >-
                    GroupPolicyInfo represents the high-level on-chain
                    information for a group policy.
                  properties:
                    address:
                      description: address is the account address of group policy.
                      type: string
                    admin:
                      description: admin is the account address of the group admin.
                      type: string
                    created_at:
                      description: >-
                        created_at is a timestamp specifying when a group policy
                        was created.
                      format: date-time
                      type: string
                    decision_policy:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    group_id:
                      description: group_id is the unique ID of the group.
                      format: uint64
                      type: string
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the group
                        policy.

                        the recommended format of the metadata is to be found
                        here:

                        https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
                      type: string
                    version:
                      description: >-
                        version is used to track changes to a group's
                        GroupPolicyInfo structure that

                        would create a different result on a running proposal.
                      format: uint64
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupPoliciesByGroup queries group policies by group id.
      tags:
        - Query
  /cosmos/group/v1/group_policy_info/{address}:
    get:
      operationId: GroupPolicyInfo
      parameters:
        - description: address is the account address of the group policy.
          in: path
          name: address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response
              type.
            properties:
              info:
                description: >-
                  GroupPolicyInfo represents the high-level on-chain information
                  for a group policy.
                properties:
                  address:
                    description: address is the account address of group policy.
                    type: string
                  admin:
                    description: admin is the account address of the group admin.
                    type: string
                  created_at:
                    description: >-
                      created_at is a timestamp specifying when a group policy
                      was created.
                    format: date-time
                    type: string
                  decision_policy:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  group_id:
                    description: group_id is the unique ID of the group.
                    format: uint64
                    type: string
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata attached to the group
                      policy.

                      the recommended format of the metadata is to be found
                      here:

                      https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
                    type: string
                  version:
                    description: >-
                      version is used to track changes to a group's
                      GroupPolicyInfo structure that

                      would create a different result on a running proposal.
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        GroupPolicyInfo queries group policy info based on account address of
        group policy.
      tags:
        - Query
  /cosmos/group/v1/groups:
    get:
      description: 'Since: cosmos-sdk 0.47.1'
      operationId: Groups
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryGroupsResponse is the Query/Groups response type.

              Since: cosmos-sdk 0.47.1
            properties:
              groups:
                description: '`groups` is all the groups present in state.'
                items:
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                  properties:
                    admin:
                      description: admin is the account address of the group's admin.
                      type: string
                    created_at:
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                      format: date-time
                      type: string
                    id:
                      description: id is the unique ID of the group.
                      format: uint64
                      type: string
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata to attached to the
                        group.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/group#group-1
                      type: string
                    total_weight:
                      description: total_weight is the sum of the group members' weights.
                      type: string
                    version:
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Groups queries all groups in state.
      tags:
        - Query
  /cosmos/group/v1/groups_by_admin/{admin}:
    get:
      operationId: GroupsByAdmin
      parameters:
        - description: admin is the account address of a group's admin.
          in: path
          name: admin
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse
              response type.
            properties:
              groups:
                description: groups are the groups info with the provided admin.
                items:
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                  properties:
                    admin:
                      description: admin is the account address of the group's admin.
                      type: string
                    created_at:
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                      format: date-time
                      type: string
                    id:
                      description: id is the unique ID of the group.
                      format: uint64
                      type: string
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata to attached to the
                        group.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/group#group-1
                      type: string
                    total_weight:
                      description: total_weight is the sum of the group members' weights.
                      type: string
                    version:
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupsByAdmin queries groups by admin address.
      tags:
        - Query
  /cosmos/group/v1/groups_by_member/{address}:
    get:
      operationId: GroupsByMember
      parameters:
        - description: address is the group member address.
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryGroupsByMemberResponse is the Query/GroupsByMember response
              type.
            properties:
              groups:
                description: groups are the groups info with the provided group member.
                items:
                  description: >-
                    GroupInfo represents the high-level on-chain information for
                    a group.
                  properties:
                    admin:
                      description: admin is the account address of the group's admin.
                      type: string
                    created_at:
                      description: >-
                        created_at is a timestamp specifying when a group was
                        created.
                      format: date-time
                      type: string
                    id:
                      description: id is the unique ID of the group.
                      format: uint64
                      type: string
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata to attached to the
                        group.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/group#group-1
                      type: string
                    total_weight:
                      description: total_weight is the sum of the group members' weights.
                      type: string
                    version:
                      format: uint64
                      title: >-
                        version is used to track changes to a group's membership
                        structure that

                        would break existing proposals. Whenever any members
                        weight is changed,

                        or any member is added or removed this version is
                        incremented and will

                        cause proposals based on older versions of this group to
                        fail
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: GroupsByMember queries groups by member address.
      tags:
        - Query
  /cosmos/group/v1/proposal/{proposal_id}:
    get:
      operationId: Proposal
      parameters:
        - description: proposal_id is the unique ID of a proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: QueryProposalResponse is the Query/Proposal response type.
            properties:
              proposal:
                description: proposal is the proposal info.
                properties:
                  executor_result:
                    description: >-
                      executor_result is the final result of the proposal
                      execution. Initial value is NotRun.
                    default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                    enum:
                      - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                      - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                      - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                      - PROPOSAL_EXECUTOR_RESULT_FAILURE
                    type: string
                  final_tally_result:
                    description: >-
                      final_tally_result contains the sums of all weighted votes
                      for this

                      proposal for each vote option. It is empty at submission,
                      and only

                      populated after tallying, at voting period end or at
                      proposal execution,

                      whichever happens first.
                    properties:
                      abstain_count:
                        description: abstain_count is the weighted sum of abstainers.
                        type: string
                      no_count:
                        description: no_count is the weighted sum of no votes.
                        type: string
                      no_with_veto_count:
                        description: no_with_veto_count is the weighted sum of veto.
                        type: string
                      yes_count:
                        description: yes_count is the weighted sum of yes votes.
                        type: string
                    type: object
                  group_policy_address:
                    description: >-
                      group_policy_address is the account address of group
                      policy.
                    type: string
                  group_policy_version:
                    description: >-
                      group_policy_version tracks the version of the group
                      policy at proposal submission.

                      When a decision policy is changed, existing proposals from
                      previous policy

                      versions will become invalid with the `ABORTED` status.

                      This field is here for informational purposes only.
                    format: uint64
                    type: string
                  group_version:
                    description: >-
                      group_version tracks the version of the group at proposal
                      submission.

                      This field is here for informational purposes only.
                    format: uint64
                    type: string
                  id:
                    description: id is the unique id of the proposal.
                    format: uint64
                    type: string
                  messages:
                    description: >-
                      messages is a list of `sdk.Msg`s that will be executed if
                      the proposal passes.
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata attached to the
                      proposal.

                      the recommended format of the metadata is to be found
                      here:

                      https://docs.cosmos.network/v0.47/modules/group#proposal-4
                    type: string
                  proposers:
                    description: proposers are the account addresses of the proposers.
                    items:
                      type: string
                    type: array
                  status:
                    description: >-
                      status represents the high level position in the life
                      cycle of the proposal. Initial value is Submitted.
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_SUBMITTED
                      - PROPOSAL_STATUS_ACCEPTED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_ABORTED
                      - PROPOSAL_STATUS_WITHDRAWN
                    type: string
                  submit_time:
                    description: >-
                      submit_time is a timestamp specifying when a proposal was
                      submitted.
                    format: date-time
                    type: string
                  summary:
                    description: 'Since: cosmos-sdk 0.47'
                    title: summary is a short summary of the proposal
                    type: string
                  title:
                    description: 'Since: cosmos-sdk 0.47'
                    title: title is the title of the proposal
                    type: string
                  voting_period_end:
                    description: >-
                      voting_period_end is the timestamp before which voting
                      must be done.

                      Unless a successful MsgExec is called before (to execute a
                      proposal whose

                      tally is successful before the voting period ends),
                      tallying will be done

                      at this point, and the `final_tally_result`and `status`
                      fields will be

                      accordingly updated.
                    format: date-time
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Proposal queries a proposal based on proposal id.
      tags:
        - Query
  /cosmos/group/v1/proposals/{proposal_id}/tally:
    get:
      operationId: TallyResult
      parameters:
        - description: proposal_id is the unique id of a proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: QueryTallyResultResponse is the Query/TallyResult response type.
            properties:
              tally:
                description: tally defines the requested tally.
                properties:
                  abstain_count:
                    description: abstain_count is the weighted sum of abstainers.
                    type: string
                  no_count:
                    description: no_count is the weighted sum of no votes.
                    type: string
                  no_with_veto_count:
                    description: no_with_veto_count is the weighted sum of veto.
                    type: string
                  yes_count:
                    description: yes_count is the weighted sum of yes votes.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        TallyResult returns the tally result of a proposal. If the proposal is

        still in voting period, then this query computes the current tally
        state,

        which might not be final. On the other hand, if the proposal is final,

        then it simply returns the `final_tally_result` state stored in the

        proposal itself.
      tags:
        - Query
  /cosmos/group/v1/proposals_by_group_policy/{address}:
    get:
      operationId: ProposalsByGroupPolicy
      parameters:
        - description: >-
            address is the account address of the group policy related to
            proposals.
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryProposalsByGroupPolicyResponse is the
              Query/ProposalByGroupPolicy response type.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              proposals:
                description: proposals are the proposals with given group policy.
                items:
                  description: >-
                    Proposal defines a group proposal. Any member of a group can
                    submit a proposal

                    for a group policy to decide upon.

                    A proposal consists of a set of `sdk.Msg`s that will be
                    executed if the proposal

                    passes as well as some optional metadata associated with the
                    proposal.
                  properties:
                    executor_result:
                      description: >-
                        executor_result is the final result of the proposal
                        execution. Initial value is NotRun.
                      default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                      enum:
                        - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
                        - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
                        - PROPOSAL_EXECUTOR_RESULT_SUCCESS
                        - PROPOSAL_EXECUTOR_RESULT_FAILURE
                      type: string
                    final_tally_result:
                      description: >-
                        final_tally_result contains the sums of all weighted
                        votes for this

                        proposal for each vote option. It is empty at
                        submission, and only

                        populated after tallying, at voting period end or at
                        proposal execution,

                        whichever happens first.
                      properties:
                        abstain_count:
                          description: abstain_count is the weighted sum of abstainers.
                          type: string
                        no_count:
                          description: no_count is the weighted sum of no votes.
                          type: string
                        no_with_veto_count:
                          description: no_with_veto_count is the weighted sum of veto.
                          type: string
                        yes_count:
                          description: yes_count is the weighted sum of yes votes.
                          type: string
                      type: object
                    group_policy_address:
                      description: >-
                        group_policy_address is the account address of group
                        policy.
                      type: string
                    group_policy_version:
                      description: >-
                        group_policy_version tracks the version of the group
                        policy at proposal submission.

                        When a decision policy is changed, existing proposals
                        from previous policy

                        versions will become invalid with the `ABORTED` status.

                        This field is here for informational purposes only.
                      format: uint64
                      type: string
                    group_version:
                      description: >-
                        group_version tracks the version of the group at
                        proposal submission.

                        This field is here for informational purposes only.
                      format: uint64
                      type: string
                    id:
                      description: id is the unique id of the proposal.
                      format: uint64
                      type: string
                    messages:
                      description: >-
                        messages is a list of `sdk.Msg`s that will be executed
                        if the proposal passes.
                      items:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }
                              // or ...
                              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                                foo = any.unpack(Foo.getDefaultInstance());
                              }

                          Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                          Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".


                          JSON


                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      type: array
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the
                        proposal.

                        the recommended format of the metadata is to be found
                        here:

                        https://docs.cosmos.network/v0.47/modules/group#proposal-4
                      type: string
                    proposers:
                      description: proposers are the account addresses of the proposers.
                      items:
                        type: string
                      type: array
                    status:
                      description: >-
                        status represents the high level position in the life
                        cycle of the proposal. Initial value is Submitted.
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_SUBMITTED
                        - PROPOSAL_STATUS_ACCEPTED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_ABORTED
                        - PROPOSAL_STATUS_WITHDRAWN
                      type: string
                    submit_time:
                      description: >-
                        submit_time is a timestamp specifying when a proposal
                        was submitted.
                      format: date-time
                      type: string
                    summary:
                      description: 'Since: cosmos-sdk 0.47'
                      title: summary is a short summary of the proposal
                      type: string
                    title:
                      description: 'Since: cosmos-sdk 0.47'
                      title: title is the title of the proposal
                      type: string
                    voting_period_end:
                      description: >-
                        voting_period_end is the timestamp before which voting
                        must be done.

                        Unless a successful MsgExec is called before (to execute
                        a proposal whose

                        tally is successful before the voting period ends),
                        tallying will be done

                        at this point, and the `final_tally_result`and `status`
                        fields will be

                        accordingly updated.
                      format: date-time
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ProposalsByGroupPolicy queries proposals based on account address of
        group policy.
      tags:
        - Query
  /cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}:
    get:
      operationId: VoteByProposalVoter
      parameters:
        - description: proposal_id is the unique ID of a proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: voter is a proposal voter account address.
          in: path
          name: voter
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter
              response type.
            properties:
              vote:
                description: vote is the vote with given proposal_id and voter.
                properties:
                  metadata:
                    title: >-
                      metadata is any arbitrary metadata attached to the vote.

                      the recommended format of the metadata is to be found
                      here:
                      https://docs.cosmos.network/v0.47/modules/group#vote-2
                    type: string
                  option:
                    description: option is the voter's choice on the proposal.
                    default: VOTE_OPTION_UNSPECIFIED
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    type: string
                  proposal_id:
                    description: proposal is the unique ID of the proposal.
                    format: uint64
                    type: string
                  submit_time:
                    description: submit_time is the timestamp when the vote was submitted.
                    format: date-time
                    type: string
                  voter:
                    description: voter is the account address of the voter.
                    type: string
                title: Vote represents a vote for a proposal.string metadata
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: VoteByProposalVoter queries a vote by proposal id and voter.
      tags:
        - Query
  /cosmos/group/v1/votes_by_proposal/{proposal_id}:
    get:
      operationId: VotesByProposal
      parameters:
        - description: proposal_id is the unique ID of a proposal.
          format: uint64
          in: path
          name: proposal_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryVotesByProposalResponse is the Query/VotesByProposal response
              type.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              votes:
                description: votes are the list of votes for given proposal_id.
                items:
                  properties:
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the vote.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/group#vote-2
                      type: string
                    option:
                      description: option is the voter's choice on the proposal.
                      default: VOTE_OPTION_UNSPECIFIED
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      type: string
                    proposal_id:
                      description: proposal is the unique ID of the proposal.
                      format: uint64
                      type: string
                    submit_time:
                      description: >-
                        submit_time is the timestamp when the vote was
                        submitted.
                      format: date-time
                      type: string
                    voter:
                      description: voter is the account address of the voter.
                      type: string
                  title: Vote represents a vote for a proposal.string metadata
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: VotesByProposal queries a vote by proposal id.
      tags:
        - Query
  /cosmos/group/v1/votes_by_voter/{voter}:
    get:
      operationId: VotesByVoter
      parameters:
        - description: voter is a proposal voter account address.
          in: path
          name: voter
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
            properties:
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              votes:
                description: votes are the list of votes by given voter.
                items:
                  properties:
                    metadata:
                      title: >-
                        metadata is any arbitrary metadata attached to the vote.

                        the recommended format of the metadata is to be found
                        here:
                        https://docs.cosmos.network/v0.47/modules/group#vote-2
                      type: string
                    option:
                      description: option is the voter's choice on the proposal.
                      default: VOTE_OPTION_UNSPECIFIED
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      type: string
                    proposal_id:
                      description: proposal is the unique ID of the proposal.
                      format: uint64
                      type: string
                    submit_time:
                      description: >-
                        submit_time is the timestamp when the vote was
                        submitted.
                      format: date-time
                      type: string
                    voter:
                      description: voter is the account address of the voter.
                      type: string
                  title: Vote represents a vote for a proposal.string metadata
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: VotesByVoter queries a vote by voter.
      tags:
        - Query
  /cosmos/nft/v1beta1/balance/{owner}/{class_id}:
    get:
      operationId: Balance
      parameters:
        - description: owner is the owner address of the nft
          in: path
          name: owner
          required: true
          type: string
        - description: class_id associated with the nft
          in: path
          name: class_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              amount:
                format: uint64
                title: >-
                  amount is the number of all NFTs of a given class owned by the
                  owner
                type: string
            title: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Balance queries the number of NFTs of a given class owned by the owner,
        same as balanceOf in ERC721
      tags:
        - Query
  /cosmos/nft/v1beta1/classes:
    get:
      operationId: Classes
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              classes:
                description: class defines the class of the nft type.
                items:
                  description: Class defines the class of the nft type.
                  properties:
                    data:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                      title: >-
                        data is the app specific metadata of the NFT class.
                        Optional
                    description:
                      title: >-
                        description is a brief description of nft
                        classification. Optional
                      type: string
                    id:
                      title: >-
                        id defines the unique identifier of the NFT
                        classification, similar to the contract address of
                        ERC721
                      type: string
                    name:
                      title: >-
                        name defines the human-readable name of the NFT
                        classification. Optional
                      type: string
                    symbol:
                      title: >-
                        symbol is an abbreviated name for nft classification.
                        Optional
                      type: string
                    uri:
                      title: >-
                        uri for the class metadata stored off chain. It can
                        define schema for Class and NFT `Data` attributes.
                        Optional
                      type: string
                    uri_hash:
                      title: >-
                        uri_hash is a hash of the document pointed by uri.
                        Optional
                      type: string
                  type: object
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryClassesResponse is the response type for the Query/Classes
              RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Classes queries all NFT classes
      tags:
        - Query
  /cosmos/nft/v1beta1/classes/{class_id}:
    get:
      operationId: Class
      parameters:
        - description: class_id associated with the nft
          in: path
          name: class_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              class:
                description: class defines the class of the nft type.
                properties:
                  data:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                    title: >-
                      data is the app specific metadata of the NFT class.
                      Optional
                  description:
                    title: >-
                      description is a brief description of nft classification.
                      Optional
                    type: string
                  id:
                    title: >-
                      id defines the unique identifier of the NFT
                      classification, similar to the contract address of ERC721
                    type: string
                  name:
                    title: >-
                      name defines the human-readable name of the NFT
                      classification. Optional
                    type: string
                  symbol:
                    title: >-
                      symbol is an abbreviated name for nft classification.
                      Optional
                    type: string
                  uri:
                    title: >-
                      uri for the class metadata stored off chain. It can define
                      schema for Class and NFT `Data` attributes. Optional
                    type: string
                  uri_hash:
                    title: >-
                      uri_hash is a hash of the document pointed by uri.
                      Optional
                    type: string
                type: object
            title: >-
              QueryClassResponse is the response type for the Query/Class RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Class queries an NFT class based on its id
      tags:
        - Query
  /cosmos/nft/v1beta1/nfts:
    get:
      operationId: NFTs
      parameters:
        - description: class_id associated with the nft.
          in: query
          name: class_id
          required: false
          type: string
        - description: owner is the owner address of the nft.
          in: query
          name: owner
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              nfts:
                items:
                  description: NFT defines the NFT.
                  properties:
                    class_id:
                      title: >-
                        class_id associated with the NFT, similar to the
                        contract address of ERC721
                      type: string
                    data:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                      title: data is an app specific data of the NFT. Optional
                    id:
                      title: id is a unique identifier of the NFT
                      type: string
                    uri:
                      title: uri for the NFT metadata stored off chain
                      type: string
                    uri_hash:
                      title: uri_hash is a hash of the document pointed by uri
                      type: string
                  type: object
                title: NFT defines the NFT
                type: array
              pagination:
                description: pagination defines the pagination in the response.
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryNFTsResponse is the response type for the Query/NFTs RPC
              methods
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        NFTs queries all NFTs of a given class or owner,choose at least one of
        the two, similar to tokenByIndex in

        ERC721Enumerable
      tags:
        - Query
  /cosmos/nft/v1beta1/nfts/{class_id}/{id}:
    get:
      operationId: NFT
      parameters:
        - description: class_id associated with the nft
          in: path
          name: class_id
          required: true
          type: string
        - description: id is a unique identifier of the NFT
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              nft:
                title: owner is the owner address of the nft
                description: NFT defines the NFT.
                properties:
                  class_id:
                    title: >-
                      class_id associated with the NFT, similar to the contract
                      address of ERC721
                    type: string
                  data:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                    title: data is an app specific data of the NFT. Optional
                  id:
                    title: id is a unique identifier of the NFT
                    type: string
                  uri:
                    title: uri for the NFT metadata stored off chain
                    type: string
                  uri_hash:
                    title: uri_hash is a hash of the document pointed by uri
                    type: string
                type: object
            title: QueryNFTResponse is the response type for the Query/NFT RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: NFT queries an NFT based on its class and id.
      tags:
        - Query
  /cosmos/nft/v1beta1/owner/{class_id}/{id}:
    get:
      operationId: Owner
      parameters:
        - description: class_id associated with the nft
          in: path
          name: class_id
          required: true
          type: string
        - description: id is a unique identifier of the NFT
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              owner:
                title: owner is the owner address of the nft
                type: string
            title: >-
              QueryOwnerResponse is the response type for the Query/Owner RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Owner queries the owner of the NFT based on its class and id, same as
        ownerOf in ERC721
      tags:
        - Query
  /cosmos/nft/v1beta1/supply/{class_id}:
    get:
      operationId: Supply
      parameters:
        - description: class_id associated with the nft
          in: path
          name: class_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              amount:
                format: uint64
                title: amount is the number of all NFTs from the given class
                type: string
            title: >-
              QuerySupplyResponse is the response type for the Query/Supply RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Supply queries the number of NFTs from the given class, same as
        totalSupply of ERC721.
      tags:
        - Query
  /cosmos/params/v1beta1/params:
    get:
      operationId: Params
      parameters:
        - description: subspace defines the module to query the parameter for.
          in: query
          name: subspace
          required: false
          type: string
        - description: key defines the key of the parameter in the subspace.
          in: query
          name: key
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
            properties:
              param:
                description: param defines the queried parameter.
                properties:
                  key:
                    type: string
                  subspace:
                    type: string
                  value:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      tags:
        - Query
  /cosmos/params/v1beta1/subspaces:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: Subspaces
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QuerySubspacesResponse defines the response types for querying for
              all

              registered subspaces and all keys for a subspace.


              Since: cosmos-sdk 0.46
            properties:
              subspaces:
                items:
                  description: >-
                    Subspace defines a parameter subspace name and all the keys
                    that exist for

                    the subspace.


                    Since: cosmos-sdk 0.46
                  properties:
                    keys:
                      items:
                        type: string
                      type: array
                    subspace:
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Subspaces queries for all registered subspaces and all keys for a
        subspace.
      tags:
        - Query
  /cosmos/slashing/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              params:
                description: >-
                  Params represents the parameters used for by the slashing
                  module.
                properties:
                  downtime_jail_duration:
                    type: string
                  min_signed_per_window:
                    format: byte
                    type: string
                  signed_blocks_window:
                    format: int64
                    type: string
                  slash_fraction_double_sign:
                    format: byte
                    type: string
                  slash_fraction_downtime:
                    format: byte
                    type: string
                type: object
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries the parameters of slashing module
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      operationId: SigningInfos
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              info:
                items:
                  description: >-
                    ValidatorSigningInfo defines a validator's signing info for
                    monitoring their

                    liveness activity.
                  properties:
                    address:
                      type: string
                    index_offset:
                      description: >-
                        Index which is incremented every time a validator is
                        bonded in a block and

                        _may_ have signed a pre-commit or not. This in
                        conjunction with the

                        signed_blocks_window param determines the index in the
                        missed block bitmap.
                      format: int64
                      type: string
                    jailed_until:
                      description: >-
                        Timestamp until which the validator is jailed due to
                        liveness downtime.
                      format: date-time
                      type: string
                    missed_blocks_counter:
                      description: >-
                        A counter of missed (unsigned) blocks. It is used to
                        avoid unnecessary

                        reads in the missed block bitmap.
                      format: int64
                      type: string
                    start_height:
                      format: int64
                      title: >-
                        Height at which validator was first a candidate OR was
                        un-jailed
                      type: string
                    tombstoned:
                      description: >-
                        Whether or not a validator has been tombstoned (killed
                        out of validator

                        set). It is set once the validator commits an
                        equivocation or for any other

                        configured misbehavior.
                      type: boolean
                  type: object
                title: info is the signing info of all validators
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QuerySigningInfosResponse is the response type for the
              Query/SigningInfos RPC

              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: SigningInfos queries signing info of all validators
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos/{cons_address}:
    get:
      operationId: SigningInfo
      parameters:
        - description: cons_address is the address to query signing info of
          in: path
          name: cons_address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              val_signing_info:
                title: >-
                  val_signing_info is the signing info of requested val cons
                  address
                description: >-
                  ValidatorSigningInfo defines a validator's signing info for
                  monitoring their

                  liveness activity.
                properties:
                  address:
                    type: string
                  index_offset:
                    description: >-
                      Index which is incremented every time a validator is
                      bonded in a block and

                      _may_ have signed a pre-commit or not. This in conjunction
                      with the

                      signed_blocks_window param determines the index in the
                      missed block bitmap.
                    format: int64
                    type: string
                  jailed_until:
                    description: >-
                      Timestamp until which the validator is jailed due to
                      liveness downtime.
                    format: date-time
                    type: string
                  missed_blocks_counter:
                    description: >-
                      A counter of missed (unsigned) blocks. It is used to avoid
                      unnecessary

                      reads in the missed block bitmap.
                    format: int64
                    type: string
                  start_height:
                    format: int64
                    title: >-
                      Height at which validator was first a candidate OR was
                      un-jailed
                    type: string
                  tombstoned:
                    description: >-
                      Whether or not a validator has been tombstoned (killed out
                      of validator

                      set). It is set once the validator commits an equivocation
                      or for any other

                      configured misbehavior.
                    type: boolean
                type: object
            title: >-
              QuerySigningInfoResponse is the response type for the
              Query/SigningInfo RPC

              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: SigningInfo queries the signing info of given cons address
      tags:
        - Query
  /cosmos/staking/v1beta1/delegations/{delegator_addr}:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: DelegatorDelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegatorDelegationsResponse is response type for the
              Query/DelegatorDelegations RPC method.
            properties:
              delegation_responses:
                description: >-
                  delegation_responses defines all the delegations' info of a
                  delegator.
                items:
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
                  properties:
                    balance:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    delegation:
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                      properties:
                        delegator_address:
                          description: >-
                            delegator_address is the encoded address of the
                            delegator.
                          type: string
                        shares:
                          description: shares define the delegation shares received.
                          type: string
                        validator_address:
                          description: >-
                            validator_address is the encoded address of the
                            validator.
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        DelegatorDelegations queries all delegations of a given delegator
        address.
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: Redelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
        - description: src_validator_addr defines the validator address to redelegate from.
          in: query
          name: src_validator_addr
          required: false
          type: string
        - description: dst_validator_addr defines the validator address to redelegate to.
          in: query
          name: dst_validator_addr
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryRedelegationsResponse is response type for the
              Query/Redelegations RPC

              method.
            properties:
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              redelegation_responses:
                items:
                  description: >-
                    RedelegationResponse is equivalent to a Redelegation except
                    that its entries

                    contain a balance in addition to shares which is more
                    suitable for client

                    responses.
                  properties:
                    entries:
                      items:
                        description: >-
                          RedelegationEntryResponse is equivalent to a
                          RedelegationEntry except that it

                          contains a balance in addition to shares which is more
                          suitable for client

                          responses.
                        properties:
                          balance:
                            type: string
                          redelegation_entry:
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                            properties:
                              completion_time:
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                                format: date-time
                                type: string
                              creation_height:
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                                format: int64
                                type: string
                              initial_balance:
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                                type: string
                              shares_dst:
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                                type: string
                              unbonding_id:
                                format: uint64
                                title: >-
                                  Incrementing id that uniquely identifies this
                                  entry
                                type: string
                              unbonding_on_hold_ref_count:
                                format: int64
                                title: >-
                                  Strictly positive if this entry's unbonding
                                  has been stopped by external modules
                                type: string
                            type: object
                        type: object
                      type: array
                    redelegation:
                      description: >-
                        Redelegation contains the list of a particular
                        delegator's redelegating bonds

                        from a particular source validator to a particular
                        destination validator.
                      properties:
                        delegator_address:
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                          type: string
                        entries:
                          description: entries are the redelegation entries.
                          items:
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                            properties:
                              completion_time:
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                                format: date-time
                                type: string
                              creation_height:
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                                format: int64
                                type: string
                              initial_balance:
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                                type: string
                              shares_dst:
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                                type: string
                              unbonding_id:
                                format: uint64
                                title: >-
                                  Incrementing id that uniquely identifies this
                                  entry
                                type: string
                              unbonding_on_hold_ref_count:
                                format: int64
                                title: >-
                                  Strictly positive if this entry's unbonding
                                  has been stopped by external modules
                                type: string
                            type: object
                          type: array
                        validator_dst_address:
                          description: >-
                            validator_dst_address is the validator redelegation
                            destination operator address.
                          type: string
                        validator_src_address:
                          description: >-
                            validator_src_address is the validator redelegation
                            source operator address.
                          type: string
                      type: object
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Redelegations queries redelegations of given address.
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: DelegatorUnbondingDelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryUnbondingDelegatorDelegationsResponse is response type for
              the

              Query/UnbondingDelegatorDelegations RPC method.
            properties:
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              unbonding_responses:
                items:
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
                  properties:
                    delegator_address:
                      description: >-
                        delegator_address is the encoded address of the
                        delegator.
                      type: string
                    entries:
                      description: entries are the unbonding delegation entries.
                      items:
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                        properties:
                          balance:
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                            type: string
                          completion_time:
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                            format: date-time
                            type: string
                          creation_height:
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                            format: int64
                            type: string
                          initial_balance:
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                            type: string
                          unbonding_id:
                            format: uint64
                            title: >-
                              Incrementing id that uniquely identifies this
                              entry
                            type: string
                          unbonding_on_hold_ref_count:
                            format: int64
                            title: >-
                              Strictly positive if this entry's unbonding has
                              been stopped by external modules
                            type: string
                        type: object
                      type: array
                    validator_address:
                      description: >-
                        validator_address is the encoded address of the
                        validator.
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given

        delegator address.
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: DelegatorValidators
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegatorValidatorsResponse is response type for the
              Query/DelegatorValidators RPC method.
            properties:
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              validators:
                description: validators defines the validators' info of a delegator.
                items:
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                  properties:
                    commission:
                      description: commission defines the commission parameters.
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          properties:
                            max_change_rate:
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                              type: string
                            max_rate:
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                              type: string
                            rate:
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                              type: string
                          type: object
                        update_time:
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                          format: date-time
                          type: string
                      type: object
                    consensus_pubkey:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    delegator_shares:
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                      type: string
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      properties:
                        details:
                          description: details define other optional details.
                          type: string
                        identity:
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                          type: string
                        moniker:
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                          type: string
                        security_contact:
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                          type: string
                        website:
                          description: website defines an optional website link.
                          type: string
                      type: object
                    jailed:
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                      type: boolean
                    min_self_delegation:
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.


                        Since: cosmos-sdk 0.46
                      type: string
                    operator_address:
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                      type: string
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      default: BOND_STATUS_UNSPECIFIED
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      type: string
                    tokens:
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                      type: string
                    unbonding_height:
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                      format: int64
                      type: string
                    unbonding_ids:
                      items:
                        format: uint64
                        type: string
                      title: >-
                        list of unbonding ids, each uniquely identifing an
                        unbonding of this validator
                      type: array
                    unbonding_on_hold_ref_count:
                      format: int64
                      title: >-
                        strictly positive if this validator's unbonding has been
                        stopped by external modules
                      type: string
                    unbonding_time:
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                      format: date-time
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}:
    get:
      operationId: DelegatorValidator
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryDelegatorValidatorResponse response type for the
              Query/DelegatorValidator RPC method.
            properties:
              validator:
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
                properties:
                  commission:
                    description: commission defines the commission parameters.
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        properties:
                          max_change_rate:
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                            type: string
                          max_rate:
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                            type: string
                          rate:
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                            type: string
                        type: object
                      update_time:
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                        format: date-time
                        type: string
                    type: object
                  consensus_pubkey:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  delegator_shares:
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                    type: string
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    properties:
                      details:
                        description: details define other optional details.
                        type: string
                      identity:
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                        type: string
                      moniker:
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                        type: string
                      security_contact:
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                        type: string
                      website:
                        description: website defines an optional website link.
                        type: string
                    type: object
                  jailed:
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                    type: boolean
                  min_self_delegation:
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.


                      Since: cosmos-sdk 0.46
                    type: string
                  operator_address:
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                    type: string
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    default: BOND_STATUS_UNSPECIFIED
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    type: string
                  tokens:
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                    type: string
                  unbonding_height:
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                    format: int64
                    type: string
                  unbonding_ids:
                    items:
                      format: uint64
                      type: string
                    title: >-
                      list of unbonding ids, each uniquely identifing an
                      unbonding of this validator
                    type: array
                  unbonding_on_hold_ref_count:
                    format: int64
                    title: >-
                      strictly positive if this validator's unbonding has been
                      stopped by external modules
                    type: string
                  unbonding_time:
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                    format: date-time
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      tags:
        - Query
  /cosmos/staking/v1beta1/historical_info/{height}:
    get:
      operationId: HistoricalInfo
      parameters:
        - description: height defines at which height to query the historical info.
          format: int64
          in: path
          name: height
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryHistoricalInfoResponse is response type for the
              Query/HistoricalInfo RPC

              method.
            properties:
              hist:
                description: hist defines the historical info at the given height.
                properties:
                  header:
                    description: Header defines the structure of a block header.
                    properties:
                      app_hash:
                        format: byte
                        type: string
                      chain_id:
                        type: string
                      consensus_hash:
                        format: byte
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      evidence_hash:
                        format: byte
                        title: consensus info
                        type: string
                      height:
                        format: int64
                        type: string
                      last_block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      last_commit_hash:
                        format: byte
                        title: hashes of block data
                        type: string
                      last_results_hash:
                        format: byte
                        type: string
                      next_validators_hash:
                        format: byte
                        type: string
                      proposer_address:
                        format: byte
                        type: string
                      time:
                        format: date-time
                        type: string
                      validators_hash:
                        format: byte
                        title: hashes from the app output from the prev block
                        type: string
                      version:
                        title: basic block info
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                        type: object
                    type: object
                  valset:
                    items:
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
                      properties:
                        commission:
                          description: commission defines the commission parameters.
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              properties:
                                max_change_rate:
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                                  type: string
                                max_rate:
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                  type: string
                                rate:
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                  type: string
                              type: object
                            update_time:
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                              format: date-time
                              type: string
                          type: object
                        consensus_pubkey:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }
                                // or ...
                                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                                  foo = any.unpack(Foo.getDefaultInstance());
                                }

                            Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                            Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".


                            JSON


                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        delegator_shares:
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                          type: string
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          properties:
                            details:
                              description: details define other optional details.
                              type: string
                            identity:
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                              type: string
                            moniker:
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                              type: string
                            security_contact:
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                              type: string
                            website:
                              description: website defines an optional website link.
                              type: string
                          type: object
                        jailed:
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                          type: boolean
                        min_self_delegation:
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.


                            Since: cosmos-sdk 0.46
                          type: string
                        operator_address:
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                          type: string
                        status:
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          default: BOND_STATUS_UNSPECIFIED
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          type: string
                        tokens:
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                          type: string
                        unbonding_height:
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                          format: int64
                          type: string
                        unbonding_ids:
                          items:
                            format: uint64
                            type: string
                          title: >-
                            list of unbonding ids, each uniquely identifing an
                            unbonding of this validator
                          type: array
                        unbonding_on_hold_ref_count:
                          format: int64
                          title: >-
                            strictly positive if this validator's unbonding has
                            been stopped by external modules
                          type: string
                        unbonding_time:
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                          format: date-time
                          type: string
                      type: object
                    type: array
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: HistoricalInfo queries the historical info for given height.
      tags:
        - Query
  /cosmos/staking/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params holds all the parameters of this module.
                properties:
                  bond_denom:
                    description: bond_denom defines the bondable coin denomination.
                    type: string
                  historical_entries:
                    description: >-
                      historical_entries is the number of historical entries to
                      persist.
                    format: int64
                    type: integer
                  max_entries:
                    description: >-
                      max_entries is the max entries for either unbonding
                      delegation or redelegation (per pair/trio).
                    format: int64
                    type: integer
                  max_validators:
                    description: max_validators is the maximum number of validators.
                    format: int64
                    type: integer
                  min_commission_rate:
                    title: >-
                      min_commission_rate is the chain-wide minimum commission
                      rate that a validator can charge their delegators
                    type: string
                  unbonding_time:
                    description: unbonding_time is the time duration of unbonding.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Parameters queries the staking parameters.
      tags:
        - Query
  /cosmos/staking/v1beta1/pool:
    get:
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
            properties:
              pool:
                description: pool defines the pool info.
                properties:
                  bonded_tokens:
                    type: string
                  not_bonded_tokens:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Pool queries the pool info.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: Validators
      parameters:
        - description: status enables to query for validators matching a given status.
          in: query
          name: status
          required: false
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              validators:
                description: validators contains all the queried validators.
                items:
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                  properties:
                    commission:
                      description: commission defines the commission parameters.
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          properties:
                            max_change_rate:
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                              type: string
                            max_rate:
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                              type: string
                            rate:
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                              type: string
                          type: object
                        update_time:
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                          format: date-time
                          type: string
                      type: object
                    consensus_pubkey:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    delegator_shares:
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                      type: string
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      properties:
                        details:
                          description: details define other optional details.
                          type: string
                        identity:
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                          type: string
                        moniker:
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                          type: string
                        security_contact:
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                          type: string
                        website:
                          description: website defines an optional website link.
                          type: string
                      type: object
                    jailed:
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                      type: boolean
                    min_self_delegation:
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.


                        Since: cosmos-sdk 0.46
                      type: string
                    operator_address:
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                      type: string
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      default: BOND_STATUS_UNSPECIFIED
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      type: string
                    tokens:
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                      type: string
                    unbonding_height:
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                      format: int64
                      type: string
                    unbonding_ids:
                      items:
                        format: uint64
                        type: string
                      title: >-
                        list of unbonding ids, each uniquely identifing an
                        unbonding of this validator
                      type: array
                    unbonding_on_hold_ref_count:
                      format: int64
                      title: >-
                        strictly positive if this validator's unbonding has been
                        stopped by external modules
                      type: string
                    unbonding_time:
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                      format: date-time
                      type: string
                  type: object
                type: array
            title: >-
              QueryValidatorsResponse is response type for the Query/Validators
              RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Validators queries all validators that match the given status.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}:
    get:
      operationId: Validator
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              validator:
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
                properties:
                  commission:
                    description: commission defines the commission parameters.
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        properties:
                          max_change_rate:
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                            type: string
                          max_rate:
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                            type: string
                          rate:
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                            type: string
                        type: object
                      update_time:
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                        format: date-time
                        type: string
                    type: object
                  consensus_pubkey:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  delegator_shares:
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                    type: string
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    properties:
                      details:
                        description: details define other optional details.
                        type: string
                      identity:
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                        type: string
                      moniker:
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                        type: string
                      security_contact:
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                        type: string
                      website:
                        description: website defines an optional website link.
                        type: string
                    type: object
                  jailed:
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                    type: boolean
                  min_self_delegation:
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.


                      Since: cosmos-sdk 0.46
                    type: string
                  operator_address:
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                    type: string
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    default: BOND_STATUS_UNSPECIFIED
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    type: string
                  tokens:
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                    type: string
                  unbonding_height:
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                    format: int64
                    type: string
                  unbonding_ids:
                    items:
                      format: uint64
                      type: string
                    title: >-
                      list of unbonding ids, each uniquely identifing an
                      unbonding of this validator
                    type: array
                  unbonding_on_hold_ref_count:
                    format: int64
                    title: >-
                      strictly positive if this validator's unbonding has been
                      stopped by external modules
                    type: string
                  unbonding_time:
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                    format: date-time
                    type: string
                type: object
            title: >-
              QueryValidatorResponse is response type for the Query/Validator
              RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Validator queries validator info for given validator address.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: ValidatorDelegations
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              delegation_responses:
                items:
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
                  properties:
                    balance:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    delegation:
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                      properties:
                        delegator_address:
                          description: >-
                            delegator_address is the encoded address of the
                            delegator.
                          type: string
                        shares:
                          description: shares define the delegation shares received.
                          type: string
                        validator_address:
                          description: >-
                            validator_address is the encoded address of the
                            validator.
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: |-
              QueryValidatorDelegationsResponse is response type for the
              Query/ValidatorDelegations RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ValidatorDelegations queries delegate info for given validator.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}:
    get:
      operationId: Delegation
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDelegationResponse is response type for the Query/Delegation
              RPC method.
            properties:
              delegation_response:
                description: >-
                  delegation_responses defines the delegation info of a
                  delegation.
                properties:
                  balance:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  delegation:
                    description: >-
                      Delegation represents the bond with tokens held by an
                      account. It is

                      owned by one delegator, and is associated with the voting
                      power of one

                      validator.
                    properties:
                      delegator_address:
                        description: >-
                          delegator_address is the encoded address of the
                          delegator.
                        type: string
                      shares:
                        description: shares define the delegation shares received.
                        type: string
                      validator_address:
                        description: >-
                          validator_address is the encoded address of the
                          validator.
                        type: string
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Delegation queries delegate info for given validator delegator pair.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation:
    get:
      operationId: UnbondingDelegation
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDelegationResponse is response type for the
              Query/UnbondingDelegation

              RPC method.
            properties:
              unbond:
                description: >-
                  UnbondingDelegation stores all of a single delegator's
                  unbonding bonds

                  for a single validator in an time-ordered list.
                properties:
                  delegator_address:
                    description: delegator_address is the encoded address of the delegator.
                    type: string
                  entries:
                    description: entries are the unbonding delegation entries.
                    items:
                      description: >-
                        UnbondingDelegationEntry defines an unbonding object
                        with relevant metadata.
                      properties:
                        balance:
                          description: balance defines the tokens to receive at completion.
                          type: string
                        completion_time:
                          description: >-
                            completion_time is the unix time for unbonding
                            completion.
                          format: date-time
                          type: string
                        creation_height:
                          description: >-
                            creation_height is the height which the unbonding
                            took place.
                          format: int64
                          type: string
                        initial_balance:
                          description: >-
                            initial_balance defines the tokens initially
                            scheduled to receive at completion.
                          type: string
                        unbonding_id:
                          format: uint64
                          title: Incrementing id that uniquely identifies this entry
                          type: string
                        unbonding_on_hold_ref_count:
                          format: int64
                          title: >-
                            Strictly positive if this entry's unbonding has been
                            stopped by external modules
                          type: string
                      type: object
                    type: array
                  validator_address:
                    description: validator_address is the encoded address of the validator.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations:
    get:
      description: >-
        When called from another module, this query might consume a high amount
        of

        gas if the pagination field is incorrectly set.
      operationId: ValidatorUnbondingDelegations
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryValidatorUnbondingDelegationsResponse is response type for
              the

              Query/ValidatorUnbondingDelegations RPC method.
            properties:
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
              unbonding_responses:
                items:
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
                  properties:
                    delegator_address:
                      description: >-
                        delegator_address is the encoded address of the
                        delegator.
                      type: string
                    entries:
                      description: entries are the unbonding delegation entries.
                      items:
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                        properties:
                          balance:
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                            type: string
                          completion_time:
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                            format: date-time
                            type: string
                          creation_height:
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                            format: int64
                            type: string
                          initial_balance:
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                            type: string
                          unbonding_id:
                            format: uint64
                            title: >-
                              Incrementing id that uniquely identifies this
                              entry
                            type: string
                          unbonding_on_hold_ref_count:
                            format: int64
                            title: >-
                              Strictly positive if this entry's unbonding has
                              been stopped by external modules
                            type: string
                        type: object
                      type: array
                    validator_address:
                      description: >-
                        validator_address is the encoded address of the
                        validator.
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator.
      tags:
        - Query
  /cosmos/upgrade/v1beta1/applied_plan/{name}:
    get:
      operationId: AppliedPlan
      parameters:
        - description: name is the name of the applied plan to query for.
          in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryAppliedPlanResponse is the response type for the
              Query/AppliedPlan RPC

              method.
            properties:
              height:
                description: height is the block height at which the plan was applied.
                format: int64
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      tags:
        - Query
  /cosmos/upgrade/v1beta1/authority:
    get:
      description: 'Since: cosmos-sdk 0.46'
      operationId: Authority
      responses:
        '200':
          description: A successful response.
          schema:
            description: 'Since: cosmos-sdk 0.46'
            properties:
              address:
                type: string
            title: QueryAuthorityResponse is the response type for Query/Authority
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Returns the account with authority to conduct upgrades
      tags:
        - Query
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      operationId: CurrentPlan
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryCurrentPlanResponse is the response type for the
              Query/CurrentPlan RPC

              method.
            properties:
              plan:
                description: plan is the current upgrade plan.
                properties:
                  height:
                    description: The height at which the upgrade must be performed.
                    format: int64
                    type: string
                  info:
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                    type: string
                  name:
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                    type: string
                  time:
                    description: >-
                      Deprecated: Time based upgrades have been deprecated. Time
                      based upgrade logic

                      has been removed from the SDK.

                      If this field is not empty, an error will be thrown.
                    format: date-time
                    type: string
                  upgraded_client_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: CurrentPlan queries the current upgrade plan.
      tags:
        - Query
  /cosmos/upgrade/v1beta1/module_versions:
    get:
      description: 'Since: cosmos-sdk 0.43'
      operationId: ModuleVersions
      parameters:
        - description: |-
            module_name is a field to query a specific module
            consensus version from state. Leaving this empty will
            fetch the full list of module versions from state.
          in: query
          name: module_name
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryModuleVersionsResponse is the response type for the
              Query/ModuleVersions

              RPC method.


              Since: cosmos-sdk 0.43
            properties:
              module_versions:
                description: >-
                  module_versions is a list of module names with their consensus
                  versions.
                items:
                  description: |-
                    ModuleVersion specifies a module and its consensus version.

                    Since: cosmos-sdk 0.43
                  properties:
                    name:
                      title: name of the app module
                      type: string
                    version:
                      format: uint64
                      title: consensus version of the app module
                      type: string
                  type: object
                type: array
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ModuleVersions queries the list of module versions from state.
      tags:
        - Query
  /cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}:
    get:
      operationId: UpgradedConsensusState
      parameters:
        - description: |-
            last height of the current chain must be sent in request
            as this is the height under which next consensus state is stored
          format: int64
          in: path
          name: last_height
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState

              RPC method.
            properties:
              upgraded_consensus_state:
                format: byte
                title: 'Since: cosmos-sdk 0.43'
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        UpgradedConsensusState queries the consensus state that will serve

        as a trusted kernel for the next version of this chain. It will only be

        stored at the last height of this chain.

        UpgradedConsensusState RPC not supported with legacy querier

        This rpc is deprecated now that IBC has its own replacement

        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      tags:
        - Query
  /cosmwasm/wasm/v1/code:
    get:
      operationId: Codes
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              code_infos:
                items:
                  properties:
                    code_id:
                      format: uint64
                      type: string
                    creator:
                      type: string
                    data_hash:
                      format: byte
                      type: string
                    instantiate_permission:
                      description: AccessConfig access control type.
                      properties:
                        addresses:
                          items:
                            type: string
                          type: array
                        permission:
                          default: ACCESS_TYPE_UNSPECIFIED
                          description: >-
                            - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                            placeholder for empty value
                             - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                             - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                             - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                          enum:
                            - ACCESS_TYPE_UNSPECIFIED
                            - ACCESS_TYPE_NOBODY
                            - ACCESS_TYPE_EVERYBODY
                            - ACCESS_TYPE_ANY_OF_ADDRESSES
                          title: AccessType permission types
                          type: string
                      type: object
                  title: CodeInfoResponse contains code meta data from CodeInfo
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryCodesResponse is the response type for the Query/Codes RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Codes gets the metadata for all stored wasm codes
      tags:
        - Query
  /cosmwasm/wasm/v1/code/{code_id}:
    get:
      operationId: Code
      parameters:
        - format: uint64
          in: path
          name: code_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              code_info:
                properties:
                  code_id:
                    format: uint64
                    type: string
                  creator:
                    type: string
                  data_hash:
                    format: byte
                    type: string
                  instantiate_permission:
                    description: AccessConfig access control type.
                    properties:
                      addresses:
                        items:
                          type: string
                        type: array
                      permission:
                        default: ACCESS_TYPE_UNSPECIFIED
                        description: >-
                          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                          placeholder for empty value
                           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                        enum:
                          - ACCESS_TYPE_UNSPECIFIED
                          - ACCESS_TYPE_NOBODY
                          - ACCESS_TYPE_EVERYBODY
                          - ACCESS_TYPE_ANY_OF_ADDRESSES
                        title: AccessType permission types
                        type: string
                    type: object
                title: CodeInfoResponse contains code meta data from CodeInfo
                type: object
              data:
                format: byte
                type: string
            title: >-
              QueryCodeResponse is the response type for the Query/Code RPC
              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Code gets the binary code and metadata for a singe wasm code
      tags:
        - Query
  /cosmwasm/wasm/v1/code/{code_id}/contracts:
    get:
      operationId: ContractsByCode
      parameters:
        - format: uint64
          in: path
          name: code_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              contracts:
                items:
                  type: string
                title: contracts are a set of contract addresses
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: |-
              QueryContractsByCodeResponse is the response type for the
              Query/ContractsByCode RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ContractsByCode lists all smart contracts for a code id
      tags:
        - Query
  /cosmwasm/wasm/v1/codes/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  code_upload_access:
                    description: AccessConfig access control type.
                    properties:
                      addresses:
                        items:
                          type: string
                        type: array
                      permission:
                        default: ACCESS_TYPE_UNSPECIFIED
                        description: >-
                          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                          placeholder for empty value
                           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                        enum:
                          - ACCESS_TYPE_UNSPECIFIED
                          - ACCESS_TYPE_NOBODY
                          - ACCESS_TYPE_EVERYBODY
                          - ACCESS_TYPE_ANY_OF_ADDRESSES
                        title: AccessType permission types
                        type: string
                    type: object
                  instantiate_default_permission:
                    default: ACCESS_TYPE_UNSPECIFIED
                    description: >-
                      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                      placeholder for empty value
                       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                       - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                    enum:
                      - ACCESS_TYPE_UNSPECIFIED
                      - ACCESS_TYPE_NOBODY
                      - ACCESS_TYPE_EVERYBODY
                      - ACCESS_TYPE_ANY_OF_ADDRESSES
                    title: AccessType permission types
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params gets the module params
      tags:
        - Query
  /cosmwasm/wasm/v1/codes/pinned:
    get:
      operationId: PinnedCodes
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              code_ids:
                items:
                  format: uint64
                  type: string
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: |-
              QueryPinnedCodesResponse is the response type for the
              Query/PinnedCodes RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: PinnedCodes gets the pinned code ids
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/build_address:
    get:
      operationId: BuildAddress
      parameters:
        - description: CodeHash is the hash of the code.
          in: query
          name: code_hash
          required: false
          type: string
        - description: CreatorAddress is the address of the contract instantiator.
          in: query
          name: creator_address
          required: false
          type: string
        - description: Salt is a hex encoded salt.
          in: query
          name: salt
          required: false
          type: string
        - description: >-
            InitArgs are optional json encoded init args to be used in contract
            address

            building if provided.
          format: byte
          in: query
          name: init_args
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryBuildAddressResponse is the response type for the
              Query/BuildAddress RPC

              method.
            properties:
              address:
                title: Address is the contract address
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: BuildAddress builds a contract address
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}:
    get:
      operationId: ContractInfo
      parameters:
        - description: address is the address of the contract to query
          in: path
          name: address
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              address:
                title: address is the address of the contract
                type: string
              contract_info:
                properties:
                  admin:
                    title: Admin is an optional address that can execute migrations
                    type: string
                  code_id:
                    format: uint64
                    title: CodeID is the reference to the stored Wasm code
                    type: string
                  created:
                    description: Created Tx position when the contract was instantiated.
                    properties:
                      block_height:
                        format: uint64
                        title: BlockHeight is the block the contract was created at
                        type: string
                      tx_index:
                        format: uint64
                        title: >-
                          TxIndex is a monotonic counter within the block
                          (actual transaction index,

                          or gas consumed)
                        type: string
                    type: object
                  creator:
                    title: Creator address who initially instantiated the contract
                    type: string
                  extension:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  ibc_port_id:
                    type: string
                  label:
                    description: >-
                      Label is optional metadata to be stored with a contract
                      instance.
                    type: string
                title: ContractInfo stores a WASM contract instance
                type: object
            title: >-
              QueryContractInfoResponse is the response type for the
              Query/ContractInfo RPC

              method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ContractInfo gets the contract meta data
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/history:
    get:
      operationId: ContractHistory
      parameters:
        - description: address is the address of the contract to query
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              entries:
                items:
                  description: ContractCodeHistoryEntry metadata to a contract.
                  properties:
                    code_id:
                      format: uint64
                      title: CodeID is the reference to the stored WASM code
                      type: string
                    msg:
                      format: byte
                      type: string
                    operation:
                      default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                      description: >-
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                        ContractCodeHistoryOperationTypeUnspecified placeholder
                        for empty value
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
                      enum:
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
                      title: >-
                        ContractCodeHistoryOperationType actions that caused a
                        code change
                      type: string
                    updated:
                      description: Updated Tx position when the operation was executed.
                      properties:
                        block_height:
                          format: uint64
                          title: BlockHeight is the block the contract was created at
                          type: string
                        tx_index:
                          format: uint64
                          title: >-
                            TxIndex is a monotonic counter within the block
                            (actual transaction index,

                            or gas consumed)
                          type: string
                      type: object
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: |-
              QueryContractHistoryResponse is the response type for the
              Query/ContractHistory RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ContractHistory gets the contract code history
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/raw/{query_data}:
    get:
      operationId: RawContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          type: string
        - format: byte
          in: path
          name: query_data
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              data:
                format: byte
                title: Data contains the raw store data
                type: string
            title: |-
              QueryRawContractStateResponse is the response type for the
              Query/RawContractState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: RawContractState gets single key from the raw store data of a contract
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/smart/{query_data}:
    get:
      operationId: SmartContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          type: string
        - description: QueryData contains the query data passed to the contract
          format: byte
          in: path
          name: query_data
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              data:
                format: byte
                title: Data contains the json data returned from the smart contract
                type: string
            title: |-
              QuerySmartContractStateResponse is the response type for the
              Query/SmartContractState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: SmartContractState get smart query result from the contract
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/state:
    get:
      operationId: AllContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              models:
                items:
                  properties:
                    key:
                      format: byte
                      title: hex-encode key to read it better (this is often ascii)
                      type: string
                    value:
                      format: byte
                      title: base64-encode raw value
                      type: string
                  title: Model is a struct that holds a KV pair
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: |-
              QueryAllContractStateResponse is the response type for the
              Query/AllContractState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: AllContractState gets all raw store data for a single contract
      tags:
        - Query
  /cosmwasm/wasm/v1/contracts/creator/{creator_address}:
    get:
      operationId: ContractsByCreator
      parameters:
        - description: CreatorAddress is the address of contract creator
          in: path
          name: creator_address
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryContractsByCreatorResponse is the response type for the
              Query/ContractsByCreator RPC method.
            properties:
              contract_addresses:
                items:
                  type: string
                title: ContractAddresses result set
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ContractsByCreator gets the contracts by creator
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/fee_enabled:
    get:
      operationId: FeeEnabledChannel
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: unique port identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              fee_enabled:
                title: boolean flag representing the fee enabled channel status
                type: boolean
            title: >-
              QueryFeeEnabledChannelResponse defines the response type for the
              FeeEnabledChannel rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        FeeEnabledChannel returns true if the provided port and channel
        identifiers belong to a fee enabled channel
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/incentivized_packets:
    get:
      operationId: IncentivizedPacketsForChannel
      parameters:
        - in: path
          name: channel_id
          required: true
          type: string
        - in: path
          name: port_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
        - description: Height to query at.
          format: uint64
          in: query
          name: query_height
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              incentivized_packets:
                items:
                  properties:
                    packet_fees:
                      items:
                        properties:
                          fee:
                            title: >-
                              fee encapsulates the recv, ack and timeout fees
                              associated with an IBC packet
                            properties:
                              ack_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet acknowledgement fee
                                type: array
                              recv_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet receive fee
                                type: array
                              timeout_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet timeout fee
                                type: array
                            type: object
                          refund_address:
                            title: the refund address for unspent fees
                            type: string
                          relayers:
                            items:
                              type: string
                            title: >-
                              optional list of relayers permitted to receive
                              fees
                            type: array
                        title: >-
                          PacketFee contains ICS29 relayer fees, refund address
                          and optional list of permitted relayers
                        type: object
                      title: list of packet fees
                      type: array
                    packet_id:
                      title: >-
                        unique packet identifier comprised of the channel ID,
                        port ID and sequence
                      properties:
                        channel_id:
                          title: channel unique identifier
                          type: string
                        port_id:
                          title: channel port identifier
                          type: string
                        sequence:
                          format: uint64
                          title: packet sequence
                          type: string
                      type: object
                  title: >-
                    IdentifiedPacketFees contains a list of type PacketFee and
                    associated PacketId
                  type: object
                title: Map of all incentivized_packets
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryIncentivizedPacketsResponse defines the response type for the
              incentivized packets RPC
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Gets all incentivized packets for a specific channel
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/counterparty_payee:
    get:
      operationId: CounterpartyPayee
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: the relayer address to which the counterparty is registered
          in: path
          name: relayer
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              counterparty_payee:
                title: >-
                  the counterparty payee address used to compensate forward
                  relaying
                type: string
            title: >-
              QueryCounterpartyPayeeResponse defines the response type for the
              CounterpartyPayee rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        CounterpartyPayee returns the registered counterparty payee for forward
        relaying
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/payee:
    get:
      operationId: Payee
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: the relayer address to which the distribution address is registered
          in: path
          name: relayer
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              payee_address:
                title: the payee address to which packet fees are paid out
                type: string
            title: QueryPayeeResponse defines the response type for the Payee rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        Payee returns the registered payee address for a specific channel given
        the relayer address
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/incentivized_packet:
    get:
      operationId: IncentivizedPacket
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: packet_id.sequence
          required: true
          type: string
        - description: block height at which to query.
          format: uint64
          in: query
          name: query_height
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              incentivized_packet:
                title: the identified fees for the incentivized packet
                properties:
                  packet_fees:
                    items:
                      properties:
                        fee:
                          title: >-
                            fee encapsulates the recv, ack and timeout fees
                            associated with an IBC packet
                          properties:
                            ack_fee:
                              items:
                                description: >-
                                  Coin defines a token with a denomination and
                                  an amount.


                                  NOTE: The amount field is an Int which
                                  implements the custom method

                                  signatures required by gogoproto.
                                properties:
                                  amount:
                                    type: string
                                  denom:
                                    type: string
                                type: object
                              title: the packet acknowledgement fee
                              type: array
                            recv_fee:
                              items:
                                description: >-
                                  Coin defines a token with a denomination and
                                  an amount.


                                  NOTE: The amount field is an Int which
                                  implements the custom method

                                  signatures required by gogoproto.
                                properties:
                                  amount:
                                    type: string
                                  denom:
                                    type: string
                                type: object
                              title: the packet receive fee
                              type: array
                            timeout_fee:
                              items:
                                description: >-
                                  Coin defines a token with a denomination and
                                  an amount.


                                  NOTE: The amount field is an Int which
                                  implements the custom method

                                  signatures required by gogoproto.
                                properties:
                                  amount:
                                    type: string
                                  denom:
                                    type: string
                                type: object
                              title: the packet timeout fee
                              type: array
                          type: object
                        refund_address:
                          title: the refund address for unspent fees
                          type: string
                        relayers:
                          items:
                            type: string
                          title: optional list of relayers permitted to receive fees
                          type: array
                      title: >-
                        PacketFee contains ICS29 relayer fees, refund address
                        and optional list of permitted relayers
                      type: object
                    title: list of packet fees
                    type: array
                  packet_id:
                    title: >-
                      unique packet identifier comprised of the channel ID, port
                      ID and sequence
                    properties:
                      channel_id:
                        title: channel unique identifier
                        type: string
                      port_id:
                        title: channel port identifier
                        type: string
                      sequence:
                        format: uint64
                        title: packet sequence
                        type: string
                    type: object
                type: object
            title: >-
              QueryIncentivizedPacketsResponse defines the response type for the
              IncentivizedPacket rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        IncentivizedPacket returns all packet fees for a packet given its
        identifier
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_ack_fees:
    get:
      operationId: TotalAckFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: packet_id.sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              ack_fees:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: the total packet acknowledgement fees
                type: array
            title: >-
              QueryTotalAckFeesResponse defines the response type for the
              TotalAckFees rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        TotalAckFees returns the total acknowledgement fees for a packet given
        its identifier
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_recv_fees:
    get:
      operationId: TotalRecvFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: packet_id.sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              recv_fees:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: the total packet receive fees
                type: array
            title: >-
              QueryTotalRecvFeesResponse defines the response type for the
              TotalRecvFees rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        TotalRecvFees returns the total receive fees for a packet given its
        identifier
      tags:
        - Query
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_timeout_fees:
    get:
      operationId: TotalTimeoutFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: packet_id.sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              timeout_fees:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: the total packet timeout fees
                type: array
            title: >-
              QueryTotalTimeoutFeesResponse defines the response type for the
              TotalTimeoutFees rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        TotalTimeoutFees returns the total timeout fees for a packet given its
        identifier
      tags:
        - Query
  /ibc/apps/fee/v1/fee_enabled:
    get:
      operationId: FeeEnabledChannels
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
        - description: block height at which to query.
          format: uint64
          in: query
          name: query_height
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              fee_enabled_channels:
                items:
                  properties:
                    channel_id:
                      title: unique channel identifier
                      type: string
                    port_id:
                      title: unique port identifier
                      type: string
                  title: >-
                    FeeEnabledChannel contains the PortID & ChannelID for a fee
                    enabled channel
                  type: object
                title: list of fee enabled channels
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryFeeEnabledChannelsResponse defines the response type for the
              FeeEnabledChannels rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: FeeEnabledChannels returns a list of all fee enabled channels
      tags:
        - Query
  /ibc/apps/fee/v1/incentivized_packets:
    get:
      operationId: IncentivizedPackets
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
        - description: block height at which to query.
          format: uint64
          in: query
          name: query_height
          required: false
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              incentivized_packets:
                items:
                  properties:
                    packet_fees:
                      items:
                        properties:
                          fee:
                            title: >-
                              fee encapsulates the recv, ack and timeout fees
                              associated with an IBC packet
                            properties:
                              ack_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet acknowledgement fee
                                type: array
                              recv_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet receive fee
                                type: array
                              timeout_fee:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: the packet timeout fee
                                type: array
                            type: object
                          refund_address:
                            title: the refund address for unspent fees
                            type: string
                          relayers:
                            items:
                              type: string
                            title: >-
                              optional list of relayers permitted to receive
                              fees
                            type: array
                        title: >-
                          PacketFee contains ICS29 relayer fees, refund address
                          and optional list of permitted relayers
                        type: object
                      title: list of packet fees
                      type: array
                    packet_id:
                      title: >-
                        unique packet identifier comprised of the channel ID,
                        port ID and sequence
                      properties:
                        channel_id:
                          title: channel unique identifier
                          type: string
                        port_id:
                          title: channel port identifier
                          type: string
                        sequence:
                          format: uint64
                          title: packet sequence
                          type: string
                      type: object
                  title: >-
                    IdentifiedPacketFees contains a list of type PacketFee and
                    associated PacketId
                  type: object
                title: list of identified fees for incentivized packets
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            title: >-
              QueryIncentivizedPacketsResponse defines the response type for the
              IncentivizedPackets rpc
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        IncentivizedPackets returns all incentivized packets and their
        associated fees
      tags:
        - Query
  /ibc/apps/interchain_accounts/controller/v1/owners/{owner}/connections/{connection_id}:
    get:
      operationId: InterchainAccount
      parameters:
        - in: path
          name: owner
          required: true
          type: string
        - in: path
          name: connection_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryInterchainAccountResponse the response type for the
              Query/InterchainAccount RPC method.
            properties:
              address:
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        InterchainAccount returns the interchain account address for a given
        owner address on a given connection
      tags:
        - Query
  /ibc/apps/interchain_accounts/controller/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  controller_enabled:
                    description: >-
                      controller_enabled enables or disables the controller
                      submodule.
                    type: boolean
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters of the ICA controller submodule.
      tags:
        - Query
  /ibc/apps/interchain_accounts/host/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  allow_messages:
                    description: >-
                      allow_messages defines a list of sdk message typeURLs
                      allowed to be executed on a host chain.
                    items:
                      type: string
                    type: array
                  host_enabled:
                    description: host_enabled enables or disables the host submodule.
                    type: boolean
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters of the ICA host submodule.
      tags:
        - Query
  /ibc/apps/transfer/v1/channels/{channel_id}/ports/{port_id}/escrow_address:
    get:
      operationId: EscrowAddress
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: unique port identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryEscrowAddressResponse is the response type of the
              EscrowAddress RPC method.
            properties:
              escrow_address:
                title: the escrow account address
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        EscrowAddress returns the escrow address for a particular port and
        channel id.
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_hashes/{trace}:
    get:
      operationId: DenomHash
      parameters:
        - description: The denomination trace ([port_id]/[channel_id])+/[denom]
          in: path
          name: trace
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomHashResponse is the response type for the
              Query/DenomHash RPC

              method.
            properties:
              hash:
                description: hash (in hex format) of the denomination trace information.
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DenomHash queries a denomination hash information.
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_traces:
    get:
      operationId: DenomTraces
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/DenomTraces RPC

              method.
            properties:
              denom_traces:
                description: denom_traces returns all denominations trace information.
                items:
                  description: >-
                    DenomTrace contains the base denomination for ICS20 fungible
                    tokens and the

                    source tracing information path.
                  properties:
                    base_denom:
                      description: base denomination of the relayed fungible token.
                      type: string
                    path:
                      description: >-
                        path defines the chain of port/channel identifiers used
                        for tracing the

                        source of the fungible token.
                      type: string
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DenomTraces queries all denomination traces.
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_traces/{hash}:
    get:
      operationId: DenomTrace
      parameters:
        - description: >-
            hash (in hex format) or denom (full denom with ibc prefix) of the
            denomination trace information.
          in: path
          name: hash
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryDenomTraceResponse is the response type for the
              Query/DenomTrace RPC

              method.
            properties:
              denom_trace:
                description: >-
                  denom_trace returns the requested denomination trace
                  information.
                properties:
                  base_denom:
                    description: base denomination of the relayed fungible token.
                    type: string
                  path:
                    description: >-
                      path defines the chain of port/channel identifiers used
                      for tracing the

                      source of the fungible token.
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: DenomTrace queries a denomination trace information.
      tags:
        - Query
  /ibc/apps/transfer/v1/denoms/{denom}/total_escrow:
    get:
      operationId: TotalEscrowForDenom
      parameters:
        - in: path
          name: denom
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryTotalEscrowForDenomResponse is the response type for
              TotalEscrowForDenom RPC method.
            properties:
              amount:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        TotalEscrowForDenom returns the total amount of tokens in escrow based
        on the denom.
      tags:
        - Query
  /ibc/apps/transfer/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  receive_enabled:
                    description: >-
                      receive_enabled enables or disables all cross-chain token
                      transfers to this

                      chain.
                    type: boolean
                  send_enabled:
                    description: >-
                      send_enabled enables or disables all cross-chain token
                      transfers from this

                      chain.
                    type: boolean
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params queries all parameters of the ibc-transfer module.
      tags:
        - Query
  /ibc/core/channel/v1/channels:
    get:
      operationId: Channels
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryChannelsResponse is the response type for the Query/Channels
              RPC method.
            properties:
              channels:
                description: list of stored channels of the chain.
                items:
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                  properties:
                    channel_id:
                      title: channel identifier
                      type: string
                    connection_hops:
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                      type: array
                    counterparty:
                      title: counterparty channel end
                      properties:
                        channel_id:
                          title: channel end on the counterparty chain
                          type: string
                        port_id:
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                          type: string
                      type: object
                    ordering:
                      title: whether the channel is ordered or unordered
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      type: string
                    port_id:
                      title: port identifier
                      type: string
                    state:
                      title: current state of the channel end
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
                        UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                         - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
                         - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                        - STATE_FLUSHING
                        - STATE_FLUSHCOMPLETE
                      type: string
                    upgrade_sequence:
                      format: uint64
                      title: >-
                        upgrade sequence indicates the latest upgrade attempt
                        performed by this channel

                        the value of 0 indicates the channel has never been
                        upgraded
                      type: string
                    version:
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                      type: string
                  type: object
                type: array
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Channels queries all the IBC channels of a chain.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}:
    get:
      operationId: Channel
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryChannelResponse is the response type for the Query/Channel
              RPC method.

              Besides the Channel end, it includes a proof and the height from
              which the

              proof was retrieved.
            properties:
              channel:
                title: channel associated with the request identifiers
                description: >-
                  Channel defines pipeline for exactly-once packet delivery
                  between specific

                  modules on separate blockchains, which has at least one end
                  capable of

                  sending packets and one end capable of receiving packets.
                properties:
                  connection_hops:
                    items:
                      type: string
                    title: >-
                      list of connection identifiers, in order, along which
                      packets sent on

                      this channel will travel
                    type: array
                  counterparty:
                    title: counterparty channel end
                    properties:
                      channel_id:
                        title: channel end on the counterparty chain
                        type: string
                      port_id:
                        description: >-
                          port on the counterparty chain which owns the other
                          end of the channel.
                        type: string
                    type: object
                  ordering:
                    title: whether the channel is ordered or unordered
                    default: ORDER_NONE_UNSPECIFIED
                    description: |-
                      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                      which they were sent.
                       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                    enum:
                      - ORDER_NONE_UNSPECIFIED
                      - ORDER_UNORDERED
                      - ORDER_ORDERED
                    type: string
                  state:
                    title: current state of the channel end
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    description: >-
                      State defines if a channel is in one of the following
                      states:

                      CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
                      UNINITIALIZED.

                       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                       - STATE_INIT: A channel has just started the opening handshake.
                       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                       - STATE_OPEN: A channel has completed the handshake. Open channels are
                      ready to send and receive packets.
                       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                      packets.
                       - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
                       - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                      - STATE_CLOSED
                      - STATE_FLUSHING
                      - STATE_FLUSHCOMPLETE
                    type: string
                  upgrade_sequence:
                    format: uint64
                    title: >-
                      upgrade sequence indicates the latest upgrade attempt
                      performed by this channel

                      the value of 0 indicates the channel has never been
                      upgraded
                    type: string
                  version:
                    title: >-
                      opaque channel version, which is agreed upon during the
                      handshake
                    type: string
                type: object
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Channel queries an IBC Channel.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state:
    get:
      operationId: ChannelClientState
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              identified_client_state:
                title: client state associated with the channel
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
                properties:
                  client_id:
                    title: client identifier
                    type: string
                  client_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                    title: client state
                type: object
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ChannelClientState queries for the client state for the channel
        associated

        with the provided channel identifiers.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ChannelConsensusState
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: revision number of the consensus state
          format: uint64
          in: path
          name: revision_number
          required: true
          type: string
        - description: revision height of the consensus state
          format: uint64
          in: path
          name: revision_height
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              client_id:
                title: client ID associated with the consensus state
                type: string
              consensus_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: consensus state associated with the channel
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence:
    get:
      operationId: NextSequenceReceive
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              next_sequence_receive:
                format: uint64
                title: next sequence receive number
                type: string
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: |-
              QuerySequenceResponse is the response type for the
              Query/QueryNextSequenceReceiveResponse RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        NextSequenceReceive returns the next receive sequence for a given
        channel.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence_send:
    get:
      operationId: NextSequenceSend
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              next_sequence_send:
                format: uint64
                title: next sequence send number
                type: string
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: |-
              QueryNextSequenceSendResponse is the request type for the
              Query/QueryNextSequenceSend RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: NextSequenceSend returns the next send sequence for a given channel.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements:
    get:
      operationId: PacketAcknowledgements
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
        - collectionFormat: multi
          description: list of packet sequences.
          in: query
          items:
            format: uint64
            type: string
          name: packet_commitment_sequences
          required: false
          type: array
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              acknowledgements:
                items:
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
                  properties:
                    channel_id:
                      description: channel unique identifier.
                      type: string
                    data:
                      description: embedded data that represents packet state.
                      format: byte
                      type: string
                    port_id:
                      description: channel port identifier.
                      type: string
                    sequence:
                      description: packet sequence.
                      format: uint64
                      type: string
                  type: object
                type: array
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            title: |-
              QueryPacketAcknowledgemetsResponse is the request type for the
              Query/QueryPacketAcknowledgements RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        PacketAcknowledgements returns all the packet acknowledgements
        associated

        with a channel.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}:
    get:
      operationId: PacketAcknowledgement
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              acknowledgement:
                format: byte
                title: packet associated with the request fields
                type: string
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: >-
              QueryPacketAcknowledgementResponse defines the client query
              response for a

              packet which also includes a proof and the height from which the

              proof was retrieved
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments:
    get:
      operationId: PacketCommitments
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              commitments:
                items:
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
                  properties:
                    channel_id:
                      description: channel unique identifier.
                      type: string
                    data:
                      description: embedded data that represents packet state.
                      format: byte
                      type: string
                    port_id:
                      description: channel port identifier.
                      type: string
                    sequence:
                      description: packet sequence.
                      format: uint64
                      type: string
                  type: object
                type: array
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            title: |-
              QueryPacketCommitmentsResponse is the request type for the
              Query/QueryPacketCommitments RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks:
    get:
      operationId: UnreceivedAcks
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - collectionFormat: csv
          description: list of acknowledgement sequences
          in: path
          items:
            format: uint64
            type: string
          minItems: 1
          name: packet_ack_sequences
          required: true
          type: array
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              sequences:
                items:
                  format: uint64
                  type: string
                title: list of unreceived acknowledgement sequences
                type: array
            title: |-
              QueryUnreceivedAcksResponse is the response type for the
              Query/UnreceivedAcks RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        UnreceivedAcks returns all the unreceived IBC acknowledgements
        associated

        with a channel and sequences.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets:
    get:
      operationId: UnreceivedPackets
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - collectionFormat: csv
          description: list of packet sequences
          in: path
          items:
            format: uint64
            type: string
          minItems: 1
          name: packet_commitment_sequences
          required: true
          type: array
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              sequences:
                items:
                  format: uint64
                  type: string
                title: list of unreceived packet sequences
                type: array
            title: |-
              QueryUnreceivedPacketsResponse is the response type for the
              Query/UnreceivedPacketCommitments RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        UnreceivedPackets returns all the unreceived IBC packets associated with
        a

        channel and sequences.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}:
    get:
      operationId: PacketCommitment
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              commitment:
                format: byte
                title: packet associated with the request fields
                type: string
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: >-
              QueryPacketCommitmentResponse defines the client query response
              for a packet

              which also includes a proof and the height from which the proof
              was

              retrieved
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: PacketCommitment queries a stored packet commitment hash.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}:
    get:
      operationId: PacketReceipt
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          type: string
        - description: packet sequence
          format: uint64
          in: path
          name: sequence
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              received:
                title: success flag for if receipt exists
                type: boolean
            title: >-
              QueryPacketReceiptResponse defines the client query response for a
              packet

              receipt which also includes a proof, and the height from which the
              proof was

              retrieved
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        PacketReceipt queries if a given packet sequence has been received on
        the

        queried chain
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/upgrade:
    get:
      operationId: Upgrade
      parameters:
        - in: path
          name: channel_id
          required: true
          type: string
        - in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              upgrade:
                description: >-
                  Upgrade is a verifiable type which contains the relevant
                  information

                  for an attempted upgrade. It provides the proposed changes to
                  the channel

                  end, the timeout for this upgrade attempt and the next packet
                  sequence

                  which allows the counterparty to efficiently know the highest
                  sequence it has received.

                  The next sequence send is used for pruning and upgrading from
                  unordered to ordered channels.
                properties:
                  fields:
                    description: >-
                      UpgradeFields are the fields in a channel end which may be
                      changed

                      during a channel upgrade.
                    properties:
                      connection_hops:
                        items:
                          type: string
                        type: array
                      ordering:
                        default: ORDER_NONE_UNSPECIFIED
                        description: >-
                          - ORDER_NONE_UNSPECIFIED: zero-value for channel
                          ordering
                           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                          which they were sent.
                           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                        enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        title: Order defines if a channel is ORDERED or UNORDERED
                        type: string
                      version:
                        type: string
                    type: object
                  next_sequence_send:
                    format: uint64
                    type: string
                  timeout:
                    description: >-
                      Timeout defines an execution deadline structure for
                      04-channel handlers.

                      This includes packet lifecycle handlers as well as the
                      upgrade handshake handlers.

                      A valid Timeout contains either one or both of a timestamp
                      and block height (sequence).
                    properties:
                      height:
                        title: >-
                          block height after which the packet or upgrade times
                          out
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                        properties:
                          revision_height:
                            format: uint64
                            title: the height within the given revision
                            type: string
                          revision_number:
                            format: uint64
                            title: the revision that the client is currently on
                            type: string
                        type: object
                      timestamp:
                        format: uint64
                        title: >-
                          block timestamp (in nanoseconds) after which the
                          packet or upgrade times out
                        type: string
                    type: object
                type: object
            title: >-
              QueryUpgradeResponse is the response type for the
              QueryUpgradeResponse RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Upgrade returns the upgrade for a given port and channel id.
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/upgrade_error:
    get:
      operationId: UpgradeError
      parameters:
        - in: path
          name: channel_id
          required: true
          type: string
        - in: path
          name: port_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              error_receipt:
                description: >-
                  ErrorReceipt defines a type which encapsulates the upgrade
                  sequence and error associated with the

                  upgrade handshake failure. When a channel upgrade handshake is
                  aborted both chains are expected to increment to the

                  next sequence.
                properties:
                  message:
                    title: the error message detailing the cause of failure
                    type: string
                  sequence:
                    format: uint64
                    title: the channel upgrade sequence
                    type: string
                type: object
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            title: >-
              QueryUpgradeErrorResponse is the response type for the
              Query/QueryUpgradeError RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: UpgradeError returns the error receipt if the upgrade handshake failed.
      tags:
        - Query
  /ibc/core/channel/v1/connections/{connection}/channels:
    get:
      operationId: ConnectionChannels
      parameters:
        - description: connection unique identifier
          in: path
          name: connection
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              channels:
                description: list of channels associated with a connection.
                items:
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                  properties:
                    channel_id:
                      title: channel identifier
                      type: string
                    connection_hops:
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                      type: array
                    counterparty:
                      title: counterparty channel end
                      properties:
                        channel_id:
                          title: channel end on the counterparty chain
                          type: string
                        port_id:
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                          type: string
                      type: object
                    ordering:
                      title: whether the channel is ordered or unordered
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      type: string
                    port_id:
                      title: port identifier
                      type: string
                    state:
                      title: current state of the channel end
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN, FLUSHING, FLUSHCOMPLETE or
                        UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                         - STATE_FLUSHING: A channel has just accepted the upgrade handshake attempt and is flushing in-flight packets.
                         - STATE_FLUSHCOMPLETE: A channel has just completed flushing any in-flight packets.
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                        - STATE_FLUSHING
                        - STATE_FLUSHCOMPLETE
                      type: string
                    upgrade_sequence:
                      format: uint64
                      title: >-
                        upgrade sequence indicates the latest upgrade attempt
                        performed by this channel

                        the value of 0 indicates the channel has never been
                        upgraded
                      type: string
                    version:
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                      type: string
                  type: object
                type: array
              height:
                title: query block height
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            title: |-
              QueryConnectionChannelsResponse is the Response type for the
              Query/QueryConnectionChannels RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      tags:
        - Query
  /ibc/core/channel/v1/params:
    get:
      operationId: ChannelParams
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryChannelParamsResponse is the response type for the
              Query/ChannelParams RPC method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  upgrade_timeout:
                    description: >-
                      the relative timeout after which channel upgrades will
                      time out.
                    properties:
                      height:
                        title: >-
                          block height after which the packet or upgrade times
                          out
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                        properties:
                          revision_height:
                            format: uint64
                            title: the height within the given revision
                            type: string
                          revision_number:
                            format: uint64
                            title: the revision that the client is currently on
                            type: string
                        type: object
                      timestamp:
                        format: uint64
                        title: >-
                          block timestamp (in nanoseconds) after which the
                          packet or upgrade times out
                        type: string
                    type: object
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ChannelParams queries all parameters of the ibc channel submodule.
      tags:
        - Query
  /ibc/core/client/v1/client_states:
    get:
      operationId: ClientStates
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryClientStatesResponse is the response type for the
              Query/ClientStates RPC

              method.
            properties:
              client_states:
                description: list of stored ClientStates of the chain.
                items:
                  description: >-
                    IdentifiedClientState defines a client state with an
                    additional client

                    identifier field.
                  properties:
                    client_id:
                      title: client identifier
                      type: string
                    client_state:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                      title: client state
                  type: object
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ClientStates queries all the IBC light clients of a chain.
      tags:
        - Query
  /ibc/core/client/v1/client_states/{client_id}:
    get:
      operationId: ClientState
      parameters:
        - description: client state unique identifier
          in: path
          name: client_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryClientStateResponse is the response type for the
              Query/ClientState RPC

              method. Besides the client state, it includes a proof and the
              height from

              which the proof was retrieved.
            properties:
              client_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: client state associated with the request identifier
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                title: height at which the proof was retrieved
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ClientState queries an IBC light client.
      tags:
        - Query
  /ibc/core/client/v1/client_status/{client_id}:
    get:
      operationId: ClientStatus
      parameters:
        - description: client unique identifier
          in: path
          name: client_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryClientStatusResponse is the response type for the
              Query/ClientStatus RPC

              method. It returns the current status of the IBC client.
            properties:
              status:
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Status queries the status of an IBC client.
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}:
    get:
      operationId: ConsensusStates
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              consensus_states:
                items:
                  description: >-
                    ConsensusStateWithHeight defines a consensus state with an
                    additional height

                    field.
                  properties:
                    consensus_state:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                      title: consensus state
                    height:
                      title: consensus state height
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping

                        RevisionNumber the same. However some consensus
                        algorithms may choose to

                        reset the height in certain conditions e.g. hard forks,
                        state-machine

                        breaking changes In these cases, the RevisionNumber is
                        incremented so that

                        height continues to be monitonically increasing even as
                        the RevisionHeight

                        gets reset
                      properties:
                        revision_height:
                          format: uint64
                          title: the height within the given revision
                          type: string
                        revision_number:
                          format: uint64
                          title: the revision that the client is currently on
                          type: string
                      type: object
                  type: object
                title: consensus states associated with the identifier
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            title: |-
              QueryConsensusStatesResponse is the response type for the
              Query/ConsensusStates RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}/heights:
    get:
      operationId: ConsensusStateHeights
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              consensus_state_heights:
                items:
                  description: >-
                    Normally the RevisionHeight is incremented at each height
                    while keeping

                    RevisionNumber the same. However some consensus algorithms
                    may choose to

                    reset the height in certain conditions e.g. hard forks,
                    state-machine

                    breaking changes In these cases, the RevisionNumber is
                    incremented so that

                    height continues to be monitonically increasing even as the
                    RevisionHeight

                    gets reset
                  properties:
                    revision_height:
                      format: uint64
                      title: the height within the given revision
                      type: string
                    revision_number:
                      format: uint64
                      title: the revision that the client is currently on
                      type: string
                  title: >-
                    Height is a monotonically increasing data type

                    that can be compared against another Height for the purposes
                    of updating and

                    freezing clients
                  type: object
                title: consensus state heights
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            title: |-
              QueryConsensusStateHeightsResponse is the response type for the
              Query/ConsensusStateHeights RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ConsensusStateHeights queries the height of every consensus states
        associated with a given client.
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ConsensusState
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          type: string
        - description: consensus state revision number
          format: uint64
          in: path
          name: revision_number
          required: true
          type: string
        - description: consensus state revision height
          format: uint64
          in: path
          name: revision_height
          required: true
          type: string
        - description: >-
            latest_height overrrides the height field and queries the latest
            stored

            ConsensusState.
          in: query
          name: latest_height
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              consensus_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: >-
                  consensus state associated with the client identifier at the
                  given height
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
            title: >-
              QueryConsensusStateResponse is the response type for the
              Query/ConsensusState

              RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        ConsensusState queries a consensus state associated with a client state
        at

        a given height.
      tags:
        - Query
  /ibc/core/client/v1/params:
    get:
      operationId: ClientParams
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryClientParamsResponse is the response type for the
              Query/ClientParams RPC

              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  allowed_clients:
                    description: >-
                      allowed_clients defines the list of allowed client state
                      types which can be created

                      and interacted with. If a client type is removed from the
                      allowed clients list, usage

                      of this client will be disabled until it is added again to
                      the list.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ClientParams queries all parameters of the ibc client submodule.
      tags:
        - Query
  /ibc/core/client/v1/upgraded_client_states:
    get:
      operationId: UpgradedClientState
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryUpgradedClientStateResponse is the response type for the
              Query/UpgradedClientState RPC method.
            properties:
              upgraded_client_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: client state associated with the request identifier
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: UpgradedClientState queries an Upgraded IBC light client.
      tags:
        - Query
  /ibc/core/client/v1/upgraded_consensus_states:
    get:
      operationId: UpgradedConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState RPC method.
            properties:
              upgraded_consensus_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: Consensus state associated with the request identifier
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: UpgradedConsensusState queries an Upgraded IBC consensus state.
      tags:
        - Query
  /ibc/core/connection/v1/client_connections/{client_id}:
    get:
      operationId: ClientConnections
      parameters:
        - description: client identifier associated with a connection
          in: path
          name: client_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              connection_paths:
                description: slice of all the connection paths associated with a client.
                items:
                  type: string
                type: array
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
            title: |-
              QueryClientConnectionsResponse is the response type for the
              Query/ClientConnections RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      tags:
        - Query
  /ibc/core/connection/v1/connections:
    get:
      operationId: Connections
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/Connections RPC

              method.
            properties:
              connections:
                description: list of stored connections of the chain.
                items:
                  description: >-
                    IdentifiedConnection defines a connection with additional
                    connection

                    identifier field.
                  properties:
                    client_id:
                      description: client associated with this connection.
                      type: string
                    counterparty:
                      description: counterparty chain associated with this connection.
                      properties:
                        client_id:
                          description: >-
                            identifies the client on the counterparty chain
                            associated with a given

                            connection.
                          type: string
                        connection_id:
                          description: >-
                            identifies the connection end on the counterparty
                            chain associated with a

                            given connection.
                          type: string
                        prefix:
                          description: commitment merkle prefix of the counterparty chain.
                          properties:
                            key_prefix:
                              format: byte
                              type: string
                          title: >-
                            MerklePrefix is merkle path prefixed to the key.

                            The constructed key from the Path and the key will
                            be append(Path.KeyPath,

                            append(Path.KeyPrefix, key...))
                          type: object
                      type: object
                    delay_period:
                      description: delay period associated with this connection.
                      format: uint64
                      type: string
                    id:
                      description: connection identifier.
                      type: string
                    state:
                      description: current state of the connection end.
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                      type: string
                    versions:
                      items:
                        description: >-
                          Version defines the versioning scheme used to
                          negotiate the IBC verison in

                          the connection handshake.
                        properties:
                          features:
                            items:
                              type: string
                            title: >-
                              list of features compatible with the specified
                              identifier
                            type: array
                          identifier:
                            title: unique version identifier
                            type: string
                        type: object
                      title: >-
                        IBC version which can be utilised to determine encodings
                        or protocols for

                        channels or packets utilising this connection
                      type: array
                  type: object
                type: array
              height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
                title: pagination response
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Connections queries all the IBC connections of a chain.
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}:
    get:
      operationId: Connection
      parameters:
        - description: connection unique identifier
          in: path
          name: connection_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryConnectionResponse is the response type for the
              Query/Connection RPC

              method. Besides the connection end, it includes a proof and the
              height from

              which the proof was retrieved.
            properties:
              connection:
                title: connection associated with the request identifier
                description: >-
                  ConnectionEnd defines a stateful object on a chain connected
                  to another

                  separate one.

                  NOTE: there must only be 2 defined ConnectionEnds to establish

                  a connection between two chains.
                properties:
                  client_id:
                    description: client associated with this connection.
                    type: string
                  counterparty:
                    description: counterparty chain associated with this connection.
                    properties:
                      client_id:
                        description: >-
                          identifies the client on the counterparty chain
                          associated with a given

                          connection.
                        type: string
                      connection_id:
                        description: >-
                          identifies the connection end on the counterparty
                          chain associated with a

                          given connection.
                        type: string
                      prefix:
                        description: commitment merkle prefix of the counterparty chain.
                        properties:
                          key_prefix:
                            format: byte
                            type: string
                        title: >-
                          MerklePrefix is merkle path prefixed to the key.

                          The constructed key from the Path and the key will be
                          append(Path.KeyPath,

                          append(Path.KeyPrefix, key...))
                        type: object
                    type: object
                  delay_period:
                    description: >-
                      delay period that must pass before a consensus state can
                      be used for

                      packet-verification NOTE: delay period logic is only
                      implemented by some

                      clients.
                    format: uint64
                    type: string
                  state:
                    description: current state of the connection end.
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                    type: string
                  versions:
                    description: >-
                      IBC version which can be utilised to determine encodings
                      or protocols for

                      channels or packets utilising this connection.
                    items:
                      description: >-
                        Version defines the versioning scheme used to negotiate
                        the IBC verison in

                        the connection handshake.
                      properties:
                        features:
                          items:
                            type: string
                          title: >-
                            list of features compatible with the specified
                            identifier
                          type: array
                        identifier:
                          title: unique version identifier
                          type: string
                      type: object
                    type: array
                type: object
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Connection queries an IBC connection end.
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}/client_state:
    get:
      operationId: ConnectionClientState
      parameters:
        - description: connection identifier
          in: path
          name: connection_id
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              identified_client_state:
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
                properties:
                  client_id:
                    title: client identifier
                    type: string
                  client_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                      Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                      Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON


                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                    title: client state
                type: object
                title: client state associated with the channel
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
            title: |-
              QueryConnectionClientStateResponse is the response type for the
              Query/ConnectionClientState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ConnectionConsensusState
      parameters:
        - description: connection identifier
          in: path
          name: connection_id
          required: true
          type: string
        - format: uint64
          in: path
          name: revision_number
          required: true
          type: string
        - format: uint64
          in: path
          name: revision_height
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            properties:
              client_id:
                title: client ID associated with the consensus state
                type: string
              consensus_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
                title: consensus state associated with the channel
              proof:
                format: byte
                title: merkle proof of existence
                type: string
              proof_height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
                type: object
            title: |-
              QueryConnectionConsensusStateResponse is the response type for the
              Query/ConnectionConsensusState RPC method
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      tags:
        - Query
  /ibc/core/connection/v1/params:
    get:
      operationId: ConnectionParams
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryConnectionParamsResponse is the response type for the
              Query/ConnectionParams RPC method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  max_expected_time_per_block:
                    description: >-
                      maximum expected time per block (in nanoseconds), used to
                      enforce block delay. This parameter should reflect the

                      largest amount of time that the chain might reasonably
                      take to produce the next block under normal operating

                      conditions. A safe choice is 3-5x the expected time per
                      block.
                    format: uint64
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: ConnectionParams queries all parameters of the ibc connection submodule.
      tags:
        - Query
  /ibc/lightclients/wasm/v1/checksums:
    get:
      operationId: Checksums
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          in: query
          name: pagination.key
          required: false
          type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          in: query
          name: pagination.offset
          required: false
          type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          in: query
          name: pagination.limit
          required: false
          type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          type: boolean
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryChecksumsResponse is the response type for the
              Query/Checksums RPC method.
            properties:
              checksums:
                description: >-
                  checksums is a list of the hex encoded checksums of all wasm
                  codes stored.
                items:
                  type: string
                type: array
              pagination:
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                properties:
                  next_key:
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                    format: byte
                    type: string
                  total:
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Get all Wasm checksums
      tags:
        - Query
  /ibc/lightclients/wasm/v1/checksums/{checksum}/code:
    get:
      operationId: Code
      parameters:
        - description: checksum is a hex encoded string of the code stored.
          in: path
          name: checksum
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryCodeResponse is the response type for the Query/Code RPC
              method.
            properties:
              data:
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Get Wasm code for given checksum
      tags:
        - Query
  /nolus/mint/v1beta1/annual_inflation:
    get:
      operationId: AnnualInflation
      responses:
        '200':
          description: A successful response.
          schema:
            description: |-
              QueryAnnualInflationResponse is the response type for the
              Query/AnnualInflation RPC method.
            properties:
              annual_inflation:
                description: inflation is the current minting inflation value.
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: >-
        AnnualInflation returns the current minting inflation rate for the next
        12

        months.
      tags:
        - Query
  /nolus/mint/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params defines the parameters of the module.
                properties:
                  max_mintable_nanoseconds:
                    type: string
                  mint_denom:
                    title: type of coin to mint
                    type: string
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Params returns the total set of minting parameters.
      tags:
        - Query
  /nolus/mint/v1beta1/state:
    get:
      operationId: MintState
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryMintStateResponse is the response type for the Query/State
              RPC

              method.
            properties:
              norm_time_passed:
                format: byte
                type: string
              total_minted:
                format: byte
                type: string
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: MintState returns the current minting state value.
      tags:
        - Query
  /nomo/nolus-core/tax/params:
    get:
      operationId: Params
      responses:
        '200':
          description: A successful response.
          schema:
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
            properties:
              params:
                description: params holds all the parameters of this module.
                properties:
                  base_denom:
                    type: string
                  contract_address:
                    type: string
                  fee_params:
                    items:
                      properties:
                        accepted_denoms:
                          items:
                            properties:
                              denom:
                                type: string
                              ticker:
                                type: string
                            title: >-
                              DenomTicker will be used to define accepted denoms
                              and their ticker
                            type: object
                          type: array
                        oracle_address:
                          type: string
                        profit_address:
                          type: string
                      title: >-
                        Defines the accepted fees with corresponding oracle and
                        profit addresses
                      type: object
                    type: array
                  fee_rate:
                    format: int32
                    type: integer
                type: object
            type: object
        default:
          description: An unexpected error response.
          schema:
            properties:
              code:
                format: int32
                type: integer
              details:
                items:
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  properties:
                    type_url:
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                      type: string
                    value:
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                      format: byte
                      type: string
                  type: object
                type: array
              error:
                type: string
              message:
                type: string
            type: object
      summary: Parameters queries the parameters of the module.
      tags:
        - Query
produces:
  - application/json
swagger: '2.0'
